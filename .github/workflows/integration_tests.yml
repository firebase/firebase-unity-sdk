name: Integration tests

on:

  workflow_dispatch:
    inputs:
      packaged_sdk_run_id:
        description: 'run # of "Firebase Unity SDK build" workflow. (If Leave it empty, the latest released Unity SDK will be used.)'
      unity_versions:
        description: 'Unity version'
        default: '2019'
        required: true
      build_os:
        description: 'Build OS (windows-latest,macos-latest)'
        default: 'macos-latest'
        required: true
      platforms:
        description: 'CSV of Android,iOS,Windows,macOS,Linux,Playmode'
        default: 'Android,iOS,Windows,macOS,Linux,Playmode'
        required: true
      apis:
        description: 'CSV of apis to build and test'
        default: 'analytics,auth,crashlytics,database,dynamic_links,firestore,functions,installations,messaging,remote_config,storage'
        required: true
      mobile_test_on:
        description: 'Run mobile tests on real and/or virtual devices? (separated by commas)'
        default: 'real,virtual'
        required: true
      use_expanded_matrix:
        description: 'Use an expanded matrix? Note: above config will be ignored.'
        default: '0'
        required: true
      test_pull_request:
        description: 'Optional: Pull request # to build and test? (With optional commit hash, separated by a colon. Specify the FULL hash.)'

env:
  triggerLabelPrefix: "tests-requested: "
  triggerLabelFull: "tests-requested: full"
  triggerLabelQuick: "tests-requested: quick"
  pythonVersion: '3.7'
  artifactRetentionDays: 2

jobs:
  check_and_prepare:
    runs-on: ubuntu-latest
    outputs:
      trigger: ${{ steps.set_outputs.outputs.trigger }}
      github_ref: ${{ steps.set_outputs.outputs.github_ref }}
      pr_number: ${{ steps.set_outputs.outputs.pr_number }}
      matrix_build_os: ${{ steps.matrix_config.outputs.matrix_build_os }}
      matrix_build_platform: ${{ steps.matrix_config.outputs.matrix_build_platform }}
      matrix_unity_versions: ${{ steps.matrix_config.outputs.matrix_unity_versions }}
      matrix_desktop_os: ${{ steps.matrix_config.outputs.matrix_desktop_os }}
      matrix_mobile_platform: ${{ steps.matrix_config.outputs.matrix_mobile_platform }}
      platform: ${{ steps.matrix_config.outputs.platform }}
      apis: ${{ steps.matrix_config.outputs.apis }}
      mobile_test_on: ${{ steps.matrix_config.outputs.mobile_test_on }}
      mobile_device: ${{ steps.matrix_config.outputs.mobile_device }}
    steps:
    ### Fail the workflow if the user does not have admin access to run the tests.
    - name: Check if user has permission to trigger tests
      uses: lannonbr/repo-permission-check-action@2.0.0
      with:
        permission: "admin"
      env:
        GITHUB_TOKEN: ${{ github.token }}
    ### It sets "github_ref,trigger,pr_number,requested_tests" outputs to control the following jobs and steps
    ### trigger value: manual_trigger, scheduled_trigger, label_trigger, postsubmit_trigger
    - id: set_outputs
      run: |
        if [[ "${{ github.event.inputs.test_pull_request }}" == *"label-quick-packaging" ]]; then
          # Triggered by build_starter SDK workflow.
          echo "::set-output name=trigger::label_trigger"
          echo "::set-output name=requested_tests::auto"
          echo "::set-output name=github_ref::${{github.sha}}"
          echo "::set-output name=pr_number::$(echo ${{ github.event.inputs.test_pull_request }} | cut -d: -f1)"
        elif [[ "${{ github.event.inputs.test_pull_request }}" == *"label-full-packaging" ]]; then
          # Triggered by build_starter SDK workflow.
          echo "::set-output name=trigger::label_trigger"
          echo "::set-output name=requested_tests::expanded"
          echo "::set-output name=github_ref::${{github.sha}}"
          echo "::set-output name=pr_number::$(echo ${{ github.event.inputs.test_pull_request }} | cut -d: -f1)"
        elif [[ "${{ github.event.inputs.test_pull_request }}" == *"pr-close-packaging" ]]; then
          # Triggered by build_starter SDK workflow.
          echo "::set-output name=trigger::postsubmit_trigger"
          echo "::set-output name=requested_tests::auto"
          echo "::set-output name=github_ref::${{github.sha}}"
          echo "::set-output name=pr_number::$(echo ${{ github.event.inputs.test_pull_request }} | cut -d: -f1)"
        elif [[ "${{ github.event.inputs.test_pull_request }}" == "nightly-packaging" ]]; then
          # Triggered by build_starter SDK workflow.
          echo "::set-output name=trigger::scheduled_trigger"
          echo "::set-output name=requested_tests::expanded"
          echo "::set-output name=github_ref::${{github.sha}}"
        elif [[ "${{ github.event.inputs.test_pull_request }}" == "1" ]]; then
          # Triggered by build_starter SDK workflow.
          echo "::set-output name=trigger::manual_trigger"
          echo "::set-output name=requested_tests::auto"
          echo "::set-output name=github_ref::${{github.sha}}"
        else
          # Triggered manually
          echo "::set-output name=trigger::manual_trigger"
          if [[ "${{ github.event.inputs.use_expanded_matrix }}" == "1" ]]; then
            echo "::set-output name=requested_tests::expanded"
          fi
          if [[ -z "${{github.event.inputs.test_pull_request}}" ]]; then
            # test_pull_request not specified
            echo "::set-output name=github_ref::${{github.sha}}"
          elif [[ "${{github.event.inputs.test_pull_request}}" == *:* ]]; then
            # If specified as pr:commit_hash, split them.
            echo "::set-output name=github_ref::$(echo ${{ github.event.inputs.test_pull_request }} | cut -d: -f2)"
            echo "::set-output name=pr_number::$(echo ${{ github.event.inputs.test_pull_request }} | cut -d: -f1)"
          else
            # Just the PR specified, use refs/pull/<number>/merge as the ref.
            echo "::set-output name=github_ref::refs/pull/${{github.event.inputs.test_pull_request}}/merge"
            echo "::set-output name=pr_number::${{ github.event.inputs.test_pull_request }}"
          fi
        fi
    - uses: actions/checkout@v2
      with:
        ref: ${{steps.set_outputs.outputs.github_ref}}
        fetch-depth: 0
        submodules: false
    - name: Setup python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.pythonVersion }}
    - name: Install python deps
      run: pip install -r scripts/gha/requirements.txt
    - id: matrix_config
      run: |
        if [[ "${{ steps.set_outputs.outputs.requested_tests }}" == "expanded" ]]; then 
          TEST_MATRIX_PARAM=-e=1
          echo "::warning ::Running on the expanded matrix"
        elif [[ "${{ steps.set_outputs.outputs.requested_tests }}" == "minimal" ]]; then 
          TEST_MATRIX_PARAM=-m=1
          echo "::warning ::Running on the minimal matrix"
        elif [[ "${{ steps.set_outputs.outputs.requested_tests }}" == "auto" ]]; then 
          # auto-diff only apply when running in a PR. 
          # diff against the PR's base. "git merge-base main branch_name" will give the common ancestor of both branches.
          MERGE_BASE=$(git merge-base origin/${{github.event.pull_request.head.ref}} origin/${{github.event.pull_request.base.ref}} || true)
          # If origin/<branch> is no longer valid, then just run all tests.
          if [[ -n "${MERGE_BASE}" ]]; then
            echo "::warning ::Auto-diff origin/${{github.event.pull_request.head.ref}}..${MERGE_BASE}"
            git diff --name-only origin/${{github.event.pull_request.head.ref}}..${MERGE_BASE}
            TEST_MATRIX_PARAM="--auto_diff origin/${{github.event.pull_request.head.ref}}..${MERGE_BASE}"
          fi
        fi
        # To feed input into the job matrix, we first need to convert to a JSON
        # list. Then we can use fromJson to define the field in the matrix for the tests job.
        echo "::set-output name=apis::$( python scripts/gha/print_matrix_configuration.py -c -w integration_tests -k apis -o "${{github.event.inputs.apis}}" ${TEST_MATRIX_PARAM} )"
        platform=$( python scripts/gha/print_matrix_configuration.py -c -w integration_tests ${TEST_MATRIX_PARAM} -k platform -o "${{github.event.inputs.platforms}}" )
        echo "::set-output name=platform::${platform}"
        echo "::set-output name=matrix_desktop_os::$( python scripts/gha/print_matrix_configuration.py -w integration_tests ${TEST_MATRIX_PARAM} -k "${platform}" -desktop_os=1)"
        echo "::set-output name=matrix_mobile_platform::$( python scripts/gha/print_matrix_configuration.py -w integration_tests ${TEST_MATRIX_PARAM} -k "${platform}" -mobile_platform=1)"
        echo "::set-output name=matrix_build_platform::$( python scripts/gha/print_matrix_configuration.py -w integration_tests ${TEST_MATRIX_PARAM} -k "${platform}" -build_platform=1)"
        echo "::set-output name=matrix_build_os::$( python scripts/gha/print_matrix_configuration.py -w integration_tests ${TEST_MATRIX_PARAM} -k build_os -o "${{github.event.inputs.build_os}}")"
        echo "::set-output name=matrix_unity_versions::$( python scripts/gha/print_matrix_configuration.py -w integration_tests ${TEST_MATRIX_PARAM} -k unity_version -o "${{github.event.inputs.unity_versions}}")"
        mobile_test_on=$( python scripts/gha/print_matrix_configuration.py -c -w integration_tests -k mobile_test_on -o "${{github.event.inputs.mobile_test_on}}")
        echo "::set-output name=mobile_test_on::${mobile_test_on}"
        echo "::set-output name=mobile_device::$( python scripts/gha/print_matrix_configuration.py -w integration_tests ${TEST_MATRIX_PARAM} -k mobile_device -t ${mobile_test_on} -p ${platform})"
    - name: Update PR label and comment
      if: steps.set_outputs.outputs.pr_number
      run: |
        #Add the in-progress label and remove any previous labels.
        python scripts/gha/it_workflow.py --stage start \
          --token ${{github.token}} \
          --issue_number ${{steps.set_outputs.outputs.pr_number}} \
          --actor ${{github.actor}} \
          --commit ${{steps.set_outputs.outputs.github_ref}} \
          --run_id ${{github.run_id}}

  build:
    name: build-${{ matrix.unity_version }}-${{matrix.os}}-${{ matrix.platform }}
    runs-on: ${{matrix.os}}
    if: ${{ needs.check_and_prepare.outputs.matrix_build_platform != '[]' }}
    needs: check_and_prepare
    strategy:
      fail-fast: false
      matrix:
        unity_version: ${{ fromJson(needs.check_and_prepare.outputs.matrix_unity_versions) }}
        os: ${{ fromJson(needs.check_and_prepare.outputs.matrix_build_os) }}
        platform: ${{ fromJson(needs.check_and_prepare.outputs.matrix_build_platform) }}
        exclude:
          - os: windows-latest
            platform: "iOS"
    env:
      # LC_ALL, LANG and U3D_PASSWORD are needed for U3D.
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
      U3D_PASSWORD: ""
      # Disable checking for U3D updates, since it is buggy
      U3D_SKIP_UPDATE_CHECK: 1
    steps:
      - uses: actions/checkout@v2
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.0.2
      - name: Install Unity installer (U3D)
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          shell: bash
          command: gem install u3d -v 1.2.3
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: Install python deps
        timeout-minutes: 10
        shell: bash
        run: |
          pip install -r scripts/gha/requirements.txt
      - name: Install Unity
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 30
          max_attempts: 3
          shell: bash
          command: |
            python scripts/gha/unity_installer.py --install \
              --platforms ${{ matrix.platform }} \
              --version ${{ matrix.unity_version }}
      - name: Activate Unity license
        timeout-minutes: 10
        shell: bash
        run: |
          python scripts/gha/unity_installer.py --activate_license \
            --version ${{ matrix.unity_version }}  \
            --username "${{ secrets.UNITY_USERNAME }}" \
            --password "${{ secrets.UNITY_PASSWORD }}" \
            --serial_ids "${{ secrets.SERIAL_ID }}" \
            --logfile "testapps/activate_license.log"
      - name: Prepare for integration tests
        timeout-minutes: 10
        shell: bash
        run: |
          python scripts/gha/restore_secrets.py --passphrase "${{ secrets.TEST_SECRET }}"
      - name: Fetch prebuilt packaged SDK from previous run
        if: ${{ github.event.inputs.packaged_sdk_run_id != '' }}
        uses: dawidd6/action-download-artifact@v2
        with:
          name: 'firebase_unity_sdk.zip'
          workflow: 'build_starter.yml'
          run_id: ${{ github.event.inputs.packaged_sdk_run_id }}
      - name: Build integration tests
        timeout-minutes: 240
        shell: bash
        run: |
          if [[ -n "${{ github.event.inputs.packaged_sdk_run_id }}" ]]; then
            unzip -q firebase_unity_sdk.zip -d ~/Downloads/
          else
            curl -L "https://firebase.google.com/download/unity" -o ~/Downloads/firebase_unity_sdk.zip
            unzip -q ~/Downloads/firebase_unity_sdk.zip -d ~/Downloads/
          fi
          python scripts/gha/build_testapps.py \
            --t ${{ needs.check_and_prepare.outputs.apis }} \
            --u $( python scripts/gha/print_matrix_configuration.py -k version -u ${{matrix.unity_version}}) \
            --p ${{ matrix.platform }} \
            --ios_sdk ${{ needs.check_and_prepare.outputs.mobile_test_on }} \
            --plugin_dir ~/Downloads/firebase_unity_sdk \
            --output_directory "${{ github.workspace }}" \
            --artifact_name "${{ matrix.unity_version }}-${{matrix.os}}-${{ matrix.platform }}" \
            --force_latest_runtime \
            --ci
      - name: Return Unity license
        # Always returns true, even when job failed or canceled. But will not run when a critical failure prevents the task from running. 
        if: always()
        # Retry at most 3 times when Return Unity license fails.
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          shell: bash
          command: |
            python scripts/gha/unity_installer.py --release_license \
              --version ${{ matrix.unity_version }} \
              --logfile "testapps/release_license.log"
            cat testapps/release_license.log
      - name: Prepare results summary artifact
        if: ${{ !cancelled() }}
        shell: bash
        run: |
          if [ ! -f build-results-${{ matrix.unity_version }}-${{matrix.os}}-${{ matrix.platform }}.log.json ]; then
            # No summary was created, make a placeholder one.
            echo "__SUMMARY_MISSING__" > build-results-${{ matrix.unity_version }}-${{matrix.os}}-${{ matrix.platform }}.log.json
          fi
      - name: Upload build results artifact
        uses: actions/upload-artifact@v3
        if: ${{ !cancelled() }}
        with:
          name: log-artifact
          path: build-results-${{ matrix.unity_version }}-${{matrix.os}}-${{ matrix.platform }}*
          retention-days: ${{ env.artifactRetentionDays }}
      - name: Upload Android integration tests artifact
        uses: actions/upload-artifact@v3
        if: contains(matrix.platform, 'Android') && ${{ !cancelled() }}
        with:
          name: testapps-${{ matrix.unity_version }}-${{matrix.os}}-Android
          path: testapps-${{ matrix.unity_version }}-${{matrix.os}}-${{ matrix.platform }}/Android
          retention-days: ${{ env.artifactRetentionDays }}
      - name: Delete Android integration tests artifact
        if: contains(needs.check_and_prepare.outputs.platform, 'Android') && ${{ !cancelled() }}
        shell: bash
        run: rm -rf testapps-${{ matrix.unity_version }}-${{matrix.os}}-${{ needs.check_and_prepare.outputs.platform }}/Android || true
      - name: Upload iOS integration tests artifact
        uses: actions/upload-artifact@v3
        if: contains(matrix.platform, 'iOS') && ${{ !cancelled() }}
        with:
          name: testapps-${{ matrix.unity_version }}-${{matrix.os}}-iOS
          path: testapps-${{ matrix.unity_version }}-${{matrix.os}}-${{ matrix.platform }}/iOS
          retention-days: ${{ env.artifactRetentionDays }}
      - name: Delete iOS integration tests artifact
        if: contains(needs.check_and_prepare.outputs.platform, 'iOS') && ${{ !cancelled() }}
        shell: bash
        run: rm -rf testapps-${{ matrix.unity_version }}-${{matrix.os}}-${{ needs.check_and_prepare.outputs.platform }}/iOS || true
      - name: Upload Linux integration tests artifact
        uses: actions/upload-artifact@v3
        if: contains(matrix.platform, 'Linux') && ${{ !cancelled() }}
        with:
          name: testapps-${{ matrix.unity_version }}-${{matrix.os}}-ubuntu-latest
          path: testapps-${{ matrix.unity_version }}-${{matrix.os}}-${{ matrix.platform }}/Linux
          retention-days: ${{ env.artifactRetentionDays }}
      - name: Delete Linux integration tests artifact
        if: contains(needs.check_and_prepare.outputs.platform, 'Linux') && ${{ !cancelled() }}
        shell: bash
        run: rm -rf testapps-${{ matrix.unity_version }}-${{matrix.os}}-${{ needs.check_and_prepare.outputs.platform }}/Linux || true
      - name: Upload macOS integration tests artifact
        uses: actions/upload-artifact@v3
        if: contains(matrix.platform, 'macOS') && ${{ !cancelled() }}
        with:
          name: testapps-${{ matrix.unity_version }}-${{matrix.os}}-macos-latest
          path: testapps-${{ matrix.unity_version }}-${{matrix.os}}-${{ matrix.platform }}/macOS
          retention-days: ${{ env.artifactRetentionDays }}
      - name: Delete macOS integration tests artifact
        if: contains(needs.check_and_prepare.outputs.platform, 'macOS') && ${{ !cancelled() }}
        shell: bash
        run: rm -rf testapps-${{ matrix.unity_version }}-${{matrix.os}}-${{ needs.check_and_prepare.outputs.platform }}/macOS || true
      - name: Upload Windows integration tests artifact
        uses: actions/upload-artifact@v3
        if: contains(matrix.platform, 'Windows') && ${{ !cancelled() }}
        with:
          name: testapps-${{ matrix.unity_version }}-${{matrix.os}}-windows-latest
          path: testapps-${{ matrix.unity_version }}-${{matrix.os}}-${{ matrix.platform}}/Windows
          retention-days: ${{ env.artifactRetentionDays }}
      - name: Delete Windows integration tests artifact
        if: contains(needs.check_and_prepare.outputs.platform, 'Windows') && ${{ !cancelled() }}
        shell: bash
        run: rm -rf testapps-${{ matrix.unity_version }}-${{matrix.os}}-${{ needs.check_and_prepare.outputs.platform }}/Windows || true
      - name: Download log artifacts
        if: ${{ needs.check_and_prepare.outputs.pr_number && failure() && !cancelled() }}
        uses: actions/download-artifact@v3
        with:
          path: test_results
          name: log-artifact
      - name: Update PR label and comment
        if: ${{ needs.check_and_prepare.outputs.pr_number && failure() && !cancelled() }}
        shell: bash
        run: |
          python scripts/gha/it_workflow.py --stage progress \
            --token ${{github.token}} \
            --issue_number ${{needs.check_and_prepare.outputs.pr_number}}\
            --actor ${{github.actor}} \
            --commit ${{needs.check_and_prepare.outputs.github_ref}} \
            --run_id ${{github.run_id}}
      - name: Summarize build results
        if: ${{ !cancelled() }}
        shell: bash
        run: |
          cat build-results-${{ matrix.unity_version }}-${{matrix.os}}-${{ matrix.platform }}.log
          if [[ "${{ job.status }}" != "success" ]]; then
            exit 1
          fi

  test_playmode:
    name: test-${{ matrix.unity_version }}-${{matrix.os}}-Playmode
    runs-on: ${{matrix.os}}
    if: contains(needs.check_and_prepare.outputs.platform, 'Playmode') && !cancelled()
    needs: check_and_prepare
    strategy:
      fail-fast: false
      matrix:
        unity_version: ${{ fromJson(needs.check_and_prepare.outputs.matrix_unity_versions) }}
        os: ${{ fromJson(needs.check_and_prepare.outputs.matrix_build_os) }}
    env:
      # LC_ALL, LANG and U3D_PASSWORD are needed for U3D.
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
      U3D_PASSWORD: ""
      # Disable checking for U3D updates, since it is buggy
      U3D_SKIP_UPDATE_CHECK: 1
    steps:
      - uses: actions/checkout@v2
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.0.2
      - name: Install Unity installer (U3D)
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          shell: bash
          command: gem install u3d -v 1.2.3
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: Install python deps
        timeout-minutes: 10
        shell: bash
        run: |
          pip install -r scripts/gha/requirements.txt
      - name: Install Unity
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 20
          max_attempts: 3
          shell: bash
          command: |
            python scripts/gha/unity_installer.py --install \
              --version ${{ matrix.unity_version }}
      - name: Activate Unity license
        timeout-minutes: 10
        shell: bash
        run: |
          python scripts/gha/unity_installer.py --activate_license \
            --version ${{ matrix.unity_version }}  \
            --username "${{ secrets.UNITY_USERNAME }}" \
            --password "${{ secrets.UNITY_PASSWORD }}" \
            --serial_ids "${{ secrets.SERIAL_ID }}" \
            --logfile "testapps/activate_license.log"
      - name: Prepare for integration tests
        timeout-minutes: 10
        shell: bash
        run: |
          python scripts/gha/restore_secrets.py --passphrase "${{ secrets.TEST_SECRET }}"
      - name: Fetch prebuilt packaged SDK from previous run
        if: ${{ github.event.inputs.packaged_sdk_run_id != '' }}
        uses: dawidd6/action-download-artifact@v2
        with:
          name: 'firebase_unity_sdk.zip'
          workflow: 'build_starter.yml'
          run_id: ${{ github.event.inputs.packaged_sdk_run_id }} 
      - name: Run Playmode (in editor mode) integration tests
        shell: bash
        run: |
          if [[ -n "${{ github.event.inputs.packaged_sdk_run_id }}" ]]; then
            unzip -q firebase_unity_sdk.zip -d ~/Downloads/
          else
            curl -L "https://firebase.google.com/download/unity" -o ~/Downloads/firebase_unity_sdk.zip
            unzip -q ~/Downloads/firebase_unity_sdk.zip -d ~/Downloads/
          fi
          python scripts/gha/build_testapps.py \
            --t ${{ needs.check_and_prepare.outputs.apis }} \
            --u $( python scripts/gha/print_matrix_configuration.py -k version -u ${{matrix.unity_version}}) \
            --p Playmode \
            --ios_sdk ${{ needs.check_and_prepare.outputs.mobile_test_on }} \
            --plugin_dir ~/Downloads/firebase_unity_sdk \
            --output_directory "${{ github.workspace }}" \
            --artifact_name "${{ matrix.unity_version }}-${{matrix.os}}-Playmode" \
            --force_latest_runtime \
            --ci
      - name: Return Unity license
        # Always returns true, even when job failed or canceled. But will not run when a critical failure prevents the task from running. 
        if: always()
        # Retry at most 3 times when Return Unity license fails.
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          shell: bash
          command: |
            python scripts/gha/unity_installer.py --release_license \
              --version ${{ matrix.unity_version }} \
              --logfile "testapps/release_license.log"
            cat testapps/release_license.log
      - name: Prepare results summary artifact
        if: ${{ !cancelled() }}
        shell: bash
        run: |
          if [ ! -f test-results-${{ matrix.unity_version }}-${{matrix.os}}-Playmode.log.json ]; then
            # No summary was created, make a placeholder one.
            echo "__SUMMARY_MISSING__" > test-results-${{ matrix.unity_version }}-${{matrix.os}}-Playmode.log.json
          fi
      - name: Upload test results artifact
        uses: actions/upload-artifact@v3
        if: ${{ !cancelled() }}
        with:
          name: log-artifact
          path: test-results-${{ matrix.unity_version }}-${{matrix.os}}-Playmode*
          retention-days: ${{ env.artifactRetentionDays }}
      - name: Update PR label and comment
        if: ${{ needs.check_and_prepare.outputs.pr_number && failure() && !cancelled() }}
        shell: bash
        run: |
          python scripts/gha/it_workflow.py --stage progress \
            --token ${{github.token}} \
            --issue_number ${{needs.check_and_prepare.outputs.pr_number}}\
            --actor ${{github.actor}} \
            --commit ${{needs.check_and_prepare.outputs.github_ref}} \
            --run_id ${{github.run_id}}
      - name: Summarize test results
        if: ${{ !cancelled() }}
        shell: bash
        run: |
          cat test-results-${{ matrix.unity_version }}-${{matrix.os}}-Playmode.log
          if [[ "${{ job.status }}" != "success" ]]; then
            exit 1
          fi

  test_desktop:
    name: test-${{ matrix.unity_version }}-${{ matrix.build_os }}-${{ matrix.os }}-desktop
    runs-on: ${{ matrix.os }}
    if: (contains(needs.check_and_prepare.outputs.platform, 'Windows') || contains(needs.check_and_prepare.outputs.platform, 'macOS') || contains(needs.check_and_prepare.outputs.platform, 'Linux')) && !cancelled()
    needs: [check_and_prepare, build]
    strategy:
      fail-fast: false
      matrix:
        unity_version: ${{ fromJson(needs.check_and_prepare.outputs.matrix_unity_versions) }}
        build_os: ${{ fromJson(needs.check_and_prepare.outputs.matrix_build_os) }}
        os: ${{ fromJson(needs.check_and_prepare.outputs.matrix_desktop_os) }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{needs.check_and_prepare.outputs.github_ref}}
      - name: Download Desktop integration tests artifact
        uses: actions/download-artifact@v3
        with:
          path: testapps
          name: testapps-${{ matrix.unity_version }}-${{ matrix.build_os }}-${{ matrix.os }}
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: Install python deps
        timeout-minutes: 10
        shell: bash
        run: |
          pip install -r scripts/gha/requirements.txt
      - name: Run Desktop integration tests
        timeout-minutes: 30
        shell: bash
        run: |
          python scripts/gha/desktop_tester.py --testapp_dir testapps \
            --logfile_name "${{ matrix.unity_version }}-${{ matrix.build_os }}-${{ matrix.os }}-desktop"
      - name: Prepare results summary artifact
        if: ${{ !cancelled() }}
        shell: bash
        run: |
          # If testapps do not exist, then it's a build error not test error. 
          if [ -d "testapps/testapps-${{ matrix.unity_version }}-${{ matrix.build_os }}-${{ matrix.os }}" &&  ! -f testapps/test-results-${{ matrix.unity_version }}-${{ matrix.build_os }}-${{ matrix.os }}-desktop.log.json ]; then
            mkdir -p testapps && echo "__SUMMARY_MISSING__" > testapps/test-results-${{ matrix.unity_version }}-${{ matrix.build_os }}-${{ matrix.os }}-desktop.log.json
          fi
      - name: Upload Desktop test results artifact
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v3
        with:
          name: log-artifact
          path: testapps/test-results-${{ matrix.unity_version }}-${{ matrix.build_os }}-${{ matrix.os }}-desktop*
          retention-days: ${{ env.artifactRetentionDays }}
      - name: Download log artifacts
        if: ${{ needs.check_and_prepare.outputs.pr_number && failure() && !cancelled() }}
        uses: actions/download-artifact@v3
        with:
          path: test_results
          name: log-artifact
      - name: Update PR label and comment
        shell: bash
        if: ${{ needs.check_and_prepare.outputs.pr_number && failure() && !cancelled() }}
        run: |
          python scripts/gha/it_workflow.py --stage progress \
            --token ${{github.token}} \
            --issue_number ${{needs.check_and_prepare.outputs.pr_number}}\
            --actor ${{github.actor}} \
            --commit ${{needs.check_and_prepare.outputs.github_ref}} \
            --run_id ${{github.run_id}}
      - name: Summarize test results
        if: ${{ !cancelled() }}
        shell: bash
        run: |
          cat testapps/test-results-${{ matrix.unity_version }}-${{ matrix.build_os }}-${{ matrix.os }}-desktop.log
          if [[ "${{ job.status }}" != "success" ]]; then
            exit 1
          fi

  test_mobile:
    name: test-${{ matrix.unity_version }}-${{ matrix.build_os }}-${{ matrix.mobile_device }}-mobile
    runs-on: macos-11
    if: (contains(needs.check_and_prepare.outputs.platform, 'Android') || contains(needs.check_and_prepare.outputs.platform, 'iOS')) && !cancelled()
    needs: [check_and_prepare, build]
    strategy:
      fail-fast: false
      matrix:
        unity_version: ${{ fromJson(needs.check_and_prepare.outputs.matrix_unity_versions) }}
        build_os: ${{ fromJson(needs.check_and_prepare.outputs.matrix_build_os) }}
        mobile_device: ${{ fromJson(needs.check_and_prepare.outputs.mobile_device) }}
        exclude:
        # disable tests on android emualtor temporarily
          - mobile_device: "emulator_latest"
          - build_os: windows-latest
            mobile_device: "ios_target"
          - build_os: windows-latest
            mobile_device: "simulator_target"
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{needs.check_and_prepare.outputs.github_ref}}
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: Install python deps
        timeout-minutes: 10
        shell: bash
        run: |
          pip install -r scripts/gha/requirements.txt
      - id: device-info
        run: |
          echo "::set-output name=device_type::$( python scripts/gha/print_matrix_configuration.py -k ${{ matrix.mobile_device }} -get_device_type)"
          echo "::set-output name=device_platform::$( python scripts/gha/print_matrix_configuration.py -k ${{ matrix.mobile_device }} -get_device_platform)"
          echo "::set-output name=device::$( python scripts/gha/print_matrix_configuration.py -k ${{ matrix.mobile_device }} -get_ftl_device)"
      - name: Download Mobile integration tests artifact
        uses: actions/download-artifact@v3
        with:
          path: testapps
          name: testapps-${{ matrix.unity_version }}-${{ matrix.build_os }}-${{ steps.device-info.outputs.device_platform }}
      - id: ftl_test
        if: steps.device-info.outputs.device_type == 'real'
        uses: FirebaseExtended/github-actions/firebase-test-lab@v1.0
        with:
          credentials_json: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_CREDENTIALS }}
          testapp_dir: testapps
          test_type: "game-loop"
          test_devices: ${{ steps.device-info.outputs.device }}
      - name: Read FTL Test Result
        if: steps.device-info.outputs.device_type == 'real'
        timeout-minutes: 60
        shell: bash
        run: |
          python scripts/gha/read_ftl_test_result.py --test_result '${{ steps.ftl_test.outputs.test_summary }}' \
            --output_path testapps/test-results-${{ matrix.unity_version }}-${{ matrix.build_os }}-${{ matrix.mobile_device }}-mobile.log
      - name: Run Mobile integration tests on virtual device locally
        timeout-minutes: 60
        if: steps.device-info.outputs.device_type == 'virtual'
        run: |
          python scripts/gha/test_simulator.py --testapp_dir testapps \
            --ios_device "${{ matrix.mobile_device }}" \
            --android_device "${{ matrix.mobile_device }}" \
            --logfile_name "${{ matrix.unity_version }}-${{ matrix.build_os }}-${{ matrix.mobile_device }}-mobile" \
            --ci
      - name: Prepare results summary artifact
        if: ${{ !cancelled() }}
        shell: bash
        run: |
          # If testapps do not exist, then it's a build error not test error. 
          if [ -d "testapps/testapps-${{ matrix.unity_version }}-${{ matrix.build_os }}-${{ steps.device-info.outputs.device_platform }}" && ! -f testapps/test-results-${{ matrix.unity_version }}-${{ matrix.build_os }}-${{ matrix.mobile_device }}-mobile.log.json ]; then
            mkdir -p testapps && echo "__SUMMARY_MISSING__" > testapps/test-results-${{ matrix.unity_version }}-${{ matrix.build_os }}-${{ matrix.mobile_device }}-mobile.log.json
          fi
      - name: Upload Mobile test results artifact
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v3
        with:
          name: log-artifact
          path: testapps/test-results-${{ matrix.unity_version }}-${{ matrix.build_os }}-${{ matrix.mobile_device }}-mobile*
          retention-days: ${{ env.artifactRetentionDays }}
      - name: Download log artifacts
        if: ${{ needs.check_and_prepare.outputs.pr_number && failure() && !cancelled() }}
        uses: actions/download-artifact@v3
        with:
          path: test_results
          name: log-artifact
      - name: Update PR label and comment
        if: ${{ needs.check_and_prepare.outputs.pr_number && failure() && !cancelled() }}
        run: |
          python scripts/gha/it_workflow.py --stage progress \
            --token ${{github.token}} \
            --issue_number ${{needs.check_and_prepare.outputs.pr_number}}\
            --actor ${{github.actor}} \
            --commit ${{needs.check_and_prepare.outputs.github_ref}} \
            --run_id ${{github.run_id}}
      - name: Summarize test results
        if: ${{ !cancelled() }}
        shell: bash
        run: |
          cat testapps/test-results-${{ matrix.unity_version }}-${{ matrix.build_os }}-${{ matrix.mobile_device }}-mobile.log
          if [[ "${{ job.status }}" != "success" ]]; then
            exit 1
          fi

  summarize_results:
    name: "summarize-results"
    needs: [check_and_prepare, build, test_playmode, test_desktop, test_mobile]
    runs-on: ubuntu-latest
    if: ${{ !cancelled() }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{needs.check_and_prepare.outputs.github_ref}}
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.pythonVersion }}
      - name: Install python deps
        run: pip install -r scripts/gha/requirements.txt
      - name: Download log artifacts
        uses: actions/download-artifact@v3
        with:
          path: test_results
          name: log-artifact
      # Use a different token to remove the "in-progress" label,
      # to allow the removal to trigger the "Check Labels" workflow.
      - name: Generate token for GitHub API
        uses: tibdex/github-app-token@v1
        id: generate-token
        with:
          app_id: ${{ secrets.WORKFLOW_TRIGGER_APP_ID }}
          private_key: ${{ secrets.WORKFLOW_TRIGGER_APP_PRIVATE_KEY }}
      - name: Update PR label and comment
        if: ${{ needs.check_and_prepare.outputs.pr_number }}
        run: |
          python scripts/gha/it_workflow.py --stage end \
            --token ${{github.token}} \
            --issue_number ${{needs.check_and_prepare.outputs.pr_number}}\
            --actor ${{github.actor}} \
            --commit ${{needs.check_and_prepare.outputs.github_ref}} \
            --run_id ${{github.run_id}} \
            --new_token ${{steps.generate-token.outputs.token}}
      - name: Update Daily Report
        if: needs.check_and_prepare.outputs.trigger == 'scheduled_trigger'
        run: |
          python scripts/gha/it_workflow.py --stage report \
            --token ${{github.token}} \
            --actor ${{github.actor}} \
            --commit ${{needs.check_and_prepare.outputs.github_ref}} \
            --run_id ${{github.run_id}} 
      - name: Summarize results into GitHub log
        run: python scripts/gha/summarize_test_results.py --dir test_results --github_log

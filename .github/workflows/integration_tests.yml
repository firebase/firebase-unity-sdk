name: Integration tests

on:
  workflow_dispatch:
    inputs:
      unity_versions:
        description: 'Unity version'
        default: '2017.4.37f1'
        required: true
      platforms:
        description: 'Platform of Desktop, Android, iOS'
        default: 'Android,iOS,Windows,macOS,Linux'
        required: true
      operating_systems:
        description: 'CSV of VMs to run on'
        default: 'macos-latest'
        required: true

jobs:
  prepare_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix_os: ${{ steps.set-matrix-os.outputs.matrix_os }}
      matrix_unity_versions: ${{ steps.set-matrix-os.outputs.matrix_unity_versions }}
    steps:
    - id: set-matrix-os
      # e.g. 'ubuntu-latest,macos-latest' -> '["ubuntu-latest","macos-latest"]'
      run: |
        OS_JSON=[\"$(echo ${{ github.event.inputs.operating_systems }} | sed 's/,/","/g')\"]
        echo "::set-output name=matrix_os::${OS_JSON}"
        UNITY_VERSIONS_JSON=[\"$(echo ${{ github.event.inputs.unity_versions }} | sed 's/,/","/g')\"]
        echo "::set-output name=matrix_unity_versions::${UNITY_VERSIONS_JSON}"

  test:
    name: ${{ matrix.os }}-${{ matrix.unity_version }}-${{ github.event.inputs.platforms }}
    runs-on: ${{ matrix.os }}
    needs: prepare_matrix
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(needs.prepare_matrix.outputs.matrix_os) }}
        unity_version: ${{ fromJson(needs.prepare_matrix.outputs.matrix_unity_versions) }}
    env:
      # LC_ALL, LANG and U3D_PASSWORD are needed for U3D.
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
      U3D_PASSWORD: ""
    steps:
      - uses: actions/checkout@v2
      - name: Install Unity installer (U3D)
        timeout-minutes: 10
        shell: bash
        run: gem install u3d
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: Install python deps
        timeout-minutes: 10
        shell: bash
        run: |
          pip install -r scripts/gha/requirements.txt
      - name: Install Unity
        timeout-minutes: 20
        shell: bash
        run: |
          $ANDROID_HOME/tools/bin/sdkmanager --version
          # curl https://dl.google.com/android/repository/tools_r25.2.5-macosx.zip -o /Users/runner/Downloads/tools.zip
          # unzip -q /Users/runner/Downloads/tools.zip -d /Users/runner/Downloads/
          # rm -r $ANDROID_HOME/tools
          # mv /Users/runner/Downloads/tools $ANDROID_HOME
          # ls $ANDROID_HOME
          python scripts/gha/unity_installer.py --install --platforms ${{ github.event.inputs.platforms }} --version ${{ matrix.unity_version }}
          u3d list -p
      - name: Activate Unity license
        timeout-minutes: 10
        shell: bash
        run: |
          set +H
          python scripts/gha/unity_installer.py --activate_license \
            --version ${{ matrix.unity_version }}  \
            --username "${{ secrets.UNITY_USERNAME }}" \
            --password "${{ secrets.UNITY_PASSWORD }}" \
            --serial_ids "${{ secrets.SERIAL_ID }}" \
            --logfile testapps/activate_license.log
      - name: Prepare for integration tests
        timeout-minutes: 10
        shell: bash
        run: |
          python scripts/gha/restore_secrets.py --passphrase "${{ secrets.TEST_SECRET }}"
          curl https://dl.google.com/firebase/sdk/unity/firebase_unity_sdk_8.1.0.zip -o /Users/runner/Downloads/firebase_unity_sdk.zip
          unzip -q /Users/runner/Downloads/firebase_unity_sdk.zip -d /Users/runner/Downloads/
          mv /Users/runner/Downloads/firebase_unity_sdk /Users/runner/Downloads/client_unity_plugins
      - uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r13b
          add-to-path: false
      - name: Build integration tests
        env:
          UNITY_ANDROID_SDK: /Users/runner/Library/Android/sdk
          UNITY_ANDROID_NDK: ${{ steps.setup-ndk.outputs.ndk-path }}
        shell: bash
        run: |
          echo $UNITY_ANDROID_SDK
          echo $UNITY_ANDROID_NDK
          ls /Users/runner/Library/Android/sdk/ndk/
          python scripts/gha/build_testapps.py --t analytics,auth,database,dynamic_links,functions,installations,messaging,remote_config,storage \
            --u ${{ matrix.unity_version }} \
            --p ${{ github.event.inputs.platforms }} \
            --force_latest_runtime
          cat ~/Library/Preferences/com.unity3d.UnityEditor5.x.plist
      - name: Return Unity license
        # Always returns true, even when job failed or canceled. But will not run when a critical failure prevents the task from running. 
        if: always()
        # Retry at most 3 times when Return Unity license fails.
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: |
            python scripts/gha/unity_installer.py --release_license --logfile testapps/release_license.log --version ${{ matrix.unity_version }}

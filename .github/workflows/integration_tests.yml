name: Integration tests

on:
  schedule:
    - cron: "0 9 * * *"  # 9am UTC = 1am PST / 2am PDT

  workflow_dispatch:
    inputs:
      build_os:
        description: 'Build OS (windows-latest,macos-latest)'
        default: 'macos-latest'
        required: true
      unity_versions:
        description: 'Unity version'
        default: '2019'
        required: true
      platforms:
        description: 'CSV of Android,iOS,Windows,macOS,Linux'
        default: 'Android,iOS,Windows,macOS,Linux'
        required: true
      apis:
        description: 'CSV of apis to build and test'
        # TODO: firestore is excluded, because it fails to build on Unity 2017
        default: 'analytics,auth,crashlytics,database,dynamic_links,functions,installations,messaging,remote_config,storage'
        required: true
      mobile_test_on:
        description: 'Run mobile tests on real and/or virtual devices? (separated by commas)'
        default: 'real,virtual'
        required: true
      sdk_url:
        description: 'Download unity sdk from this URL'
        default: 'https://dl.google.com/firebase/sdk/unity/firebase_unity_sdk_8.5.0.zip'
        required: true 
      use_expanded_matrix:
        description: 'Use an expanded matrix? Note: above config will be ignored.'
        default: '0'
        required: true
      test_packaged_sdk:
        description: 'Optional: Packaging run # to build against? (sdk_url will be ignored.)'
      test_pull_request:
        description: 'Optional: Pull request # to build and test? (With optional commit hash, separated by a colon. Specify the FULL hash.)'

env:
  pythonVersion: '3.7'
  artifactRetentionDays: 2

jobs:
  check_and_prepare:
    runs-on: ubuntu-latest
    outputs:
      trigger: ${{ steps.set_outputs.outputs.trigger }}
      github_ref: ${{ steps.set_outputs.outputs.github_ref }}
      pr_number: ${{ steps.set_outputs.outputs.pr_number }}
      matrix_build_os: ${{ steps.matrix_config.outputs.matrix_build_os }}
      matrix_unity_versions: ${{ steps.matrix_config.outputs.matrix_unity_versions }}
      matrix_desktop_os: ${{ steps.matrix_config.outputs.matrix_desktop_os }}
      matrix_mobile_platform: ${{ steps.matrix_config.outputs.matrix_mobile_platform }}
      platform: ${{ steps.matrix_config.outputs.platform }}
      apis: ${{ steps.matrix_config.outputs.apis }}
      mobile_test_on: ${{ steps.matrix_config.outputs.mobile_test_on }}
      android_device: ${{ steps.matrix_config.outputs.android_device }}
      ios_device: ${{ steps.matrix_config.outputs.ios_device }}
    steps:
    ### Fail the workflow if the user does not have admin access to run the tests.
    - name: Check if user has permission to trigger tests
      uses: lannonbr/repo-permission-check-action@2.0.0
      with:
        permission: "admin"
      env:
        GITHUB_TOKEN: ${{ github.token }}
    ### It sets "github_ref,trigger,pr_number,requested_tests" outputs to control the following jobs and steps
    ### trigger value: manual_trigger, scheduled_trigger;
    ### TODO: label_trigger, postsubmit_trigger, presubmit_trigger
    - id: set_outputs
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then 
          echo "::set-output name=trigger::manual_trigger"
          if [[ "${{ github.event.inputs.use_expanded_matrix }}" == "1" ]]; then
            echo "::set-output name=requested_tests::expanded"
          fi
          if [[ -z "${{github.event.inputs.test_pull_request}}" ]]; then
            # test_pull_request not specified
            echo "::set-output name=github_ref::$GITHUB_SHA"
          elif [[ "${{github.event.inputs.test_pull_request}}" == *:* ]]; then
            # If specified as pr:commit_hash, split them.
            echo "::set-output name=github_ref::$(echo ${{ github.event.inputs.test_pull_request }} | cut -d: -f2)"
            echo "::set-output name=pr_number::$(echo ${{ github.event.inputs.test_pull_request }} | cut -d: -f1)"
          else
            # Just the PR specified, use refs/pull/<number>/merge as the ref.
            echo "::set-output name=github_ref::refs/pull/${{github.event.inputs.test_pull_request}}/merge"
            echo "::set-output name=pr_number::${{ github.event.inputs.test_pull_request }}"
          fi
        elif [[ "${{ github.event_name }}" == "schedule" ]]; then
          echo "::set-output name=trigger::scheduled_trigger"
          echo "::set-output name=github_ref::$GITHUB_SHA"
          echo "::set-output name=requested_tests::expanded"
        fi
    - uses: actions/checkout@v2
      with:
        ref: ${{steps.set_outputs.outputs.github_ref}}
        fetch-depth: 0
        submodules: false
    - name: Setup python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.pythonVersion }}
    - name: Install python deps
      run: pip install -r scripts/gha/requirements.txt
    - id: matrix_config
      run: |
        if [[ "${{ steps.set_outputs.outputs.requested_tests }}" == "expanded" ]]; then 
          TEST_MATRIX_PARAM=-e=1
          echo "::warning ::Running on the expanded matrix"
        fi

        # To feed input into the job matrix, we first need to convert to a JSON
        # list. Then we can use fromJson to define the field in the matrix for the tests job.
        echo "::set-output name=apis::$( python scripts/gha/print_matrix_configuration.py -c -w integration_tests -k apis -o "${{github.event.inputs.apis}}" ${TEST_MATRIX_PARAM} )"
        echo "::set-output name=platform::$( python scripts/gha/print_matrix_configuration.py -c -w integration_tests ${TEST_MATRIX_PARAM} -k platform -o "${{github.event.inputs.platforms}}" )"
        echo "::set-output name=matrix_desktop_os::$( python scripts/gha/print_matrix_configuration.py -w integration_tests ${TEST_MATRIX_PARAM} -k "${{github.event.inputs.platforms}}" -desktop_os=1)"
        echo "::set-output name=matrix_mobile_platform::$( python scripts/gha/print_matrix_configuration.py -w integration_tests ${TEST_MATRIX_PARAM} -k "${{github.event.inputs.platforms}}" -mobile_platform=1)"
        echo "::set-output name=matrix_build_os::$( python scripts/gha/print_matrix_configuration.py -w integration_tests ${TEST_MATRIX_PARAM} -k build_os -o "${{github.event.inputs.build_os}}")"
        echo "::set-output name=matrix_unity_versions::$( python scripts/gha/print_matrix_configuration.py -w integration_tests ${TEST_MATRIX_PARAM} -k unity_version -o "${{github.event.inputs.unity_versions}}")"
        mobile_test_on=$( python scripts/gha/print_matrix_configuration.py -c -w integration_tests -k mobile_test_on -o "${{github.event.inputs.mobile_test_on}}")
        echo "::set-output name=mobile_test_on::${mobile_test_on}"
        echo "::set-output name=android_device::$( python scripts/gha/print_matrix_configuration.py -w integration_tests ${TEST_MATRIX_PARAM} -k android_device -t ${mobile_test_on} )"
        echo "::set-output name=ios_device::$( python scripts/gha/print_matrix_configuration.py -w integration_tests ${TEST_MATRIX_PARAM} -k ios_device -t ${mobile_test_on} )"

  build:
    name: build-${{matrix.os}}-${{ matrix.unity_version }}-${{ needs.check_and_prepare.outputs.platform }}
    runs-on: ${{matrix.os}}
    needs: check_and_prepare
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(needs.check_and_prepare.outputs.matrix_build_os) }}
        unity_version: ${{ fromJson(needs.check_and_prepare.outputs.matrix_unity_versions) }}
    env:
      # LC_ALL, LANG and U3D_PASSWORD are needed for U3D.
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
      U3D_PASSWORD: ""
    steps:
      - uses: actions/checkout@v2
      - name: Install Unity installer (U3D)
        timeout-minutes: 10
        shell: bash
        run: |
          gem install u3d
          u3d available
          u3d available -u ${{ matrix.unity_version }} -p
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: Install python deps
        timeout-minutes: 10
        shell: bash
        run: |
          pip install -r scripts/gha/requirements.txt
      - name: Install Unity
        timeout-minutes: 30
        shell: bash
        run: |
          python scripts/gha/unity_installer.py --install \
            --platforms ${{ needs.check_and_prepare.outputs.platform }} \
            --version ${{ matrix.unity_version }}
      - name: Activate Unity license
        timeout-minutes: 10
        shell: bash
        run: |
          python scripts/gha/unity_installer.py --activate_license \
            --version ${{ matrix.unity_version }}  \
            --username "${{ secrets.UNITY_USERNAME }}" \
            --password "${{ secrets.UNITY_PASSWORD }}" \
            --serial_ids "${{ secrets.SERIAL_ID }}" \
            --logfile "testapps/activate_license.log"
      - name: Prepare for integration tests
        timeout-minutes: 10
        shell: bash
        run: |
          python scripts/gha/restore_secrets.py --passphrase "${{ secrets.TEST_SECRET }}"
      - name: Fetch prebuilt packaged SDK from previous run
        uses: dawidd6/action-download-artifact@v2
        if: ${{ github.event.inputs.test_packaged_sdk != '' }}
        with:
          name: 'firebase_unity_sdk'
          workflow: 'packaging.yml'
          run_id: ${{ github.event.inputs.test_packaged_sdk }}
          path: firebase_unity_sdk
      - name: Build integration tests
        timeout-minutes: 220
        shell: bash
        run: |
          if [[ -n "${{ github.event.inputs.test_packaged_sdk }}" ]]; then
            mv -v firebase_unity_sdk ~/Downloads/
          else
            if [[ -z "${{ github.event.inputs.sdk_url }}" ]];then
              sdk_url="https://dl.google.com/firebase/sdk/unity/firebase_unity_sdk_8.5.0.zip"
            else
              sdk_url=${{ github.event.inputs.sdk_url }}
            fi
            curl ${sdk_url} -o ~/Downloads/firebase_unity_sdk.zip
            unzip -q ~/Downloads/firebase_unity_sdk.zip -d ~/Downloads/
          fi
          python scripts/gha/build_testapps.py \
            --t ${{ needs.check_and_prepare.outputs.apis }} \
            --u $( python scripts/gha/print_matrix_configuration.py -u ${{matrix.unity_version}} -k version ) \
            --p ${{ needs.check_and_prepare.outputs.platform }} \
            --ios_sdk ${{ needs.check_and_prepare.outputs.mobile_test_on }} \
            --plugin_dir ~/Downloads/firebase_unity_sdk \
            --output_directory "${{ github.workspace }}" \
            --artifact_name "${{matrix.os}}-${{ matrix.unity_version }}-all" \
            --force_latest_runtime \
            --ci
      - name: Return Unity license
        # Always returns true, even when job failed or canceled. But will not run when a critical failure prevents the task from running. 
        if: always()
        # Retry at most 3 times when Return Unity license fails.
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          shell: bash
          command: |
            python scripts/gha/unity_installer.py --release_license \
              --version ${{ matrix.unity_version }} \
              --logfile "testapps/release_license.log"
            cat testapps/release_license.log
      - name: Upload Android integration tests artifact
        uses: actions/upload-artifact@v2.2.2
        if: contains(needs.check_and_prepare.outputs.platform, 'Android') && ${{ !cancelled() }}
        with:
          name: testapps-${{matrix.os}}-${{ matrix.unity_version }}-Android
          path: testapps-${{matrix.os}}-${{ matrix.unity_version }}-all/Android
          retention-days: ${{ env.artifactRetentionDays }}
      - name: Upload iOS integration tests artifact
        uses: actions/upload-artifact@v2.2.2
        if: contains(needs.check_and_prepare.outputs.platform, 'iOS') && ${{ !cancelled() }}
        with:
          name: testapps-${{matrix.os}}-${{ matrix.unity_version }}-iOS
          path: testapps-${{matrix.os}}-${{ matrix.unity_version }}-all/iOS
          retention-days: ${{ env.artifactRetentionDays }}
      - name: Upload Linux integration tests artifact
        uses: actions/upload-artifact@v2.2.2
        if: contains(needs.check_and_prepare.outputs.platform, 'Linux') && ${{ !cancelled() }}
        with:
          name: testapps-${{matrix.os}}-${{ matrix.unity_version }}-ubuntu-latest
          path: testapps-${{matrix.os}}-${{ matrix.unity_version }}-all/Linux
          retention-days: ${{ env.artifactRetentionDays }}
      - name: Upload macOS integration tests artifact
        uses: actions/upload-artifact@v2.2.2
        if: contains(needs.check_and_prepare.outputs.platform, 'macOS') && ${{ !cancelled() }}
        with:
          name: testapps-${{matrix.os}}-${{ matrix.unity_version }}-macos-latest
          path: testapps-${{matrix.os}}-${{ matrix.unity_version }}-all/macOS
          retention-days: ${{ env.artifactRetentionDays }}
      - name: Upload Windows integration tests artifact
        uses: actions/upload-artifact@v2.2.2
        if: contains(needs.check_and_prepare.outputs.platform, 'Windows') && ${{ !cancelled() }}
        with:
          name: testapps-${{matrix.os}}-${{ matrix.unity_version }}-windows-latest
          path: testapps-${{matrix.os}}-${{ matrix.unity_version }}-all/Windows
          retention-days: ${{ env.artifactRetentionDays }}
      - name: Summarize build results
        if: ${{ !cancelled() }}
        shell: bash
        run: |
          cat build-results-${{matrix.os}}-${{ matrix.unity_version }}-all.log
          if [[ "${{ job.status }}" != "success" ]]; then
            exit 1
          fi


  test_desktop:
    name: test-${{ matrix.build_os }}-${{ matrix.unity_version }}-${{ matrix.os }}-desktop
    runs-on: ${{ matrix.os }}
    if: (contains(needs.check_and_prepare.outputs.platform, 'Windows') || contains(needs.check_and_prepare.outputs.platform, 'macOS') || contains(needs.check_and_prepare.outputs.platform, 'Linux')) && !cancelled()
    needs: [check_and_prepare, build]
    strategy:
      fail-fast: false
      matrix:
        build_os: ${{ fromJson(needs.check_and_prepare.outputs.matrix_build_os) }}
        os: ${{ fromJson(needs.check_and_prepare.outputs.matrix_desktop_os) }}
        unity_version: ${{ fromJson(needs.check_and_prepare.outputs.matrix_unity_versions) }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{needs.check_and_prepare.outputs.github_ref}}
      - name: Download Desktop integration tests artifact
        uses: actions/download-artifact@v2.0.8
        with:
          path: testapps
          name: testapps-${{ matrix.build_os }}-${{ matrix.unity_version }}-${{ matrix.os }}
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: Install python deps
        timeout-minutes: 10
        shell: bash
        run: |
          pip install -r scripts/gha/requirements.txt
      - name: Run Desktop integration tests
        timeout-minutes: 30
        shell: bash
        run: |
          python scripts/gha/desktop_tester.py --testapp_dir testapps \
            --logfile_name "${{ matrix.build_os }}-${{ matrix.unity_version }}-${{ matrix.os }}-desktop"
      - name: Summarize test results
        if: ${{ !cancelled() }}
        shell: bash
        run: |
          cat testapps/test-results-${{ matrix.build_os }}-${{ matrix.unity_version }}-${{ matrix.os }}-desktop.log
          if [[ "${{ job.status }}" != "success" ]]; then
            exit 1
          fi

  test_mobile:
    name: test-${{ matrix.build_os }}-${{ matrix.unity_version }}-${{ matrix.platform }}-${{ matrix.mobile_test_on }}
    runs-on: macos-11
    if: (contains(needs.check_and_prepare.outputs.platform, 'Android') || contains(needs.check_and_prepare.outputs.platform, 'iOS')) && !cancelled()
    needs: [check_and_prepare, build]
    strategy:
      fail-fast: false
      matrix:
        build_os: ${{ fromJson(needs.check_and_prepare.outputs.matrix_build_os) }}
        platform: ${{ fromJson(needs.check_and_prepare.outputs.matrix_mobile_platform) }}
        unity_version: ${{ fromJson(needs.check_and_prepare.outputs.matrix_unity_versions) }}
        include:
          # TODO(sunmou): include test device that are currently working
          - platform: "Android"
            mobile_test_on: "real"
          - platform: "iOS"
            mobile_test_on: "virtual"
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{needs.check_and_prepare.outputs.github_ref}}
      - name: Download Desktop integration tests artifact
        uses: actions/download-artifact@v2.0.8
        with:
          path: testapps
          name: testapps-${{ matrix.build_os }}-${{ matrix.unity_version }}-${{ matrix.platform }}
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: Install python deps
        timeout-minutes: 10
        shell: bash
        run: |
          pip install -r scripts/gha/requirements.txt
      - name: Install Cloud SDK
        if: matrix.mobile_test_on == 'real'
        uses: google-github-actions/setup-gcloud@master
      - name: Run Mobile integration tests on Real Device via FTL
        if: matrix.mobile_test_on == 'real'
        timeout-minutes: 60
        shell: bash
        run: |
          python scripts/gha/restore_secrets.py --passphrase "${{ secrets.TEST_SECRET }}"
          python scripts/gha/test_lab.py --testapp_dir testapps \
            --logfile_name "${{ matrix.build_os }}-${{ matrix.unity_version }}-${{ matrix.platform }}" \
            --code_platform unity \
            --key_file scripts/gha-encrypted/gcs_key_file.json
      - name: Run Mobile integration tests on virtual device locally
        timeout-minutes: 60
        if: matrix.mobile_test_on == 'virtual'
        run: |
          python scripts/gha/test_simulator.py --testapp_dir testapps \
            --logfile_name "${{ matrix.build_os }}-${{ matrix.unity_version }}-${{ matrix.platform }}" \
            --ci
      - name: Summarize test results
        if: ${{ !cancelled() }}
        shell: bash
        run: |
          cat testapps/test-results-${{ matrix.build_os }}-${{ matrix.unity_version }}-${{ matrix.platform }}.log
          if [[ "${{ job.status }}" != "success" ]]; then
            exit 1
          fi

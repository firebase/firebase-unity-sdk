# Workflow to handle triggering the build process
name: Firebase Unity SDK build

on:
  workflow_dispatch:
    inputs:
      unity_version:
        description: 'Unity version'
        default: '2019'
        required: true
      firebase_cpp_sdk_version:
        description: 'Firebase CPP SDK version to build against (The branch, tag or SHA to checkout)'
        default: ''
        required: false
      unity_branch:
        description: 'Unity branch to build against, empty means current branch'
        default: ''
        required: false
      platforms:
        description: 'CSV of Android,iOS,Windows,macOS,Linux'
        default: 'Android,iOS,Windows,macOS,Linux'
        required: true
      apis:
        description: 'CSV of apis to build and test'
        default: 'analytics,auth,crashlytics,database,dynamic_links,firestore,functions,installations,messaging,remote_config,storage'
        required: true
      # Additional CMake flags to use
      additional_cmake_flags:
        description: 'Additional flags to pass into CMake'
        default: ''
        required: false
      release_label:
        description: 'If the package is intended to run for a release, put <version>-RC## for label'
        default: 'NoneRelease'
        type: string
        required: true
      should_trigger_package:
        description: 'If we want to trigger package process'
        default: true
        type: boolean
        required: true
      skipIntegrationTests:
        description: 'If we want to skip integration test'
        default: '0'
        required: true

env:
  pythonVersion: '3.7'

jobs:
  check_and_prepare:
    runs-on: ubuntu-latest
    outputs:
      platform: ${{ steps.set_outputs.outputs.platform }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.unity_branch }}
          fetch-depth: 0
          submodules: false
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.pythonVersion }}
      - name: Install python deps
        run: pip install -r scripts/gha/requirements.txt
      - id: set_outputs
        run: |
          platform=$( python scripts/gha/print_matrix_configuration.py -c -w build_unity_sdks -k platform -o "${{github.event.inputs.platforms}}" )
          echo "::set-output name=platform::${platform}"

  build_android:
    name: build-android-unity${{ github.event.inputs.unity_version }}-CPP${{ github.event.inputs.firebase_cpp_sdk_version }}
    uses: ./.github/workflows/build_android.yml
    needs: check_and_prepare
    if: contains(needs.check_and_prepare.outputs.platform, 'Android')
    with:
      unity_version: ${{ github.event.inputs.unity_version }}
      firebase_cpp_sdk_version: ${{ github.event.inputs.firebase_cpp_sdk_version }}
      unity_branch: ${{ github.event.inputs.unity_branch }}
      apis: ${{ github.event.inputs.apis }}
      unity_platform_name: Android
      additional_cmake_flags: ${{ github.event.inputs.additional_cmake_flags }}
  
  build_ios:
    name: build-ios-unity${{ github.event.inputs.unity_version }}-CPP${{ github.event.inputs.firebase_cpp_sdk_version }}
    uses: ./.github/workflows/build_ios.yml
    needs: check_and_prepare
    if: contains(needs.check_and_prepare.outputs.platform, 'iOS')
    with:
      unity_version: ${{ github.event.inputs.unity_version }}
      firebase_cpp_sdk_version: ${{ github.event.inputs.firebase_cpp_sdk_version }}
      unity_branch: ${{ github.event.inputs.unity_branch }}
      apis: ${{ github.event.inputs.apis }}
      unity_platform_name: iOS
      additional_cmake_flags: ${{ github.event.inputs.additional_cmake_flags }}

  build_linux:
    name: build-linux-unity${{ github.event.inputs.unity_version }}-CPP${{ github.event.inputs.firebase_cpp_sdk_version }}
    uses: ./.github/workflows/build_linux.yml
    needs: check_and_prepare
    if: contains(needs.check_and_prepare.outputs.platform, 'Linux')
    with:
      unity_version: ${{ github.event.inputs.unity_version }}
      firebase_cpp_sdk_version: ${{ github.event.inputs.firebase_cpp_sdk_version }}
      unity_branch: ${{ github.event.inputs.unity_branch }}
      apis: ${{ github.event.inputs.apis }}
      unity_platform_name: Linux
      additional_cmake_flags: ${{ github.event.inputs.additional_cmake_flags }}

  build_macos:
    name: build-macos-unity${{ github.event.inputs.unity_version }}-CPP${{ github.event.inputs.firebase_cpp_sdk_version }}
    uses: ./.github/workflows/build_macos.yml
    needs: check_and_prepare
    if: contains(needs.check_and_prepare.outputs.platform, 'macOS')
    with:
      unity_version: ${{ github.event.inputs.unity_version }}
      firebase_cpp_sdk_version: ${{ github.event.inputs.firebase_cpp_sdk_version }}
      unity_branch: ${{ github.event.inputs.unity_branch }}
      apis: ${{ github.event.inputs.apis }}
      unity_platform_name: macOS,iOS
      additional_cmake_flags: ${{ github.event.inputs.additional_cmake_flags }}

  build_windows:
    name: build-windows-unity${{ github.event.inputs.unity_version }}-CPP${{ github.event.inputs.firebase_cpp_sdk_version }}
    uses: ./.github/workflows/build_windows.yml
    needs: check_and_prepare
    if: contains(needs.check_and_prepare.outputs.platform, 'Windows')
    with:
      unity_version: ${{ github.event.inputs.unity_version }}
      firebase_cpp_sdk_version: ${{ github.event.inputs.firebase_cpp_sdk_version }}
      unity_branch: ${{ github.event.inputs.unity_branch }}
      apis: ${{ github.event.inputs.apis }}
      unity_platform_name: Windows
      additional_cmake_flags: ${{ github.event.inputs.additional_cmake_flags }}

  trigger_package:
    name: package ${{ github.event.inputs.release_label }}
    needs: [build_android, build_ios, build_linux, build_macos, build_windows]
    if: (github.event.inputs.should_trigger_package == 'true') && !cancelled() && !failure()
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2.3.1

    - name: Setup python
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    
    - name: Install python deps
      shell: bash
      run: |
        pip install -r scripts/gha/requirements.txt
    - name: Generate token for GitHub API
      # This step is necessary because the existing GITHUB_TOKEN cannot be used inside one workflow to trigger another.
      # 
      # Instead, generate a new token here, using our GitHub App's private key and App ID (saved as Secrets).
      # 
      # This method is preferred over the "personal access token" solution, as the GitHub App's scope is limited to just
      # the firebase-cpp-sdk repository.
      uses: tibdex/github-app-token@v1
      id: generate-token
      with:
        app_id: ${{ secrets.WORKFLOW_TRIGGER_APP_ID }}
        private_key: ${{ secrets.WORKFLOW_TRIGGER_APP_PRIVATE_KEY }}
    - name: Use GitHub API to start workflow
      shell: bash
      run: |
        set -e
        python scripts/gha/trigger_workflow.py -t ${{ steps.generate-token.outputs.token }} -w package.yml \
          -p use_new_build '1' \
          -p release_label ${{ github.event.inputs.release_label }} \
          -p skipIntegrationTests ${{ github.event.inputs.skipIntegrationTests }} \
          -p download_android_run ${{ github.run_id }} \
          -p download_ios_run ${{ github.run_id }} \
          -p download_linux_run ${{ github.run_id }} \
          -p download_macos_run ${{ github.run_id }} \
          -p download_windows_run ${{ github.run_id }} \
          -s 10 -A -v

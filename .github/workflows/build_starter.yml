# Workflow to handle triggering the build process
name: Firebase Unity SDK build

on:
  schedule:
    - cron: "0 7 * * *"  # 7am UTC = 11pm PST / 12am PDT
  
  workflow_dispatch:
    inputs:
      unity_version:
        description: 'Unity version'
        default: '2019'
        required: true
      firebase_cpp_sdk_version:
        description: 'Firebase CPP SDK version to build against (The branch, tag or SHA to checkout). Required if for release'
        default: ''
        required: false
      unity_branch:
        description: 'Unity branch to build against, empty means current branch'
        default: ''
        required: false
      platforms:
        description: 'CSV of Android,iOS,Windows,macOS,Linux'
        default: 'Android,iOS,Windows,macOS,Linux'
        required: true
      apis:
        description: 'CSV of apis to build and test'
        default: 'analytics,auth,crashlytics,database,dynamic_links,firestore,functions,installations,messaging,remote_config,storage'
        required: true
      # Additional CMake flags to use
      additional_cmake_flags:
        description: 'Additional flags to pass into CMake'
        default: ''
        required: false
      release_version:
        description: 'If the package is intended to run for a release, put <version> number like 9.1.0'
        default: 'NoVersion'
        type: string
        required: true
      rc_index:
        description: 'If the package is intended to run for a release, put RC## for label'
        default: 'NA'
        type: string
        required: true
      should_trigger_package:
        description: 'If we want to trigger package process'
        default: true
        type: boolean
        required: true
      skipIntegrationTests:
        description: 'If we want to skip integration test'
        default: '0'
        required: true

env:
  pythonVersion: '3.7'

jobs:
  check_and_prepare:
    runs-on: ubuntu-latest
    outputs:
      platform: ${{ steps.set_outputs.outputs.platform }}
      release_label: ${{ steps.set_outputs.outputs.release_label }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.unity_branch }}
          fetch-depth: 0
          submodules: false
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.pythonVersion }}
      - name: Install python deps
        run: pip install -r scripts/gha/requirements.txt
      - id: set_outputs
        run: |
          platform=$( python scripts/gha/print_matrix_configuration.py -c -w build_unity_sdks -k platform -o "${{ github.event.inputs.platforms }}" )
          echo "::set-output name=platform::${platform}"
          echo "::set-output name=release_label::${{ github.event.inputs.release_version }}-${{ github.event.inputs.rc_index }}"
  
  update_versions:
    uses: ./.github/workflows/update_versions.yml
    needs: check_and_prepare
    if: (github.event.inputs.release_version!='NoVersion')
    with:
      triggered_by_callable: true
      base_branch: ${{ github.event.inputs.unity_branch }}
      package_version_number: ${{ github.event.inputs.release_version }}
      cpp_release_version: ${{ github.event.inputs.firebase_cpp_sdk_version }}
    secrets: inherit

  decide_build_branch:
    needs: update_versions
    runs-on: ubuntu-latest
    outputs: 
      build_branch: ${{ steps.decide_branch.outputs.branch }}
    steps:
      - id: decide_branch
        run: |
          if [[ "${{ github.event.inputs.release_version }}" == "'NoVersion'" ]]; then
            # Triggered by callable
            echo "::set-output name=branch::${{ github.event.inputs.unity_branch }}"
          else
            echo "::set-output name=branch::${{ needs.update_versions.outputs.new_branch }}"
          fi

  build_android:
    name: build-android-unity${{ github.event.inputs.unity_version }}-CPP${{ github.event.inputs.firebase_cpp_sdk_version }}
    uses: ./.github/workflows/build_android.yml
    needs: [check_and_prepare, decide_build_branch]
    if: contains(needs.check_and_prepare.outputs.platform, 'Android')
    with:
      unity_version: ${{ github.event.inputs.unity_version }}
      firebase_cpp_sdk_version: ${{ github.event.inputs.firebase_cpp_sdk_version }}
      unity_branch: ${{ needs.decide_build_branch.outputs.build_branch }}
      apis: ${{ github.event.inputs.apis }}
      unity_platform_name: Android
      additional_cmake_flags: ${{ github.event.inputs.additional_cmake_flags }}
  
  build_ios:
    name: build-ios-unity${{ github.event.inputs.unity_version }}-CPP${{ github.event.inputs.firebase_cpp_sdk_version }}
    uses: ./.github/workflows/build_ios.yml
    needs: [check_and_prepare, decide_build_branch]
    if: contains(needs.check_and_prepare.outputs.platform, 'iOS')
    with:
      unity_version: ${{ github.event.inputs.unity_version }}
      firebase_cpp_sdk_version: ${{ github.event.inputs.firebase_cpp_sdk_version }}
      unity_branch: ${{ needs.decide_build_branch.outputs.build_branch }}
      apis: ${{ github.event.inputs.apis }}
      unity_platform_name: iOS
      additional_cmake_flags: ${{ github.event.inputs.additional_cmake_flags }}

  build_linux:
    name: build-linux-unity${{ github.event.inputs.unity_version }}-CPP${{ github.event.inputs.firebase_cpp_sdk_version }}
    uses: ./.github/workflows/build_linux.yml
    needs: [check_and_prepare, decide_build_branch]
    if: contains(needs.check_and_prepare.outputs.platform, 'Linux')
    with:
      unity_version: ${{ github.event.inputs.unity_version }}
      firebase_cpp_sdk_version: ${{ github.event.inputs.firebase_cpp_sdk_version }}
      unity_branch: ${{ needs.decide_build_branch.outputs.build_branch }}
      apis: ${{ github.event.inputs.apis }}
      unity_platform_name: Linux
      additional_cmake_flags: ${{ github.event.inputs.additional_cmake_flags }}

  build_macos:
    name: build-macos-unity${{ github.event.inputs.unity_version }}-CPP${{ github.event.inputs.firebase_cpp_sdk_version }}
    uses: ./.github/workflows/build_macos.yml
    needs: [check_and_prepare, decide_build_branch]
    if: contains(needs.check_and_prepare.outputs.platform, 'macOS')
    with:
      unity_version: ${{ github.event.inputs.unity_version }}
      firebase_cpp_sdk_version: ${{ github.event.inputs.firebase_cpp_sdk_version }}
      unity_branch: ${{ github.event.inputs.unity_branch }}
      apis: ${{ github.event.inputs.apis }}
      unity_platform_name: macOS,iOS
      additional_cmake_flags: ${{ github.event.inputs.additional_cmake_flags }}

  build_windows:
    name: build-windows-unity${{ github.event.inputs.unity_version }}-CPP${{ github.event.inputs.firebase_cpp_sdk_version }}
    uses: ./.github/workflows/build_windows.yml
    needs: [check_and_prepare, decide_build_branch]
    if: contains(needs.check_and_prepare.outputs.platform, 'Windows')
    with:
      unity_version: ${{ github.event.inputs.unity_version }}
      firebase_cpp_sdk_version: ${{ github.event.inputs.firebase_cpp_sdk_version }}
      unity_branch: ${{ needs.decide_build_branch.outputs.build_branch }}
      apis: ${{ github.event.inputs.apis }}
      unity_platform_name: Windows
      additional_cmake_flags: ${{ github.event.inputs.additional_cmake_flags }}

  trigger_reusable_package:
    name: package ${{ needs.check_and_prepare.outputs.release_label }}
    needs: [build_android, build_ios, build_linux, build_macos, build_windows, decide_build_branch]
    uses: ./.github/workflows/package.yml
    if: (github.event.inputs.should_trigger_package == 'true') && !cancelled() && !failure()
    with:
      triggered_by_callable: true
      release_label: ${{ needs.check_and_prepare.outputs.release_label }}
      skipIntegrationTests: ${{ github.event.inputs.skipIntegrationTests }}
      build_run_id: ${{ github.run_id }}
      working_branch: ${{ needs.decide_build_branch.outputs.build_branch }}
    secrets: inherit

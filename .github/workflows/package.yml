# Workflow to handle packaging the Unity SDK
name: Package SDKs

on:
  workflow_dispatch:
    inputs:
      operating_systems:
        description: 'CSV of VMs to run on'
        default: 'ubuntu-latest'
        required: true
      skipIntegrationTests:
        description: 'skip integration tests?'
        default: 0

jobs:
  package_sdks:
    name: package-${{matrix.os}}
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        include:
        - os: ubuntu-latest
          package_dir: output
    steps:
      - name: fetch SDK
        uses: actions/checkout@v2.3.1

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Install python deps
        shell: bash
        run: |
          pip install -r scripts/gha/requirements.txt

      # Fetch all the zip files from previous run
      - name: Fetch Desktop Artifacts
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: 'sdk_build.yml'
          run_id: ${{ github.event.inputs.downloadPreviousRun }}
          path: built_artifect

      - name: Fetch iOS Artifacts
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: 'ios.yml'
          run_id: ${{ github.event.inputs.downloadPreviousRun }}
          path: built_artifect
      
      - name: Fetch Android Artifacts
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: 'android.yml'
          run_id: ${{ github.event.inputs.downloadPreviousRun }}
          path: built_artifect

      - name: move zip files
        run: |
          cd built_artifect
          find . -type f -name "*.zip" -exec mv {} . \;
          ls -l
          cd ..

      - name: Package unitypackage
        run: |
          python build_package.py --zip_dir=built_artifect

      - name: Listing output
        run: |
          ls -Rl
        working-directory: output

      - name: Upload Build unitypackage
        uses: actions/upload-artifact@v2
        with:
          name: firebase_unity_sdk
          path: output
      
      - name: Package tgz
        run: |
          python build_package.py --zip_dir=built_artifect --output_upm=True --output=output_tgz

      - name: Listing output tgz
        run: |
          ls -Rl
        working-directory: output_tgz

      - name: Upload Build tgz
        uses: actions/upload-artifact@v2
        with:
          name: firebase_unity_sdk_tgz
          path: output_tgz

  trigger_integration_tests:
    # Trigger the integration_tests workflow.
    needs: [package_sdks]
    if: (github.event.inputs.skipIntegrationTests == 0 || github.event.inputs.skipIntegrationTests == '') && !cancelled()
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2.3.1

    - name: Setup python
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: Generate token for GitHub API
      # This step is necessary because the existing GITHUB_TOKEN cannot be used inside one workflow to trigger another.
      # 
      # Instead, generate a new token here, using our GitHub App's private key and App ID (saved as Secrets).
      # 
      # This method is preferred over the "personal access token" solution, as the GitHub App's scope is limited to just
      # the firebase-cpp-sdk repository.
      uses: tibdex/github-app-token@v1
      id: generate-token
      with:
        app_id: ${{ secrets.WORKFLOW_TRIGGER_APP_ID }}
        private_key: ${{ secrets.WORKFLOW_TRIGGER_APP_PRIVATE_KEY }}
    - name: Use GitHub API to start workflow
      shell: bash
      run: |
        pip install -r scripts/gha/requirements.txt
        if [[ "${{ github.event_name }}" == "schedule" ]]; then
          # reuse flag --test_pull_request=nightly-packaging to generate report
          generate_report=(-p test_pull_request nightly-packaging)
        fi
        set -e
        python scripts/gha/trigger_workflow.py -t ${{ steps.generate-token.outputs.token }} -w integration_tests.yml -p test_packaged_sdk ${{ github.run_id }} -s 10 -A -v
       
    
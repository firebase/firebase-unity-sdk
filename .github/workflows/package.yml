# Workflow to handle packaging the Unity SDK
name: Package SDKs

on:
  workflow_dispatch:
    inputs:
      operating_systems:
        description: 'CSV of VMs to run on'
        default: 'ubuntu-latest'
        required: true
      skipIntegrationTests:
        description: 'skip integration tests?'
        default: 0
      working_branch:
        description: 'If already a working in progress release branch'
        default: None

env:
  # Use SHA256 for hashing files.
  hashCommand: "sha256sum"

jobs:
  package_sdks:
    name: package-${{matrix.os}}
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        include:
        - os: ubuntu-latest
          package_dir: output
    steps:
      - name: Check out base branch
        uses: actions/checkout@v2.3.1
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.working_branch }}
      
      - name: Get token for firebase-workflow-trigger
        uses: tibdex/github-app-token@v1
        id: generate-token
        with:
          app_id: ${{ secrets.WORKFLOW_TRIGGER_APP_ID }}
          private_key: ${{ secrets.WORKFLOW_TRIGGER_APP_PRIVATE_KEY }}

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Install python deps
        shell: bash
        run: |
          pip install -r scripts/gha/requirements.txt

      - name: Name new branch
        if: github.event.inputs.working_branch == 'None'
        run: |
          date_str=$(date "+%Y%m%d-%H%M%S")
          echo "NEW_BRANCH=${{env.branchPrefix}}${{github.event.inputs.package_version_number}}-${date_str}" >> $GITHUB_ENV

      - name: Create new branch
        if: github.event.inputs.working_branch == 'None'
        run: |
          git remote update
          git checkout -b "${NEW_BRANCH}"
          echo "UPDATE_LOGFILE=update_log.txt" >> $GITHUB_ENV

      - name: Checkout working branch
        if: github.event.inputs.working_branch != 'None'
        run: |
          git remote update
          git checkout ${{ github.event.inputs.working_branch }}
          echo "UPDATE_LOGFILE=update_log.txt" >> $GITHUB_ENV
          echo "NEW_BRANCH=${{ github.event.inputs.working_branch }}" >> $GITHUB_ENV

      # Fetch all the zip files from previous run
      - name: Fetch Desktop Artifacts
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: 'sdk_build.yml'
          run_id: ${{ github.event.inputs.downloadPreviousRun }}
          path: built_artifect

      - name: Fetch iOS Artifacts
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: 'ios.yml'
          run_id: ${{ github.event.inputs.downloadPreviousRun }}
          path: built_artifect
      
      - name: Fetch Android Artifacts
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: 'android.yml'
          run_id: ${{ github.event.inputs.downloadPreviousRun }}
          path: built_artifect
      
      - name: move zip files
        run: |
          cd built_artifect
          find . -type f -name "*.zip" -exec mv {} . \;
          find . -empty -type d -delete
          ls -lR
          for zip_file in *.zip
          do
            unzip -l $zip_file
          done
          ls -lR
          cd ..

      - name: Package unitypackage
        run: |
          python build_package.py --zip_dir=built_artifect

      - name: Commit Changes if there is any
        run: |
          if ! git update-index --refresh; then
            git config user.email "firebase-workflow-trigger-bot@google.com"
            git config user.name "firebase-workflow-trigger-bot"
            git config core.commentChar "%"  # so we can use # in git commit messages
            git commit -a -m "Update Guids ID"

            # Show changes in git log
            git diff
            # Push branch
            git push --set-upstream origin "${NEW_BRANCH}"
          fi

      - name: Create PR if there is None
        if: github.event.inputs.working_branch == 'None'
        id: push-branch
        run: |
          if ! git update-index --refresh; then
            date_str=$(date "+%a %b %d %Y")
            commit_title="Update Unity SDK dependencies - ${date_str}"
            commit_body=
            if [[ -n '${{ github.event.inputs.comment }}' ]]; then
              # If a comment was provided, start with that instead of blank.
              commit_body='${{ github.event.inputs.comment }}

            '
            fi

            commit_body="${commit_body}

          > Created by [${{github.workflow}} workflow]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)."
            git config user.email "firebase-workflow-trigger-bot@google.com"
            git config user.name "firebase-workflow-trigger-bot"
            git config core.commentChar "%"  # so we can use # in git commit messages
            git commit -a -m "${commit_title}

          ${commit_body}"
            echo "::set-output name=branch_pushed::1"
            # Show changes in git log
            git diff
            # Push branch
            git push --set-upstream origin "${NEW_BRANCH}"
            # Create pull request
            pr_number=$(python scripts/gha/create_pull_request.py --token ${{ steps.generate-token.outputs.token }} --head "${NEW_BRANCH}" --base "${{ github.event.inputs.baseBranch }}" --title "${commit_title}" --body "${commit_body}")
            echo "::set-output name=created_pr_number::${pr_number}"
          else
            echo "::warning ::No changes detected, won't create pull request."
            echo "::set-output name=branch_pushed::0"
          fi

      - name: Create Zip File
        run: |
          mv output firebase_unity_sdk
          cp docs/readme.md firebase_unity_sdk/.
          cp LICENSE firebase_unity_sdk/.
          ls -Rl firebase_unity_sdk
          zip -r firebase_unity_sdk.zip firebase_unity_sdk

      - name: compute SDK hash
        shell: bash
        run: |
          ${{ env.hashCommand }} --tag firebase_unity_sdk.zip > firebase_unity_sdk_hash.txt
          echo "::warning ::$(cat firebase_unity_sdk_hash.txt)"

      - name: upload hash
        uses: actions/upload-artifact@v2.2.2
        with:
          name: firebase_unity_sdk_hash.txt
          path: firebase_unity_sdk_hash.txt

      - name: Upload Build unitypackage
        uses: actions/upload-artifact@v2
        with:
          name: firebase_unity_sdk.zip
          path: firebase_unity_sdk.zip
      
      - name: Package tgz
        run: |
          python build_package.py --zip_dir=built_artifect --output_upm=True --output=output_tgz

      - name: Listing output tgz
        run: |
          ls -Rl
        working-directory: output_tgz

      - name: Upload Build tgz
        uses: actions/upload-artifact@v2
        with:
          name: firebase_unity_sdk_tgz
          path: output_tgz

  trigger_integration_tests:
    # Trigger the integration_tests workflow.
    needs: [package_sdks]
    if: (github.event.inputs.skipIntegrationTests == 0 || github.event.inputs.skipIntegrationTests == '') && !cancelled()
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2.3.1

    - name: Setup python
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: Generate token for GitHub API
      # This step is necessary because the existing GITHUB_TOKEN cannot be used inside one workflow to trigger another.
      # 
      # Instead, generate a new token here, using our GitHub App's private key and App ID (saved as Secrets).
      # 
      # This method is preferred over the "personal access token" solution, as the GitHub App's scope is limited to just
      # the firebase-cpp-sdk repository.
      uses: tibdex/github-app-token@v1
      id: generate-token
      with:
        app_id: ${{ secrets.WORKFLOW_TRIGGER_APP_ID }}
        private_key: ${{ secrets.WORKFLOW_TRIGGER_APP_PRIVATE_KEY }}
    - name: Use GitHub API to start workflow
      shell: bash
      run: |
        pip install -r scripts/gha/requirements.txt
        if [[ "${{ github.event_name }}" == "schedule" ]]; then
          # reuse flag --test_pull_request=nightly-packaging to generate report
          generate_report=(-p test_pull_request nightly-packaging)
        fi
        set -e
        python scripts/gha/trigger_workflow.py -t ${{ steps.generate-token.outputs.token }} -w integration_tests.yml -p test_packaged_sdk ${{ github.run_id }} -s 10 -A -v
       
    
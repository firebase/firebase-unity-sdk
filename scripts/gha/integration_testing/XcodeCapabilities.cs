// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/* Post build processor for configuring the XCode project generated by Unity.
 *
 * Requires Unity 2019 or higher.
 *
 * Given that Unity generates the XCode project, we cannot configure a project
 * in advance with the necessary frameworks and capabilities. Instead, we do so
 * programmatically via a post build processor. This will automatically run
 * once Unity is finished building for iOS.
 *
 * There are two main operations performed by this script:
 * (1) Generate an entitlements file with the necessary ones for products.
 * (2) Turn off bitcode.
 *
 * For (1), the entitlement is generated using ProjectCapabilityManager,
 * into a file called `dev.entitlements`.  Based on the name of the project,
 * it adds the capabilities that are expected.
 *
 * For (2), we modify the project to turn off bitcode, since XCode has
 * deprecated it, but some versions of Unity turn it on by default, causing
 * issues.
 */

#if (UNITY_IOS || UNITY_TVOS)
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using UnityEngine;
using UnityEditor;
using UnityEditor.Callbacks;
using UnityEditor.iOS.Xcode;

public sealed class XcodeCapabilities
{
  [PostProcessBuild]
  public static void OnPostprocessBuild (BuildTarget buildTarget, string path)
  {
    if (buildTarget != BuildTarget.iOS && buildTarget != BuildTarget.tvOS) {
      return;
    }

    string projectPath = PBXProject.GetPBXProjectPath(path);
    var tempProject = new PBXProject();
    tempProject.ReadFromString(File.ReadAllText(projectPath));
    string targetId = GetMainTargetGUID(tempProject);

    if (path.Contains("FirebaseMessaging")) {
      var capabilityManager = new ProjectCapabilityManager(projectPath, "dev.entitlements", null, targetId);
      capabilityManager.AddPushNotifications(true);
      capabilityManager.AddBackgroundModes(BackgroundModesOptions.RemoteNotifications);
      capabilityManager.WriteToFile();
    } else if (path.Contains("FirebaseAuth")) {
      var capabilityManager = new ProjectCapabilityManager(projectPath, "dev.entitlements", null, targetId);
      capabilityManager.AddPushNotifications(true);
      capabilityManager.WriteToFile();
    }
    // Bitcode is being deprecated by xcode, but Unity defaults to it on, so turn it off.
    tempProject.SetBuildProperty(targetId, "ENABLE_BITCODE", "NO");
    string unityFrameworkTargetId = GetUnityFrameworkTargetGuid(tempProject);
    tempProject.SetBuildProperty(unityFrameworkTargetId, "ENABLE_BITCODE", "NO");
    File.WriteAllText(projectPath, tempProject.WriteToString());
  }

  static string GetMainTargetGUID(object pbxProjectObj) {
    var pbxProject = (PBXProject)pbxProjectObj;
    // In 2019.3 Unity changed this API without an automated update path via the api-updater.
    // There doesn't seem to be a clean version-independent way to handle this logic.
    #if UNITY_2019_3_OR_NEWER
      return pbxProject.GetUnityMainTargetGuid();
    #else
      return pbxProject.TargetGuidByName(PBXProject.GetUnityTargetName());
    #endif
  }

  static string GetUnityFrameworkTargetGuid(object pbxProjectObj) {
    var pbxProject = (PBXProject)pbxProjectObj;
    // In 2019.3 Unity changed this API without an automated update path via the api-updater.
    // There doesn't seem to be a clean version-independent way to handle this logic.
    #if UNITY_2019_3_OR_NEWER
      return pbxProject.GetUnityFrameworkTargetGuid();
    #else
      return pbxProject.TargetGuidByName("UnityFramework");
    #endif
  }
}
#endif

/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using Firebase.VertexAI.Internal;

namespace Firebase.VertexAI {

/// <summary>
/// Represents the reason why the model stopped generating content.
/// </summary>
public enum FinishReason {
  /// <summary>
  /// A new and not yet supported value.
  /// </summary>
  Unknown = 0,
  /// <summary>
  /// Natural stop point of the model or provided stop sequence.
  /// </summary>
  Stop,
  /// <summary>
  /// The maximum number of tokens as specified in the request was reached.
  /// </summary>
  MaxTokens,
  /// <summary>
  /// The token generation was stopped because the response was flagged for safety reasons.
  /// </summary>
  Safety,
  /// <summary>
  /// The token generation was stopped because the response was flagged for unauthorized citations.
  /// </summary>
  Recitation,
  /// <summary>
  /// All other reasons that stopped token generation.
  /// </summary>
  Other,
  /// <summary>
  /// Token generation was stopped because the response contained forbidden terms.
  /// </summary>
  Blocklist,
  /// <summary>
  /// Token generation was stopped because the response contained potentially prohibited content.
  /// </summary>
  ProhibitedContent,
  /// <summary>
  /// Token generation was stopped because of Sensitive Personally Identifiable Information (SPII).
  /// </summary>
  SPII,
  /// <summary>
  /// Token generation was stopped because the function call generated by the model was invalid.
  /// </summary>
  MalformedFunctionCall,
}

/// <summary>
/// A struct representing a possible reply to a content generation prompt.
/// Each content generation prompt may produce multiple candidate responses.
/// </summary>
public readonly struct Candidate {
  private readonly ReadOnlyCollection<SafetyRating> _safetyRatings;

  /// <summary>
  /// The response’s content.
  /// </summary>
  public ModelContent Content { get; }

  /// <summary>
  /// The safety rating of the response content.
  /// </summary>
  public IEnumerable<SafetyRating> SafetyRatings =>
      _safetyRatings ?? new ReadOnlyCollection<SafetyRating>(new List<SafetyRating>());

  /// <summary>
  /// The reason the model stopped generating content, if it exists;
  /// for example, if the model generated a predefined stop sequence.
  /// </summary>
  public FinishReason? FinishReason { get; }

  /// <summary>
  /// Cited works in the model’s response content, if it exists.
  /// </summary>
  public CitationMetadata? CitationMetadata { get; }

  // Hidden constructor, users don't need to make this.
  private Candidate(ModelContent content, List<SafetyRating> safetyRatings,
      FinishReason? finishReason, CitationMetadata? citationMetadata) {
    Content = content;
    _safetyRatings = new ReadOnlyCollection<SafetyRating>(safetyRatings ?? new List<SafetyRating>());
    FinishReason = finishReason;
    CitationMetadata = citationMetadata;
  }

  private static FinishReason ParseFinishReason(string str) {
    return str switch {
      "STOP" => Firebase.VertexAI.FinishReason.Stop,
      "MAX_TOKENS" => Firebase.VertexAI.FinishReason.MaxTokens,
      "SAFETY" => Firebase.VertexAI.FinishReason.Safety,
      "RECITATION" => Firebase.VertexAI.FinishReason.Recitation,
      "OTHER" => Firebase.VertexAI.FinishReason.Other,
      "BLOCKLIST" => Firebase.VertexAI.FinishReason.Blocklist,
      "PROHIBITED_CONTENT" => Firebase.VertexAI.FinishReason.ProhibitedContent,
      "SPII" => Firebase.VertexAI.FinishReason.SPII,
      "MALFORMED_FUNCTION_CALL" => Firebase.VertexAI.FinishReason.MalformedFunctionCall,
      _ => Firebase.VertexAI.FinishReason.Unknown,
    };
  }

  internal static Candidate FromJson(Dictionary<string, object> jsonDict) {
    return new Candidate(
      jsonDict.ParseObject("content", ModelContent.FromJson, defaultValue: new ModelContent("model")),
      jsonDict.ParseObjectList("safetyRatings", SafetyRating.FromJson),
      jsonDict.ParseNullableEnum("finishReason", ParseFinishReason),
      jsonDict.ParseNullableObject("citationMetadata",
          Firebase.VertexAI.CitationMetadata.FromJson));
  }
}

}

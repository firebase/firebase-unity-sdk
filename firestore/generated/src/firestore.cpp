/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
#if __cplusplus >= 201103L
  SwigValueWrapper& operator=(T t) { SwigMovePointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
#else
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
#endif
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_FirestoreCpp(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_FirestoreCpp(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_FirestoreCpp(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




using CSharpExceptionCallback = void (SWIGSTDCALL*)(const char*);

CSharpExceptionCallback firestore_exception_callback = nullptr;

extern "C" {

SWIGEXPORT void SWIGSTDCALL FirestoreExceptionRegisterCallback(CSharpExceptionCallback callback) {
  firestore_exception_callback = callback;
}

}

static void SWIG_CSharpSetPendingExceptionFirestore(const char* msg) {
  firestore_exception_callback(msg);
}


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <stdexcept>


#include <utility>


#include "firestore/src/include/firebase/firestore.h"


#include <stdexcept>

#include "firestore/src/common/firestore_exceptions_common.h"


#include "app/src/callback.h"
#include "app/src/include/firebase/future.h"


  // This adds the STDCALL thunk, necessary for C/C# interoperability.
  // The function pointer type declared in the C++ library should have the
  // exact same signature, however it lacks this explicit calling convention
  // declaration. We declare it here with explicit calling convention and use
  // a thin wrapper (just below) so that we can be certain we match the same
  // calling convention in C# when we trigger the callback.
  typedef void (SWIGSTDCALL* Future_QuerySnapshot_CB_Type)(int index);

  // Associates callback data with each Future<firebase::firestore::QuerySnapshot> instance.
  struct Future_QuerySnapshotCallbackData {
    // C# delegate method that should be called on the main thread.
    Future_QuerySnapshot_CB_Type cs_callback;
    // Key of the callback in the C# QuerySnapshotProxy.Callbacks dictionary.
    int cs_key;
  };

  // Use a static function to make callback so don't need to worry about
  // whether using stdcall or cdecl for the cs_callback function.
  static void CallbackImpl(Future_QuerySnapshotCallbackData data) {
    data.cs_callback(data.cs_key);
  }

  // This is a C++ wrapper callback that queues the registered C# callback.
  // We unpack the real C# callback from the user data, where we packed it
  // when the callback was registered.
  void Future_QuerySnapshot_CB(const firebase::Future<firebase::firestore::QuerySnapshot>& /*result_data*/,
                   void *user_data) {
    auto cbdata = reinterpret_cast<Future_QuerySnapshotCallbackData*>(user_data);
    firebase::callback::AddCallback(
        new firebase::callback::CallbackValue1<Future_QuerySnapshotCallbackData>(
            *cbdata, CallbackImpl));
  }

SWIGINTERN void *firebase_Future_Sl_firebase_firestore_QuerySnapshot_Sg__SWIG_OnCompletion(firebase::Future< firebase::firestore::QuerySnapshot > *self,Future_QuerySnapshot_CB_Type cs_callback,int cs_key){
    Future_QuerySnapshotCallbackData* cbdata = new Future_QuerySnapshotCallbackData;
    cbdata->cs_callback = cs_callback;
    cbdata->cs_key = cs_key;
    self->OnCompletion(Future_QuerySnapshot_CB, cbdata);
    return cbdata;
  }
SWIGINTERN void firebase_Future_Sl_firebase_firestore_QuerySnapshot_Sg__SWIG_FreeCompletionData(firebase::Future< firebase::firestore::QuerySnapshot > *self,void *data){
    delete reinterpret_cast<Future_QuerySnapshotCallbackData*>(data);
  }
SWIGINTERN firebase::firestore::QuerySnapshot const firebase_Future_Sl_firebase_firestore_QuerySnapshot_Sg__GetResult(firebase::Future< firebase::firestore::QuerySnapshot > const *self){
    // The Future internally always stores it's value with firebase::firestore::QuerySnapshot *, so 'result'
    // can always be dereferenced except when the type in void.
    return *self->result();
  }

#include "app/src/callback.h"
#include "app/src/include/firebase/future.h"


  // This adds the STDCALL thunk, necessary for C/C# interoperability.
  // The function pointer type declared in the C++ library should have the
  // exact same signature, however it lacks this explicit calling convention
  // declaration. We declare it here with explicit calling convention and use
  // a thin wrapper (just below) so that we can be certain we match the same
  // calling convention in C# when we trigger the callback.
  typedef void (SWIGSTDCALL* Future_DocumentSnapshot_CB_Type)(int index);

  // Associates callback data with each Future<firebase::firestore::DocumentSnapshot> instance.
  struct Future_DocumentSnapshotCallbackData {
    // C# delegate method that should be called on the main thread.
    Future_DocumentSnapshot_CB_Type cs_callback;
    // Key of the callback in the C# DocumentSnapshotProxy.Callbacks dictionary.
    int cs_key;
  };

  // Use a static function to make callback so don't need to worry about
  // whether using stdcall or cdecl for the cs_callback function.
  static void CallbackImpl(Future_DocumentSnapshotCallbackData data) {
    data.cs_callback(data.cs_key);
  }

  // This is a C++ wrapper callback that queues the registered C# callback.
  // We unpack the real C# callback from the user data, where we packed it
  // when the callback was registered.
  void Future_DocumentSnapshot_CB(const firebase::Future<firebase::firestore::DocumentSnapshot>& /*result_data*/,
                   void *user_data) {
    auto cbdata = reinterpret_cast<Future_DocumentSnapshotCallbackData*>(user_data);
    firebase::callback::AddCallback(
        new firebase::callback::CallbackValue1<Future_DocumentSnapshotCallbackData>(
            *cbdata, CallbackImpl));
  }

SWIGINTERN void *firebase_Future_Sl_firebase_firestore_DocumentSnapshot_Sg__SWIG_OnCompletion(firebase::Future< firebase::firestore::DocumentSnapshot > *self,Future_DocumentSnapshot_CB_Type cs_callback,int cs_key){
    Future_DocumentSnapshotCallbackData* cbdata = new Future_DocumentSnapshotCallbackData;
    cbdata->cs_callback = cs_callback;
    cbdata->cs_key = cs_key;
    self->OnCompletion(Future_DocumentSnapshot_CB, cbdata);
    return cbdata;
  }
SWIGINTERN void firebase_Future_Sl_firebase_firestore_DocumentSnapshot_Sg__SWIG_FreeCompletionData(firebase::Future< firebase::firestore::DocumentSnapshot > *self,void *data){
    delete reinterpret_cast<Future_DocumentSnapshotCallbackData*>(data);
  }
SWIGINTERN firebase::firestore::DocumentSnapshot const firebase_Future_Sl_firebase_firestore_DocumentSnapshot_Sg__GetResult(firebase::Future< firebase::firestore::DocumentSnapshot > const *self){
    // The Future internally always stores it's value with firebase::firestore::DocumentSnapshot *, so 'result'
    // can always be dereferenced except when the type in void.
    return *self->result();
  }

#include "app/src/callback.h"
#include "app/src/include/firebase/future.h"


  // This adds the STDCALL thunk, necessary for C/C# interoperability.
  // The function pointer type declared in the C++ library should have the
  // exact same signature, however it lacks this explicit calling convention
  // declaration. We declare it here with explicit calling convention and use
  // a thin wrapper (just below) so that we can be certain we match the same
  // calling convention in C# when we trigger the callback.
  typedef void (SWIGSTDCALL* Future_DocumentReference_CB_Type)(int index);

  // Associates callback data with each Future<firebase::firestore::DocumentReference> instance.
  struct Future_DocumentReferenceCallbackData {
    // C# delegate method that should be called on the main thread.
    Future_DocumentReference_CB_Type cs_callback;
    // Key of the callback in the C# DocumentReferenceProxy.Callbacks dictionary.
    int cs_key;
  };

  // Use a static function to make callback so don't need to worry about
  // whether using stdcall or cdecl for the cs_callback function.
  static void CallbackImpl(Future_DocumentReferenceCallbackData data) {
    data.cs_callback(data.cs_key);
  }

  // This is a C++ wrapper callback that queues the registered C# callback.
  // We unpack the real C# callback from the user data, where we packed it
  // when the callback was registered.
  void Future_DocumentReference_CB(const firebase::Future<firebase::firestore::DocumentReference>& /*result_data*/,
                   void *user_data) {
    auto cbdata = reinterpret_cast<Future_DocumentReferenceCallbackData*>(user_data);
    firebase::callback::AddCallback(
        new firebase::callback::CallbackValue1<Future_DocumentReferenceCallbackData>(
            *cbdata, CallbackImpl));
  }

SWIGINTERN void *firebase_Future_Sl_firebase_firestore_DocumentReference_Sg__SWIG_OnCompletion(firebase::Future< firebase::firestore::DocumentReference > *self,Future_DocumentReference_CB_Type cs_callback,int cs_key){
    Future_DocumentReferenceCallbackData* cbdata = new Future_DocumentReferenceCallbackData;
    cbdata->cs_callback = cs_callback;
    cbdata->cs_key = cs_key;
    self->OnCompletion(Future_DocumentReference_CB, cbdata);
    return cbdata;
  }
SWIGINTERN void firebase_Future_Sl_firebase_firestore_DocumentReference_Sg__SWIG_FreeCompletionData(firebase::Future< firebase::firestore::DocumentReference > *self,void *data){
    delete reinterpret_cast<Future_DocumentReferenceCallbackData*>(data);
  }
SWIGINTERN firebase::firestore::DocumentReference const firebase_Future_Sl_firebase_firestore_DocumentReference_Sg__GetResult(firebase::Future< firebase::firestore::DocumentReference > const *self){
    // The Future internally always stores it's value with firebase::firestore::DocumentReference *, so 'result'
    // can always be dereferenced except when the type in void.
    return *self->result();
  }

#include "app/src/callback.h"
#include "app/src/include/firebase/future.h"


  // This adds the STDCALL thunk, necessary for C/C# interoperability.
  // The function pointer type declared in the C++ library should have the
  // exact same signature, however it lacks this explicit calling convention
  // declaration. We declare it here with explicit calling convention and use
  // a thin wrapper (just below) so that we can be certain we match the same
  // calling convention in C# when we trigger the callback.
  typedef void (SWIGSTDCALL* Future_FirestoreVoid_CB_Type)(int index);

  // Associates callback data with each Future<void> instance.
  struct Future_FirestoreVoidCallbackData {
    // C# delegate method that should be called on the main thread.
    Future_FirestoreVoid_CB_Type cs_callback;
    // Key of the callback in the C# void.Callbacks dictionary.
    int cs_key;
  };

  // Use a static function to make callback so don't need to worry about
  // whether using stdcall or cdecl for the cs_callback function.
  static void CallbackImpl(Future_FirestoreVoidCallbackData data) {
    data.cs_callback(data.cs_key);
  }

  // This is a C++ wrapper callback that queues the registered C# callback.
  // We unpack the real C# callback from the user data, where we packed it
  // when the callback was registered.
  void Future_FirestoreVoid_CB(const firebase::Future<void>& /*result_data*/,
                   void *user_data) {
    auto cbdata = reinterpret_cast<Future_FirestoreVoidCallbackData*>(user_data);
    firebase::callback::AddCallback(
        new firebase::callback::CallbackValue1<Future_FirestoreVoidCallbackData>(
            *cbdata, CallbackImpl));
  }

SWIGINTERN void *firebase_Future_Sl_void_Sg__SWIG_OnCompletion(firebase::Future< void > *self,Future_FirestoreVoid_CB_Type cs_callback,int cs_key){
    Future_FirestoreVoidCallbackData* cbdata = new Future_FirestoreVoidCallbackData;
    cbdata->cs_callback = cs_callback;
    cbdata->cs_key = cs_key;
    self->OnCompletion(Future_FirestoreVoid_CB, cbdata);
    return cbdata;
  }
SWIGINTERN void firebase_Future_Sl_void_Sg__SWIG_FreeCompletionData(firebase::Future< void > *self,void *data){
    delete reinterpret_cast<Future_FirestoreVoidCallbackData*>(data);
  }

#include "app/src/callback.h"
#include "app/src/include/firebase/future.h"


  // This adds the STDCALL thunk, necessary for C/C# interoperability.
  // The function pointer type declared in the C++ library should have the
  // exact same signature, however it lacks this explicit calling convention
  // declaration. We declare it here with explicit calling convention and use
  // a thin wrapper (just below) so that we can be certain we match the same
  // calling convention in C# when we trigger the callback.
  typedef void (SWIGSTDCALL* Future_LoadBundleTaskProgress_CB_Type)(int index);

  // Associates callback data with each Future<firebase::firestore::LoadBundleTaskProgress> instance.
  struct Future_LoadBundleTaskProgressCallbackData {
    // C# delegate method that should be called on the main thread.
    Future_LoadBundleTaskProgress_CB_Type cs_callback;
    // Key of the callback in the C# LoadBundleTaskProgressProxy.Callbacks dictionary.
    int cs_key;
  };

  // Use a static function to make callback so don't need to worry about
  // whether using stdcall or cdecl for the cs_callback function.
  static void CallbackImpl(Future_LoadBundleTaskProgressCallbackData data) {
    data.cs_callback(data.cs_key);
  }

  // This is a C++ wrapper callback that queues the registered C# callback.
  // We unpack the real C# callback from the user data, where we packed it
  // when the callback was registered.
  void Future_LoadBundleTaskProgress_CB(const firebase::Future<firebase::firestore::LoadBundleTaskProgress>& /*result_data*/,
                   void *user_data) {
    auto cbdata = reinterpret_cast<Future_LoadBundleTaskProgressCallbackData*>(user_data);
    firebase::callback::AddCallback(
        new firebase::callback::CallbackValue1<Future_LoadBundleTaskProgressCallbackData>(
            *cbdata, CallbackImpl));
  }

SWIGINTERN void *firebase_Future_Sl_firebase_firestore_LoadBundleTaskProgress_Sg__SWIG_OnCompletion(firebase::Future< firebase::firestore::LoadBundleTaskProgress > *self,Future_LoadBundleTaskProgress_CB_Type cs_callback,int cs_key){
    Future_LoadBundleTaskProgressCallbackData* cbdata = new Future_LoadBundleTaskProgressCallbackData;
    cbdata->cs_callback = cs_callback;
    cbdata->cs_key = cs_key;
    self->OnCompletion(Future_LoadBundleTaskProgress_CB, cbdata);
    return cbdata;
  }
SWIGINTERN void firebase_Future_Sl_firebase_firestore_LoadBundleTaskProgress_Sg__SWIG_FreeCompletionData(firebase::Future< firebase::firestore::LoadBundleTaskProgress > *self,void *data){
    delete reinterpret_cast<Future_LoadBundleTaskProgressCallbackData*>(data);
  }
SWIGINTERN firebase::firestore::LoadBundleTaskProgress const firebase_Future_Sl_firebase_firestore_LoadBundleTaskProgress_Sg__GetResult(firebase::Future< firebase::firestore::LoadBundleTaskProgress > const *self){
    // The Future internally always stores it's value with firebase::firestore::LoadBundleTaskProgress *, so 'result'
    // can always be dereferenced except when the type in void.
    return *self->result();
  }

#include "app/src/callback.h"
#include "app/src/include/firebase/future.h"


  // This adds the STDCALL thunk, necessary for C/C# interoperability.
  // The function pointer type declared in the C++ library should have the
  // exact same signature, however it lacks this explicit calling convention
  // declaration. We declare it here with explicit calling convention and use
  // a thin wrapper (just below) so that we can be certain we match the same
  // calling convention in C# when we trigger the callback.
  typedef void (SWIGSTDCALL* Future_Query_CB_Type)(int index);

  // Associates callback data with each Future<firebase::firestore::Query> instance.
  struct Future_QueryCallbackData {
    // C# delegate method that should be called on the main thread.
    Future_Query_CB_Type cs_callback;
    // Key of the callback in the C# QueryProxy.Callbacks dictionary.
    int cs_key;
  };

  // Use a static function to make callback so don't need to worry about
  // whether using stdcall or cdecl for the cs_callback function.
  static void CallbackImpl(Future_QueryCallbackData data) {
    data.cs_callback(data.cs_key);
  }

  // This is a C++ wrapper callback that queues the registered C# callback.
  // We unpack the real C# callback from the user data, where we packed it
  // when the callback was registered.
  void Future_Query_CB(const firebase::Future<firebase::firestore::Query>& /*result_data*/,
                   void *user_data) {
    auto cbdata = reinterpret_cast<Future_QueryCallbackData*>(user_data);
    firebase::callback::AddCallback(
        new firebase::callback::CallbackValue1<Future_QueryCallbackData>(
            *cbdata, CallbackImpl));
  }

SWIGINTERN void *firebase_Future_Sl_firebase_firestore_Query_Sg__SWIG_OnCompletion(firebase::Future< firebase::firestore::Query > *self,Future_Query_CB_Type cs_callback,int cs_key){
    Future_QueryCallbackData* cbdata = new Future_QueryCallbackData;
    cbdata->cs_callback = cs_callback;
    cbdata->cs_key = cs_key;
    self->OnCompletion(Future_Query_CB, cbdata);
    return cbdata;
  }
SWIGINTERN void firebase_Future_Sl_firebase_firestore_Query_Sg__SWIG_FreeCompletionData(firebase::Future< firebase::firestore::Query > *self,void *data){
    delete reinterpret_cast<Future_QueryCallbackData*>(data);
  }
SWIGINTERN firebase::firestore::Query const firebase_Future_Sl_firebase_firestore_Query_Sg__GetResult(firebase::Future< firebase::firestore::Query > const *self){
    // The Future internally always stores it's value with firebase::firestore::Query *, so 'result'
    // can always be dereferenced except when the type in void.
    return *self->result();
  }

#include "firestore/src/swig/document_event_listener.h"
#include "firestore/src/swig/query_event_listener.h"
#include "firestore/src/swig/snapshots_in_sync_listener.h"
#include "firestore/src/swig/load_bundle_task_progress_callback.h"
#include "firestore/src/swig/firestore_instance_management.h"


#include "firestore/src/swig/api_headers.h"


#include "firestore/src/swig/map.h"


#include "firestore/src/swig/transaction_manager.h"


#include "firestore/src/swig/vector.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_new_GeoPointProxy(double jarg1, double jarg2) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  firebase::firestore::GeoPoint *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (firebase::firestore::GeoPoint *)new firebase::firestore::GeoPoint(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL Firebase_Firestore_CSharp_GeoPointProxy_latitude(void * jarg1) {
  double jresult ;
  firebase::firestore::GeoPoint *arg1 = (firebase::firestore::GeoPoint *) 0 ;
  double result;
  
  arg1 = (firebase::firestore::GeoPoint *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__GeoPoint) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  result = (double)((firebase::firestore::GeoPoint const *)arg1)->latitude();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL Firebase_Firestore_CSharp_GeoPointProxy_longitude(void * jarg1) {
  double jresult ;
  firebase::firestore::GeoPoint *arg1 = (firebase::firestore::GeoPoint *) 0 ;
  double result;
  
  arg1 = (firebase::firestore::GeoPoint *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__GeoPoint) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  result = (double)((firebase::firestore::GeoPoint const *)arg1)->longitude();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_GeoPointProxy(void * jarg1) {
  firebase::firestore::GeoPoint *arg1 = (firebase::firestore::GeoPoint *) 0 ;
  
  arg1 = (firebase::firestore::GeoPoint *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__GeoPoint) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_new_TimestampProxy__SWIG_0() {
  void * jresult ;
  firebase::Timestamp *result = 0 ;
  
  result = (firebase::Timestamp *)new firebase::Timestamp();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_new_TimestampProxy__SWIG_1(long long jarg1, int jarg2) {
  void * jresult ;
  int64_t arg1 ;
  int32_t arg2 ;
  firebase::Timestamp *result = 0 ;
  
  arg1 = (int64_t)jarg1; 
  arg2 = (int32_t)jarg2; 
  result = (firebase::Timestamp *)new firebase::Timestamp(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_new_TimestampProxy__SWIG_2(void * jarg1) {
  void * jresult ;
  firebase::Timestamp *arg1 = 0 ;
  firebase::Timestamp *result = 0 ;
  
  arg1 = (firebase::Timestamp *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::Timestamp const & type is null", 0);
    return 0;
  } 
  result = (firebase::Timestamp *)new firebase::Timestamp((firebase::Timestamp const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_TimestampProxy_Now() {
  void * jresult ;
  firebase::Timestamp result;
  
  result = firebase::Timestamp::Now();
  jresult = new firebase::Timestamp((const firebase::Timestamp &)result); 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL Firebase_Firestore_CSharp_TimestampProxy_seconds(void * jarg1) {
  long long jresult ;
  firebase::Timestamp *arg1 = (firebase::Timestamp *) 0 ;
  int64_t result;
  
  arg1 = (firebase::Timestamp *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__Timestamp) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  result = (int64_t)((firebase::Timestamp const *)arg1)->seconds();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL Firebase_Firestore_CSharp_TimestampProxy_nanoseconds(void * jarg1) {
  int jresult ;
  firebase::Timestamp *arg1 = (firebase::Timestamp *) 0 ;
  int32_t result;
  
  arg1 = (firebase::Timestamp *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__Timestamp) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  result = (int32_t)((firebase::Timestamp const *)arg1)->nanoseconds();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL Firebase_Firestore_CSharp_TimestampProxy_ToString(void * jarg1) {
  char * jresult ;
  firebase::Timestamp *arg1 = (firebase::Timestamp *) 0 ;
  std::string result;
  
  arg1 = (firebase::Timestamp *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__Timestamp) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  result = ((firebase::Timestamp const *)arg1)->ToString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_TimestampProxy(void * jarg1) {
  firebase::Timestamp *arg1 = (firebase::Timestamp *) 0 ;
  
  arg1 = (firebase::Timestamp *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__Timestamp) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_new_Future_QuerySnapshot() {
  void * jresult ;
  firebase::Future< firebase::firestore::QuerySnapshot > *result = 0 ;
  
  {
    try {
      result = (firebase::Future< firebase::firestore::QuerySnapshot > *)new firebase::Future< firebase::firestore::QuerySnapshot >();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_Future_QuerySnapshot_SWIG_OnCompletion(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  firebase::Future< firebase::firestore::QuerySnapshot > *arg1 = (firebase::Future< firebase::firestore::QuerySnapshot > *) 0 ;
  Future_QuerySnapshot_CB_Type arg2 ;
  int arg3 ;
  void *result = 0 ;
  
  arg1 = (firebase::Future< firebase::firestore::QuerySnapshot > *)jarg1; 
  arg2 = (Future_QuerySnapshot_CB_Type)jarg2; 
  arg3 = (int)jarg3; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__FutureT_firebase__firestore__QuerySnapshot_t) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (void *)firebase_Future_Sl_firebase_firestore_QuerySnapshot_Sg__SWIG_OnCompletion(arg1,arg2,arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_Future_QuerySnapshot_SWIG_FreeCompletionData(void * jarg1, void * jarg2) {
  firebase::Future< firebase::firestore::QuerySnapshot > *arg1 = (firebase::Future< firebase::firestore::QuerySnapshot > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (firebase::Future< firebase::firestore::QuerySnapshot > *)jarg1; 
  arg2 = (void *)jarg2; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__FutureT_firebase__firestore__QuerySnapshot_t) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      firebase_Future_Sl_firebase_firestore_QuerySnapshot_Sg__SWIG_FreeCompletionData(arg1,arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_Future_QuerySnapshot_GetResult(void * jarg1) {
  void * jresult ;
  firebase::Future< firebase::firestore::QuerySnapshot > *arg1 = (firebase::Future< firebase::firestore::QuerySnapshot > *) 0 ;
  firebase::firestore::QuerySnapshot result;
  
  arg1 = (firebase::Future< firebase::firestore::QuerySnapshot > *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__FutureT_firebase__firestore__QuerySnapshot_t) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = firebase_Future_Sl_firebase_firestore_QuerySnapshot_Sg__GetResult((firebase::Future< firebase::firestore::QuerySnapshot > const *)arg1);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::QuerySnapshot((const firebase::firestore::QuerySnapshot &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_Future_QuerySnapshot(void * jarg1) {
  firebase::Future< firebase::firestore::QuerySnapshot > *arg1 = (firebase::Future< firebase::firestore::QuerySnapshot > *) 0 ;
  
  arg1 = (firebase::Future< firebase::firestore::QuerySnapshot > *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__FutureT_firebase__firestore__QuerySnapshot_t) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_new_Future_DocumentSnapshot() {
  void * jresult ;
  firebase::Future< firebase::firestore::DocumentSnapshot > *result = 0 ;
  
  {
    try {
      result = (firebase::Future< firebase::firestore::DocumentSnapshot > *)new firebase::Future< firebase::firestore::DocumentSnapshot >();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_Future_DocumentSnapshot_SWIG_OnCompletion(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  firebase::Future< firebase::firestore::DocumentSnapshot > *arg1 = (firebase::Future< firebase::firestore::DocumentSnapshot > *) 0 ;
  Future_DocumentSnapshot_CB_Type arg2 ;
  int arg3 ;
  void *result = 0 ;
  
  arg1 = (firebase::Future< firebase::firestore::DocumentSnapshot > *)jarg1; 
  arg2 = (Future_DocumentSnapshot_CB_Type)jarg2; 
  arg3 = (int)jarg3; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__FutureT_firebase__firestore__DocumentSnapshot_t) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (void *)firebase_Future_Sl_firebase_firestore_DocumentSnapshot_Sg__SWIG_OnCompletion(arg1,arg2,arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_Future_DocumentSnapshot_SWIG_FreeCompletionData(void * jarg1, void * jarg2) {
  firebase::Future< firebase::firestore::DocumentSnapshot > *arg1 = (firebase::Future< firebase::firestore::DocumentSnapshot > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (firebase::Future< firebase::firestore::DocumentSnapshot > *)jarg1; 
  arg2 = (void *)jarg2; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__FutureT_firebase__firestore__DocumentSnapshot_t) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      firebase_Future_Sl_firebase_firestore_DocumentSnapshot_Sg__SWIG_FreeCompletionData(arg1,arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_Future_DocumentSnapshot_GetResult(void * jarg1) {
  void * jresult ;
  firebase::Future< firebase::firestore::DocumentSnapshot > *arg1 = (firebase::Future< firebase::firestore::DocumentSnapshot > *) 0 ;
  firebase::firestore::DocumentSnapshot result;
  
  arg1 = (firebase::Future< firebase::firestore::DocumentSnapshot > *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__FutureT_firebase__firestore__DocumentSnapshot_t) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = firebase_Future_Sl_firebase_firestore_DocumentSnapshot_Sg__GetResult((firebase::Future< firebase::firestore::DocumentSnapshot > const *)arg1);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::DocumentSnapshot((const firebase::firestore::DocumentSnapshot &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_Future_DocumentSnapshot(void * jarg1) {
  firebase::Future< firebase::firestore::DocumentSnapshot > *arg1 = (firebase::Future< firebase::firestore::DocumentSnapshot > *) 0 ;
  
  arg1 = (firebase::Future< firebase::firestore::DocumentSnapshot > *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__FutureT_firebase__firestore__DocumentSnapshot_t) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_new_Future_DocumentReference() {
  void * jresult ;
  firebase::Future< firebase::firestore::DocumentReference > *result = 0 ;
  
  {
    try {
      result = (firebase::Future< firebase::firestore::DocumentReference > *)new firebase::Future< firebase::firestore::DocumentReference >();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_Future_DocumentReference_SWIG_OnCompletion(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  firebase::Future< firebase::firestore::DocumentReference > *arg1 = (firebase::Future< firebase::firestore::DocumentReference > *) 0 ;
  Future_DocumentReference_CB_Type arg2 ;
  int arg3 ;
  void *result = 0 ;
  
  arg1 = (firebase::Future< firebase::firestore::DocumentReference > *)jarg1; 
  arg2 = (Future_DocumentReference_CB_Type)jarg2; 
  arg3 = (int)jarg3; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__FutureT_firebase__firestore__DocumentReference_t) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (void *)firebase_Future_Sl_firebase_firestore_DocumentReference_Sg__SWIG_OnCompletion(arg1,arg2,arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_Future_DocumentReference_SWIG_FreeCompletionData(void * jarg1, void * jarg2) {
  firebase::Future< firebase::firestore::DocumentReference > *arg1 = (firebase::Future< firebase::firestore::DocumentReference > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (firebase::Future< firebase::firestore::DocumentReference > *)jarg1; 
  arg2 = (void *)jarg2; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__FutureT_firebase__firestore__DocumentReference_t) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      firebase_Future_Sl_firebase_firestore_DocumentReference_Sg__SWIG_FreeCompletionData(arg1,arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_Future_DocumentReference_GetResult(void * jarg1) {
  void * jresult ;
  firebase::Future< firebase::firestore::DocumentReference > *arg1 = (firebase::Future< firebase::firestore::DocumentReference > *) 0 ;
  firebase::firestore::DocumentReference result;
  
  arg1 = (firebase::Future< firebase::firestore::DocumentReference > *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__FutureT_firebase__firestore__DocumentReference_t) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = firebase_Future_Sl_firebase_firestore_DocumentReference_Sg__GetResult((firebase::Future< firebase::firestore::DocumentReference > const *)arg1);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::DocumentReference((const firebase::firestore::DocumentReference &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_Future_DocumentReference(void * jarg1) {
  firebase::Future< firebase::firestore::DocumentReference > *arg1 = (firebase::Future< firebase::firestore::DocumentReference > *) 0 ;
  
  arg1 = (firebase::Future< firebase::firestore::DocumentReference > *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__FutureT_firebase__firestore__DocumentReference_t) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_new_Future_FirestoreVoid() {
  void * jresult ;
  firebase::Future< void > *result = 0 ;
  
  {
    try {
      result = (firebase::Future< void > *)new firebase::Future< void >();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_Future_FirestoreVoid_SWIG_OnCompletion(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  firebase::Future< void > *arg1 = (firebase::Future< void > *) 0 ;
  Future_FirestoreVoid_CB_Type arg2 ;
  int arg3 ;
  void *result = 0 ;
  
  arg1 = (firebase::Future< void > *)jarg1; 
  arg2 = (Future_FirestoreVoid_CB_Type)jarg2; 
  arg3 = (int)jarg3; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__FutureT_void_t) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (void *)firebase_Future_Sl_void_Sg__SWIG_OnCompletion(arg1,arg2,arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_Future_FirestoreVoid_SWIG_FreeCompletionData(void * jarg1, void * jarg2) {
  firebase::Future< void > *arg1 = (firebase::Future< void > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (firebase::Future< void > *)jarg1; 
  arg2 = (void *)jarg2; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__FutureT_void_t) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      firebase_Future_Sl_void_Sg__SWIG_FreeCompletionData(arg1,arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_Future_FirestoreVoid(void * jarg1) {
  firebase::Future< void > *arg1 = (firebase::Future< void > *) 0 ;
  
  arg1 = (firebase::Future< void > *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__FutureT_void_t) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_new_Future_LoadBundleTaskProgress() {
  void * jresult ;
  firebase::Future< firebase::firestore::LoadBundleTaskProgress > *result = 0 ;
  
  {
    try {
      result = (firebase::Future< firebase::firestore::LoadBundleTaskProgress > *)new firebase::Future< firebase::firestore::LoadBundleTaskProgress >();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_Future_LoadBundleTaskProgress_SWIG_OnCompletion(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  firebase::Future< firebase::firestore::LoadBundleTaskProgress > *arg1 = (firebase::Future< firebase::firestore::LoadBundleTaskProgress > *) 0 ;
  Future_LoadBundleTaskProgress_CB_Type arg2 ;
  int arg3 ;
  void *result = 0 ;
  
  arg1 = (firebase::Future< firebase::firestore::LoadBundleTaskProgress > *)jarg1; 
  arg2 = (Future_LoadBundleTaskProgress_CB_Type)jarg2; 
  arg3 = (int)jarg3; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__FutureT_firebase__firestore__LoadBundleTaskProgress_t) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (void *)firebase_Future_Sl_firebase_firestore_LoadBundleTaskProgress_Sg__SWIG_OnCompletion(arg1,arg2,arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_Future_LoadBundleTaskProgress_SWIG_FreeCompletionData(void * jarg1, void * jarg2) {
  firebase::Future< firebase::firestore::LoadBundleTaskProgress > *arg1 = (firebase::Future< firebase::firestore::LoadBundleTaskProgress > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (firebase::Future< firebase::firestore::LoadBundleTaskProgress > *)jarg1; 
  arg2 = (void *)jarg2; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__FutureT_firebase__firestore__LoadBundleTaskProgress_t) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      firebase_Future_Sl_firebase_firestore_LoadBundleTaskProgress_Sg__SWIG_FreeCompletionData(arg1,arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_Future_LoadBundleTaskProgress_GetResult(void * jarg1) {
  void * jresult ;
  firebase::Future< firebase::firestore::LoadBundleTaskProgress > *arg1 = (firebase::Future< firebase::firestore::LoadBundleTaskProgress > *) 0 ;
  firebase::firestore::LoadBundleTaskProgress result;
  
  arg1 = (firebase::Future< firebase::firestore::LoadBundleTaskProgress > *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__FutureT_firebase__firestore__LoadBundleTaskProgress_t) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = firebase_Future_Sl_firebase_firestore_LoadBundleTaskProgress_Sg__GetResult((firebase::Future< firebase::firestore::LoadBundleTaskProgress > const *)arg1);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::LoadBundleTaskProgress((const firebase::firestore::LoadBundleTaskProgress &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_Future_LoadBundleTaskProgress(void * jarg1) {
  firebase::Future< firebase::firestore::LoadBundleTaskProgress > *arg1 = (firebase::Future< firebase::firestore::LoadBundleTaskProgress > *) 0 ;
  
  arg1 = (firebase::Future< firebase::firestore::LoadBundleTaskProgress > *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__FutureT_firebase__firestore__LoadBundleTaskProgress_t) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_new_Future_Query() {
  void * jresult ;
  firebase::Future< firebase::firestore::Query > *result = 0 ;
  
  {
    try {
      result = (firebase::Future< firebase::firestore::Query > *)new firebase::Future< firebase::firestore::Query >();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_Future_Query_SWIG_OnCompletion(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  firebase::Future< firebase::firestore::Query > *arg1 = (firebase::Future< firebase::firestore::Query > *) 0 ;
  Future_Query_CB_Type arg2 ;
  int arg3 ;
  void *result = 0 ;
  
  arg1 = (firebase::Future< firebase::firestore::Query > *)jarg1; 
  arg2 = (Future_Query_CB_Type)jarg2; 
  arg3 = (int)jarg3; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__FutureT_firebase__firestore__Query_t) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (void *)firebase_Future_Sl_firebase_firestore_Query_Sg__SWIG_OnCompletion(arg1,arg2,arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_Future_Query_SWIG_FreeCompletionData(void * jarg1, void * jarg2) {
  firebase::Future< firebase::firestore::Query > *arg1 = (firebase::Future< firebase::firestore::Query > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (firebase::Future< firebase::firestore::Query > *)jarg1; 
  arg2 = (void *)jarg2; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__FutureT_firebase__firestore__Query_t) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      firebase_Future_Sl_firebase_firestore_Query_Sg__SWIG_FreeCompletionData(arg1,arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_Future_Query_GetResult(void * jarg1) {
  void * jresult ;
  firebase::Future< firebase::firestore::Query > *arg1 = (firebase::Future< firebase::firestore::Query > *) 0 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::Future< firebase::firestore::Query > *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__FutureT_firebase__firestore__Query_t) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = firebase_Future_Sl_firebase_firestore_Query_Sg__GetResult((firebase::Future< firebase::firestore::Query > const *)arg1);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query((const firebase::firestore::Query &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_Future_Query(void * jarg1) {
  firebase::Future< firebase::firestore::Query > *arg1 = (firebase::Future< firebase::firestore::Query > *) 0 ;
  
  arg1 = (firebase::Future< firebase::firestore::Query > *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__FutureT_firebase__firestore__Query_t) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_ListenerRegistrationProxy(void * jarg1) {
  firebase::firestore::ListenerRegistration *arg1 = (firebase::firestore::ListenerRegistration *) 0 ;
  
  arg1 = (firebase::firestore::ListenerRegistration *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__ListenerRegistration) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_ListenerRegistrationProxy_Remove(void * jarg1) {
  firebase::firestore::ListenerRegistration *arg1 = (firebase::firestore::ListenerRegistration *) 0 ;
  
  arg1 = (firebase::firestore::ListenerRegistration *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__ListenerRegistration) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      (arg1)->Remove();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_new_FieldPathProxy(void * jarg1) {
  void * jresult ;
  std::vector< std::string > *arg1 = 0 ;
  firebase::firestore::FieldPath *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (firebase::firestore::FieldPath *)new firebase::firestore::FieldPath((std::vector< std::string > const &)*arg1);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_FieldPathProxy(void * jarg1) {
  firebase::firestore::FieldPath *arg1 = (firebase::firestore::FieldPath *) 0 ;
  
  arg1 = (firebase::firestore::FieldPath *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__FieldPath) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_new_SetOptionsProxy() {
  void * jresult ;
  firebase::firestore::SetOptions *result = 0 ;
  
  {
    try {
      result = (firebase::firestore::SetOptions *)new firebase::firestore::SetOptions();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_SetOptionsProxy(void * jarg1) {
  firebase::firestore::SetOptions *arg1 = (firebase::firestore::SetOptions *) 0 ;
  
  arg1 = (firebase::firestore::SetOptions *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__SetOptions) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_SetOptionsProxy_Merge() {
  void * jresult ;
  firebase::firestore::SetOptions result;
  
  {
    try {
      result = firebase::firestore::SetOptions::Merge();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::SetOptions(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_SetOptionsProxy_MergeFields(void * jarg1) {
  void * jresult ;
  std::vector< std::string > *arg1 = 0 ;
  firebase::firestore::SetOptions result;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = firebase::firestore::SetOptions::MergeFields((std::vector< std::string > const &)*arg1);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::SetOptions(result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_DocumentReferenceProxy(void * jarg1) {
  firebase::firestore::DocumentReference *arg1 = (firebase::firestore::DocumentReference *) 0 ;
  
  arg1 = (firebase::firestore::DocumentReference *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__DocumentReference) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL Firebase_Firestore_CSharp_DocumentReferenceProxy_id(void * jarg1) {
  char * jresult ;
  firebase::firestore::DocumentReference *arg1 = (firebase::firestore::DocumentReference *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (firebase::firestore::DocumentReference *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__DocumentReference) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (std::string *) &((firebase::firestore::DocumentReference const *)arg1)->id();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL Firebase_Firestore_CSharp_DocumentReferenceProxy_path(void * jarg1) {
  char * jresult ;
  firebase::firestore::DocumentReference *arg1 = (firebase::firestore::DocumentReference *) 0 ;
  std::string result;
  
  arg1 = (firebase::firestore::DocumentReference *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__DocumentReference) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::DocumentReference const *)arg1)->path();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_DocumentReferenceProxy_Parent(void * jarg1) {
  void * jresult ;
  firebase::firestore::DocumentReference *arg1 = (firebase::firestore::DocumentReference *) 0 ;
  firebase::firestore::CollectionReference result;
  
  arg1 = (firebase::firestore::DocumentReference *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__DocumentReference) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::DocumentReference const *)arg1)->Parent();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::CollectionReference(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_DocumentReferenceProxy_Collection__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  firebase::firestore::DocumentReference *arg1 = (firebase::firestore::DocumentReference *) 0 ;
  char *arg2 = (char *) 0 ;
  firebase::firestore::CollectionReference result;
  
  arg1 = (firebase::firestore::DocumentReference *)jarg1; 
  arg2 = (char *)jarg2; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__DocumentReference) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::DocumentReference const *)arg1)->Collection((char const *)arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::CollectionReference(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_DocumentReferenceProxy_Get__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  firebase::firestore::DocumentReference *arg1 = (firebase::firestore::DocumentReference *) 0 ;
  firebase::firestore::Source arg2 ;
  firebase::Future< firebase::firestore::DocumentSnapshot > result;
  
  arg1 = (firebase::firestore::DocumentReference *)jarg1; 
  arg2 = (firebase::firestore::Source)jarg2; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__DocumentReference) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::DocumentReference const *)arg1)->Get(arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::Future< firebase::firestore::DocumentSnapshot >(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_DocumentReferenceProxy_Get__SWIG_1(void * jarg1) {
  void * jresult ;
  firebase::firestore::DocumentReference *arg1 = (firebase::firestore::DocumentReference *) 0 ;
  firebase::Future< firebase::firestore::DocumentSnapshot > result;
  
  arg1 = (firebase::firestore::DocumentReference *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__DocumentReference) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::DocumentReference const *)arg1)->Get();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::Future< firebase::firestore::DocumentSnapshot >(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_DocumentReferenceProxy_Delete(void * jarg1) {
  void * jresult ;
  firebase::firestore::DocumentReference *arg1 = (firebase::firestore::DocumentReference *) 0 ;
  firebase::Future< void > result;
  
  arg1 = (firebase::firestore::DocumentReference *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__DocumentReference) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (arg1)->Delete();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::Future< void >(result);
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL Firebase_Firestore_CSharp_DocumentReferenceProxy_is_valid(void * jarg1) {
  unsigned int jresult ;
  firebase::firestore::DocumentReference *arg1 = (firebase::firestore::DocumentReference *) 0 ;
  bool result;
  
  arg1 = (firebase::firestore::DocumentReference *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__DocumentReference) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (bool)((firebase::firestore::DocumentReference const *)arg1)->is_valid();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_new_SnapshotMetadataProxy__SWIG_0() {
  void * jresult ;
  firebase::firestore::SnapshotMetadata *result = 0 ;
  
  {
    try {
      result = (firebase::firestore::SnapshotMetadata *)new firebase::firestore::SnapshotMetadata();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_new_SnapshotMetadataProxy__SWIG_1(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  bool arg1 ;
  bool arg2 ;
  firebase::firestore::SnapshotMetadata *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (firebase::firestore::SnapshotMetadata *)new firebase::firestore::SnapshotMetadata(arg1,arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_new_SnapshotMetadataProxy__SWIG_2(void * jarg1) {
  void * jresult ;
  firebase::firestore::SnapshotMetadata *arg1 = 0 ;
  firebase::firestore::SnapshotMetadata *result = 0 ;
  
  arg1 = (firebase::firestore::SnapshotMetadata *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::SnapshotMetadata const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (firebase::firestore::SnapshotMetadata *)new firebase::firestore::SnapshotMetadata((firebase::firestore::SnapshotMetadata const &)*arg1);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL Firebase_Firestore_CSharp_SnapshotMetadataProxy_has_pending_writes(void * jarg1) {
  unsigned int jresult ;
  firebase::firestore::SnapshotMetadata *arg1 = (firebase::firestore::SnapshotMetadata *) 0 ;
  bool result;
  
  arg1 = (firebase::firestore::SnapshotMetadata *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__SnapshotMetadata) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (bool)((firebase::firestore::SnapshotMetadata const *)arg1)->has_pending_writes();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL Firebase_Firestore_CSharp_SnapshotMetadataProxy_is_from_cache(void * jarg1) {
  unsigned int jresult ;
  firebase::firestore::SnapshotMetadata *arg1 = (firebase::firestore::SnapshotMetadata *) 0 ;
  bool result;
  
  arg1 = (firebase::firestore::SnapshotMetadata *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__SnapshotMetadata) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (bool)((firebase::firestore::SnapshotMetadata const *)arg1)->is_from_cache();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL Firebase_Firestore_CSharp_SnapshotMetadataProxy_ToString(void * jarg1) {
  char * jresult ;
  firebase::firestore::SnapshotMetadata *arg1 = (firebase::firestore::SnapshotMetadata *) 0 ;
  std::string result;
  
  arg1 = (firebase::firestore::SnapshotMetadata *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__SnapshotMetadata) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::SnapshotMetadata const *)arg1)->ToString();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_SnapshotMetadataProxy(void * jarg1) {
  firebase::firestore::SnapshotMetadata *arg1 = (firebase::firestore::SnapshotMetadata *) 0 ;
  
  arg1 = (firebase::firestore::SnapshotMetadata *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__SnapshotMetadata) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_DocumentSnapshotProxy(void * jarg1) {
  firebase::firestore::DocumentSnapshot *arg1 = (firebase::firestore::DocumentSnapshot *) 0 ;
  
  arg1 = (firebase::firestore::DocumentSnapshot *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__DocumentSnapshot) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL Firebase_Firestore_CSharp_DocumentSnapshotProxy_id(void * jarg1) {
  char * jresult ;
  firebase::firestore::DocumentSnapshot *arg1 = (firebase::firestore::DocumentSnapshot *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (firebase::firestore::DocumentSnapshot *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__DocumentSnapshot) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (std::string *) &((firebase::firestore::DocumentSnapshot const *)arg1)->id();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_DocumentSnapshotProxy_reference(void * jarg1) {
  void * jresult ;
  firebase::firestore::DocumentSnapshot *arg1 = (firebase::firestore::DocumentSnapshot *) 0 ;
  firebase::firestore::DocumentReference result;
  
  arg1 = (firebase::firestore::DocumentSnapshot *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__DocumentSnapshot) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::DocumentSnapshot const *)arg1)->reference();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::DocumentReference(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_DocumentSnapshotProxy_metadata(void * jarg1) {
  void * jresult ;
  firebase::firestore::DocumentSnapshot *arg1 = (firebase::firestore::DocumentSnapshot *) 0 ;
  firebase::firestore::SnapshotMetadata result;
  
  arg1 = (firebase::firestore::DocumentSnapshot *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__DocumentSnapshot) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::DocumentSnapshot const *)arg1)->metadata();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::SnapshotMetadata(result);
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL Firebase_Firestore_CSharp_DocumentSnapshotProxy_exists(void * jarg1) {
  unsigned int jresult ;
  firebase::firestore::DocumentSnapshot *arg1 = (firebase::firestore::DocumentSnapshot *) 0 ;
  bool result;
  
  arg1 = (firebase::firestore::DocumentSnapshot *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__DocumentSnapshot) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (bool)((firebase::firestore::DocumentSnapshot const *)arg1)->exists();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_DocumentSnapshotProxy_Get__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  firebase::firestore::DocumentSnapshot *arg1 = (firebase::firestore::DocumentSnapshot *) 0 ;
  char *arg2 = (char *) 0 ;
  firebase::firestore::DocumentSnapshot::ServerTimestampBehavior arg3 ;
  firebase::firestore::FieldValue result;
  
  arg1 = (firebase::firestore::DocumentSnapshot *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (firebase::firestore::DocumentSnapshot::ServerTimestampBehavior)jarg3; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__DocumentSnapshot) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::DocumentSnapshot const *)arg1)->Get((char const *)arg2,arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::FieldValue(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_DocumentSnapshotProxy_Get__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  firebase::firestore::DocumentSnapshot *arg1 = (firebase::firestore::DocumentSnapshot *) 0 ;
  char *arg2 = (char *) 0 ;
  firebase::firestore::FieldValue result;
  
  arg1 = (firebase::firestore::DocumentSnapshot *)jarg1; 
  arg2 = (char *)jarg2; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__DocumentSnapshot) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::DocumentSnapshot const *)arg1)->Get((char const *)arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::FieldValue(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_DocumentSnapshotProxy_Get__SWIG_4(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  firebase::firestore::DocumentSnapshot *arg1 = (firebase::firestore::DocumentSnapshot *) 0 ;
  firebase::firestore::FieldPath *arg2 = 0 ;
  firebase::firestore::DocumentSnapshot::ServerTimestampBehavior arg3 ;
  firebase::firestore::FieldValue result;
  
  arg1 = (firebase::firestore::DocumentSnapshot *)jarg1; 
  arg2 = (firebase::firestore::FieldPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldPath const & type is null", 0);
    return 0;
  } 
  arg3 = (firebase::firestore::DocumentSnapshot::ServerTimestampBehavior)jarg3; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__DocumentSnapshot) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::DocumentSnapshot const *)arg1)->Get((firebase::firestore::FieldPath const &)*arg2,arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::FieldValue(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_DocumentSnapshotProxy_Get__SWIG_5(void * jarg1, void * jarg2) {
  void * jresult ;
  firebase::firestore::DocumentSnapshot *arg1 = (firebase::firestore::DocumentSnapshot *) 0 ;
  firebase::firestore::FieldPath *arg2 = 0 ;
  firebase::firestore::FieldValue result;
  
  arg1 = (firebase::firestore::DocumentSnapshot *)jarg1; 
  arg2 = (firebase::firestore::FieldPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldPath const & type is null", 0);
    return 0;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__DocumentSnapshot) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::DocumentSnapshot const *)arg1)->Get((firebase::firestore::FieldPath const &)*arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::FieldValue(result);
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL Firebase_Firestore_CSharp_DocumentChangeProxy_npos_get() {
  unsigned long jresult ;
  std::size_t result;
  
  result = firebase::firestore::DocumentChange::npos;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_DocumentChangeProxy(void * jarg1) {
  firebase::firestore::DocumentChange *arg1 = (firebase::firestore::DocumentChange *) 0 ;
  
  arg1 = (firebase::firestore::DocumentChange *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__DocumentChange) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT int SWIGSTDCALL Firebase_Firestore_CSharp_DocumentChangeProxy_type(void * jarg1) {
  int jresult ;
  firebase::firestore::DocumentChange *arg1 = (firebase::firestore::DocumentChange *) 0 ;
  firebase::firestore::DocumentChange::Type result;
  
  arg1 = (firebase::firestore::DocumentChange *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__DocumentChange) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (firebase::firestore::DocumentChange::Type)((firebase::firestore::DocumentChange const *)arg1)->type();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_DocumentChangeProxy_document(void * jarg1) {
  void * jresult ;
  firebase::firestore::DocumentChange *arg1 = (firebase::firestore::DocumentChange *) 0 ;
  firebase::firestore::DocumentSnapshot result;
  
  arg1 = (firebase::firestore::DocumentChange *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__DocumentChange) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::DocumentChange const *)arg1)->document();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::DocumentSnapshot(result);
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL Firebase_Firestore_CSharp_DocumentChangeProxy_old_index(void * jarg1) {
  unsigned long jresult ;
  firebase::firestore::DocumentChange *arg1 = (firebase::firestore::DocumentChange *) 0 ;
  std::size_t result;
  
  arg1 = (firebase::firestore::DocumentChange *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__DocumentChange) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::DocumentChange const *)arg1)->old_index();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL Firebase_Firestore_CSharp_DocumentChangeProxy_new_index(void * jarg1) {
  unsigned long jresult ;
  firebase::firestore::DocumentChange *arg1 = (firebase::firestore::DocumentChange *) 0 ;
  std::size_t result;
  
  arg1 = (firebase::firestore::DocumentChange *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__DocumentChange) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::DocumentChange const *)arg1)->new_index();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_FieldValueProxy(void * jarg1) {
  firebase::firestore::FieldValue *arg1 = (firebase::firestore::FieldValue *) 0 ;
  
  arg1 = (firebase::firestore::FieldValue *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__FieldValue) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldValueProxy_Boolean(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  firebase::firestore::FieldValue result;
  
  arg1 = jarg1 ? true : false; 
  {
    try {
      result = firebase::firestore::FieldValue::Boolean(arg1);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::FieldValue(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldValueProxy_Integer(long long jarg1) {
  void * jresult ;
  int64_t arg1 ;
  firebase::firestore::FieldValue result;
  
  arg1 = (int64_t)jarg1; 
  {
    try {
      result = firebase::firestore::FieldValue::Integer(arg1);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::FieldValue(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldValueProxy_Double(double jarg1) {
  void * jresult ;
  double arg1 ;
  firebase::firestore::FieldValue result;
  
  arg1 = (double)jarg1; 
  {
    try {
      result = firebase::firestore::FieldValue::Double(arg1);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::FieldValue(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldValueProxy_Timestamp(void * jarg1) {
  void * jresult ;
  firebase::Timestamp arg1 ;
  firebase::Timestamp *argp1 ;
  firebase::firestore::FieldValue result;
  
  argp1 = (firebase::Timestamp *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null firebase::Timestamp", 0);
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = firebase::firestore::FieldValue::Timestamp(arg1);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::FieldValue(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldValueProxy_String(char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  firebase::firestore::FieldValue result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  {
    try {
      result = firebase::firestore::FieldValue::String(arg1);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::FieldValue(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldValueProxy_Blob(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  size_t arg2 ;
  firebase::firestore::FieldValue result;
  
  arg1 = (uint8_t *)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = firebase::firestore::FieldValue::Blob((unsigned char const *)arg1,arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::FieldValue(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldValueProxy_Reference(void * jarg1) {
  void * jresult ;
  firebase::firestore::DocumentReference arg1 ;
  firebase::firestore::DocumentReference *argp1 ;
  firebase::firestore::FieldValue result;
  
  argp1 = (firebase::firestore::DocumentReference *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null firebase::firestore::DocumentReference", 0);
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = firebase::firestore::FieldValue::Reference(arg1);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::FieldValue(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldValueProxy_GeoPoint(void * jarg1) {
  void * jresult ;
  firebase::firestore::GeoPoint arg1 ;
  firebase::firestore::GeoPoint *argp1 ;
  firebase::firestore::FieldValue result;
  
  argp1 = (firebase::firestore::GeoPoint *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null firebase::firestore::GeoPoint", 0);
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = firebase::firestore::FieldValue::GeoPoint(arg1);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::FieldValue(result);
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL Firebase_Firestore_CSharp_FieldValueProxy_type(void * jarg1) {
  int jresult ;
  firebase::firestore::FieldValue *arg1 = (firebase::firestore::FieldValue *) 0 ;
  firebase::firestore::FieldValue::Type result;
  
  arg1 = (firebase::firestore::FieldValue *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__FieldValue) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (firebase::firestore::FieldValue::Type)((firebase::firestore::FieldValue const *)arg1)->type();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL Firebase_Firestore_CSharp_FieldValueProxy_is_null(void * jarg1) {
  unsigned int jresult ;
  firebase::firestore::FieldValue *arg1 = (firebase::firestore::FieldValue *) 0 ;
  bool result;
  
  arg1 = (firebase::firestore::FieldValue *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__FieldValue) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (bool)((firebase::firestore::FieldValue const *)arg1)->is_null();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL Firebase_Firestore_CSharp_FieldValueProxy_is_array(void * jarg1) {
  unsigned int jresult ;
  firebase::firestore::FieldValue *arg1 = (firebase::firestore::FieldValue *) 0 ;
  bool result;
  
  arg1 = (firebase::firestore::FieldValue *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__FieldValue) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (bool)((firebase::firestore::FieldValue const *)arg1)->is_array();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL Firebase_Firestore_CSharp_FieldValueProxy_is_map(void * jarg1) {
  unsigned int jresult ;
  firebase::firestore::FieldValue *arg1 = (firebase::firestore::FieldValue *) 0 ;
  bool result;
  
  arg1 = (firebase::firestore::FieldValue *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__FieldValue) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (bool)((firebase::firestore::FieldValue const *)arg1)->is_map();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL Firebase_Firestore_CSharp_FieldValueProxy_boolean_value(void * jarg1) {
  unsigned int jresult ;
  firebase::firestore::FieldValue *arg1 = (firebase::firestore::FieldValue *) 0 ;
  bool result;
  
  arg1 = (firebase::firestore::FieldValue *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__FieldValue) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (bool)((firebase::firestore::FieldValue const *)arg1)->boolean_value();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL Firebase_Firestore_CSharp_FieldValueProxy_integer_value(void * jarg1) {
  long long jresult ;
  firebase::firestore::FieldValue *arg1 = (firebase::firestore::FieldValue *) 0 ;
  int64_t result;
  
  arg1 = (firebase::firestore::FieldValue *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__FieldValue) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (int64_t)((firebase::firestore::FieldValue const *)arg1)->integer_value();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL Firebase_Firestore_CSharp_FieldValueProxy_double_value(void * jarg1) {
  double jresult ;
  firebase::firestore::FieldValue *arg1 = (firebase::firestore::FieldValue *) 0 ;
  double result;
  
  arg1 = (firebase::firestore::FieldValue *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__FieldValue) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (double)((firebase::firestore::FieldValue const *)arg1)->double_value();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldValueProxy_timestamp_value(void * jarg1) {
  void * jresult ;
  firebase::firestore::FieldValue *arg1 = (firebase::firestore::FieldValue *) 0 ;
  firebase::Timestamp result;
  
  arg1 = (firebase::firestore::FieldValue *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__FieldValue) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::FieldValue const *)arg1)->timestamp_value();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::Timestamp(result);
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL Firebase_Firestore_CSharp_FieldValueProxy_string_value(void * jarg1) {
  char * jresult ;
  firebase::firestore::FieldValue *arg1 = (firebase::firestore::FieldValue *) 0 ;
  std::string result;
  
  arg1 = (firebase::firestore::FieldValue *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__FieldValue) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::FieldValue const *)arg1)->string_value();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldValueProxy_blob_value(void * jarg1) {
  void * jresult ;
  firebase::firestore::FieldValue *arg1 = (firebase::firestore::FieldValue *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (firebase::firestore::FieldValue *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__FieldValue) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (uint8_t *)((firebase::firestore::FieldValue const *)arg1)->blob_value();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL Firebase_Firestore_CSharp_FieldValueProxy_blob_size(void * jarg1) {
  unsigned long jresult ;
  firebase::firestore::FieldValue *arg1 = (firebase::firestore::FieldValue *) 0 ;
  size_t result;
  
  arg1 = (firebase::firestore::FieldValue *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__FieldValue) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::FieldValue const *)arg1)->blob_size();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldValueProxy_reference_value(void * jarg1) {
  void * jresult ;
  firebase::firestore::FieldValue *arg1 = (firebase::firestore::FieldValue *) 0 ;
  firebase::firestore::DocumentReference result;
  
  arg1 = (firebase::firestore::FieldValue *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__FieldValue) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::FieldValue const *)arg1)->reference_value();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::DocumentReference(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldValueProxy_geo_point_value(void * jarg1) {
  void * jresult ;
  firebase::firestore::FieldValue *arg1 = (firebase::firestore::FieldValue *) 0 ;
  firebase::firestore::GeoPoint result;
  
  arg1 = (firebase::firestore::FieldValue *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__FieldValue) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::FieldValue const *)arg1)->geo_point_value();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::GeoPoint(result);
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL Firebase_Firestore_CSharp_FieldValueProxy_is_valid(void * jarg1) {
  unsigned int jresult ;
  firebase::firestore::FieldValue *arg1 = (firebase::firestore::FieldValue *) 0 ;
  bool result;
  
  arg1 = (firebase::firestore::FieldValue *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__FieldValue) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (bool)((firebase::firestore::FieldValue const *)arg1)->is_valid();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldValueProxy_Null() {
  void * jresult ;
  firebase::firestore::FieldValue result;
  
  {
    try {
      result = firebase::firestore::FieldValue::Null();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::FieldValue(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldValueProxy_Delete() {
  void * jresult ;
  firebase::firestore::FieldValue result;
  
  {
    try {
      result = firebase::firestore::FieldValue::Delete();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::FieldValue(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldValueProxy_ServerTimestamp() {
  void * jresult ;
  firebase::firestore::FieldValue result;
  
  {
    try {
      result = firebase::firestore::FieldValue::ServerTimestamp();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::FieldValue(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldValueProxy_IntegerIncrement(long long jarg1) {
  void * jresult ;
  long long arg1 ;
  firebase::firestore::FieldValue result;
  
  arg1 = (long long)jarg1; 
  {
    try {
      result = firebase::firestore::FieldValue::SWIGTEMPLATEDISAMBIGUATOR Increment< int64_t,0 >(arg1);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::FieldValue(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldValueProxy_DoubleIncrement(double jarg1) {
  void * jresult ;
  double arg1 ;
  firebase::firestore::FieldValue result;
  
  arg1 = (double)jarg1; 
  {
    try {
      result = firebase::firestore::FieldValue::SWIGTEMPLATEDISAMBIGUATOR Increment< double,0 >(arg1);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::FieldValue(result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_WriteBatchProxy(void * jarg1) {
  firebase::firestore::WriteBatch *arg1 = (firebase::firestore::WriteBatch *) 0 ;
  
  arg1 = (firebase::firestore::WriteBatch *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__WriteBatch) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_WriteBatchProxy_Delete(void * jarg1, void * jarg2) {
  void * jresult ;
  firebase::firestore::WriteBatch *arg1 = (firebase::firestore::WriteBatch *) 0 ;
  firebase::firestore::DocumentReference *arg2 = 0 ;
  firebase::firestore::WriteBatch *result = 0 ;
  
  arg1 = (firebase::firestore::WriteBatch *)jarg1; 
  arg2 = (firebase::firestore::DocumentReference *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::DocumentReference const & type is null", 0);
    return 0;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__WriteBatch) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (firebase::firestore::WriteBatch *) &(arg1)->Delete((firebase::firestore::DocumentReference const &)*arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_WriteBatchProxy_Commit(void * jarg1) {
  void * jresult ;
  firebase::firestore::WriteBatch *arg1 = (firebase::firestore::WriteBatch *) 0 ;
  firebase::Future< void > result;
  
  arg1 = (firebase::firestore::WriteBatch *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__WriteBatch) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (arg1)->Commit();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::Future< void >(result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_QueryProxy(void * jarg1) {
  firebase::firestore::Query *arg1 = (firebase::firestore::Query *) 0 ;
  
  arg1 = (firebase::firestore::Query *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Query) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryProxy_WhereEqualTo__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  firebase::firestore::Query *arg1 = (firebase::firestore::Query *) 0 ;
  std::string *arg2 = 0 ;
  firebase::firestore::FieldValue *arg3 = 0 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (firebase::firestore::FieldValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return 0;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Query) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::Query const *)arg1)->WhereEqualTo((std::string const &)*arg2,(firebase::firestore::FieldValue const &)*arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryProxy_WhereEqualTo__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  firebase::firestore::Query *arg1 = (firebase::firestore::Query *) 0 ;
  firebase::firestore::FieldPath *arg2 = 0 ;
  firebase::firestore::FieldValue *arg3 = 0 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1; 
  arg2 = (firebase::firestore::FieldPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldPath const & type is null", 0);
    return 0;
  } 
  arg3 = (firebase::firestore::FieldValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return 0;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Query) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::Query const *)arg1)->WhereEqualTo((firebase::firestore::FieldPath const &)*arg2,(firebase::firestore::FieldValue const &)*arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryProxy_WhereNotEqualTo__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  firebase::firestore::Query *arg1 = (firebase::firestore::Query *) 0 ;
  std::string *arg2 = 0 ;
  firebase::firestore::FieldValue *arg3 = 0 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (firebase::firestore::FieldValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return 0;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Query) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::Query const *)arg1)->WhereNotEqualTo((std::string const &)*arg2,(firebase::firestore::FieldValue const &)*arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryProxy_WhereNotEqualTo__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  firebase::firestore::Query *arg1 = (firebase::firestore::Query *) 0 ;
  firebase::firestore::FieldPath *arg2 = 0 ;
  firebase::firestore::FieldValue *arg3 = 0 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1; 
  arg2 = (firebase::firestore::FieldPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldPath const & type is null", 0);
    return 0;
  } 
  arg3 = (firebase::firestore::FieldValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return 0;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Query) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::Query const *)arg1)->WhereNotEqualTo((firebase::firestore::FieldPath const &)*arg2,(firebase::firestore::FieldValue const &)*arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryProxy_WhereLessThan__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  firebase::firestore::Query *arg1 = (firebase::firestore::Query *) 0 ;
  std::string *arg2 = 0 ;
  firebase::firestore::FieldValue *arg3 = 0 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (firebase::firestore::FieldValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return 0;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Query) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::Query const *)arg1)->WhereLessThan((std::string const &)*arg2,(firebase::firestore::FieldValue const &)*arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryProxy_WhereLessThan__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  firebase::firestore::Query *arg1 = (firebase::firestore::Query *) 0 ;
  firebase::firestore::FieldPath *arg2 = 0 ;
  firebase::firestore::FieldValue *arg3 = 0 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1; 
  arg2 = (firebase::firestore::FieldPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldPath const & type is null", 0);
    return 0;
  } 
  arg3 = (firebase::firestore::FieldValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return 0;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Query) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::Query const *)arg1)->WhereLessThan((firebase::firestore::FieldPath const &)*arg2,(firebase::firestore::FieldValue const &)*arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryProxy_WhereLessThanOrEqualTo__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  firebase::firestore::Query *arg1 = (firebase::firestore::Query *) 0 ;
  std::string *arg2 = 0 ;
  firebase::firestore::FieldValue *arg3 = 0 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (firebase::firestore::FieldValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return 0;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Query) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::Query const *)arg1)->WhereLessThanOrEqualTo((std::string const &)*arg2,(firebase::firestore::FieldValue const &)*arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryProxy_WhereLessThanOrEqualTo__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  firebase::firestore::Query *arg1 = (firebase::firestore::Query *) 0 ;
  firebase::firestore::FieldPath *arg2 = 0 ;
  firebase::firestore::FieldValue *arg3 = 0 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1; 
  arg2 = (firebase::firestore::FieldPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldPath const & type is null", 0);
    return 0;
  } 
  arg3 = (firebase::firestore::FieldValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return 0;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Query) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::Query const *)arg1)->WhereLessThanOrEqualTo((firebase::firestore::FieldPath const &)*arg2,(firebase::firestore::FieldValue const &)*arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryProxy_WhereGreaterThan__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  firebase::firestore::Query *arg1 = (firebase::firestore::Query *) 0 ;
  std::string *arg2 = 0 ;
  firebase::firestore::FieldValue *arg3 = 0 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (firebase::firestore::FieldValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return 0;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Query) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::Query const *)arg1)->WhereGreaterThan((std::string const &)*arg2,(firebase::firestore::FieldValue const &)*arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryProxy_WhereGreaterThan__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  firebase::firestore::Query *arg1 = (firebase::firestore::Query *) 0 ;
  firebase::firestore::FieldPath *arg2 = 0 ;
  firebase::firestore::FieldValue *arg3 = 0 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1; 
  arg2 = (firebase::firestore::FieldPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldPath const & type is null", 0);
    return 0;
  } 
  arg3 = (firebase::firestore::FieldValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return 0;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Query) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::Query const *)arg1)->WhereGreaterThan((firebase::firestore::FieldPath const &)*arg2,(firebase::firestore::FieldValue const &)*arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryProxy_WhereGreaterThanOrEqualTo__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  firebase::firestore::Query *arg1 = (firebase::firestore::Query *) 0 ;
  std::string *arg2 = 0 ;
  firebase::firestore::FieldValue *arg3 = 0 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (firebase::firestore::FieldValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return 0;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Query) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::Query const *)arg1)->WhereGreaterThanOrEqualTo((std::string const &)*arg2,(firebase::firestore::FieldValue const &)*arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryProxy_WhereGreaterThanOrEqualTo__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  firebase::firestore::Query *arg1 = (firebase::firestore::Query *) 0 ;
  firebase::firestore::FieldPath *arg2 = 0 ;
  firebase::firestore::FieldValue *arg3 = 0 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1; 
  arg2 = (firebase::firestore::FieldPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldPath const & type is null", 0);
    return 0;
  } 
  arg3 = (firebase::firestore::FieldValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return 0;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Query) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::Query const *)arg1)->WhereGreaterThanOrEqualTo((firebase::firestore::FieldPath const &)*arg2,(firebase::firestore::FieldValue const &)*arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryProxy_WhereArrayContains__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  firebase::firestore::Query *arg1 = (firebase::firestore::Query *) 0 ;
  std::string *arg2 = 0 ;
  firebase::firestore::FieldValue *arg3 = 0 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (firebase::firestore::FieldValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return 0;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Query) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::Query const *)arg1)->WhereArrayContains((std::string const &)*arg2,(firebase::firestore::FieldValue const &)*arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryProxy_WhereArrayContains__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  firebase::firestore::Query *arg1 = (firebase::firestore::Query *) 0 ;
  firebase::firestore::FieldPath *arg2 = 0 ;
  firebase::firestore::FieldValue *arg3 = 0 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1; 
  arg2 = (firebase::firestore::FieldPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldPath const & type is null", 0);
    return 0;
  } 
  arg3 = (firebase::firestore::FieldValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return 0;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Query) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::Query const *)arg1)->WhereArrayContains((firebase::firestore::FieldPath const &)*arg2,(firebase::firestore::FieldValue const &)*arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryProxy_OrderBy__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  firebase::firestore::Query *arg1 = (firebase::firestore::Query *) 0 ;
  std::string *arg2 = 0 ;
  firebase::firestore::Query::Direction arg3 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (firebase::firestore::Query::Direction)jarg3; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Query) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::Query const *)arg1)->OrderBy((std::string const &)*arg2,arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryProxy_OrderBy__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  firebase::firestore::Query *arg1 = (firebase::firestore::Query *) 0 ;
  std::string *arg2 = 0 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Query) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::Query const *)arg1)->OrderBy((std::string const &)*arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryProxy_OrderBy__SWIG_2(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  firebase::firestore::Query *arg1 = (firebase::firestore::Query *) 0 ;
  firebase::firestore::FieldPath *arg2 = 0 ;
  firebase::firestore::Query::Direction arg3 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1; 
  arg2 = (firebase::firestore::FieldPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldPath const & type is null", 0);
    return 0;
  } 
  arg3 = (firebase::firestore::Query::Direction)jarg3; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Query) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::Query const *)arg1)->OrderBy((firebase::firestore::FieldPath const &)*arg2,arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryProxy_OrderBy__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  firebase::firestore::Query *arg1 = (firebase::firestore::Query *) 0 ;
  firebase::firestore::FieldPath *arg2 = 0 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1; 
  arg2 = (firebase::firestore::FieldPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldPath const & type is null", 0);
    return 0;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Query) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::Query const *)arg1)->OrderBy((firebase::firestore::FieldPath const &)*arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryProxy_Limit(void * jarg1, int jarg2) {
  void * jresult ;
  firebase::firestore::Query *arg1 = (firebase::firestore::Query *) 0 ;
  int32_t arg2 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1; 
  arg2 = (int32_t)jarg2; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Query) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::Query const *)arg1)->Limit(arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryProxy_LimitToLast(void * jarg1, int jarg2) {
  void * jresult ;
  firebase::firestore::Query *arg1 = (firebase::firestore::Query *) 0 ;
  int32_t arg2 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1; 
  arg2 = (int32_t)jarg2; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Query) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::Query const *)arg1)->LimitToLast(arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryProxy_StartAt(void * jarg1, void * jarg2) {
  void * jresult ;
  firebase::firestore::Query *arg1 = (firebase::firestore::Query *) 0 ;
  firebase::firestore::DocumentSnapshot *arg2 = 0 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1; 
  arg2 = (firebase::firestore::DocumentSnapshot *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::DocumentSnapshot const & type is null", 0);
    return 0;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Query) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::Query const *)arg1)->StartAt((firebase::firestore::DocumentSnapshot const &)*arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryProxy_StartAfter(void * jarg1, void * jarg2) {
  void * jresult ;
  firebase::firestore::Query *arg1 = (firebase::firestore::Query *) 0 ;
  firebase::firestore::DocumentSnapshot *arg2 = 0 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1; 
  arg2 = (firebase::firestore::DocumentSnapshot *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::DocumentSnapshot const & type is null", 0);
    return 0;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Query) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::Query const *)arg1)->StartAfter((firebase::firestore::DocumentSnapshot const &)*arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryProxy_EndBefore(void * jarg1, void * jarg2) {
  void * jresult ;
  firebase::firestore::Query *arg1 = (firebase::firestore::Query *) 0 ;
  firebase::firestore::DocumentSnapshot *arg2 = 0 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1; 
  arg2 = (firebase::firestore::DocumentSnapshot *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::DocumentSnapshot const & type is null", 0);
    return 0;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Query) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::Query const *)arg1)->EndBefore((firebase::firestore::DocumentSnapshot const &)*arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryProxy_EndAt(void * jarg1, void * jarg2) {
  void * jresult ;
  firebase::firestore::Query *arg1 = (firebase::firestore::Query *) 0 ;
  firebase::firestore::DocumentSnapshot *arg2 = 0 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1; 
  arg2 = (firebase::firestore::DocumentSnapshot *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::DocumentSnapshot const & type is null", 0);
    return 0;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Query) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::Query const *)arg1)->EndAt((firebase::firestore::DocumentSnapshot const &)*arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryProxy_Get__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  firebase::firestore::Query *arg1 = (firebase::firestore::Query *) 0 ;
  firebase::firestore::Source arg2 ;
  firebase::Future< firebase::firestore::QuerySnapshot > result;
  
  arg1 = (firebase::firestore::Query *)jarg1; 
  arg2 = (firebase::firestore::Source)jarg2; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Query) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::Query const *)arg1)->Get(arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::Future< firebase::firestore::QuerySnapshot >(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryProxy_Get__SWIG_1(void * jarg1) {
  void * jresult ;
  firebase::firestore::Query *arg1 = (firebase::firestore::Query *) 0 ;
  firebase::Future< firebase::firestore::QuerySnapshot > result;
  
  arg1 = (firebase::firestore::Query *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Query) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::Query const *)arg1)->Get();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::Future< firebase::firestore::QuerySnapshot >(result);
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL Firebase_Firestore_CSharp_CollectionReferenceProxy_id(void * jarg1) {
  char * jresult ;
  firebase::firestore::CollectionReference *arg1 = (firebase::firestore::CollectionReference *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (firebase::firestore::CollectionReference *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__CollectionReference) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (std::string *) &((firebase::firestore::CollectionReference const *)arg1)->id();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL Firebase_Firestore_CSharp_CollectionReferenceProxy_path(void * jarg1) {
  char * jresult ;
  firebase::firestore::CollectionReference *arg1 = (firebase::firestore::CollectionReference *) 0 ;
  std::string result;
  
  arg1 = (firebase::firestore::CollectionReference *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__CollectionReference) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::CollectionReference const *)arg1)->path();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_CollectionReferenceProxy_Parent(void * jarg1) {
  void * jresult ;
  firebase::firestore::CollectionReference *arg1 = (firebase::firestore::CollectionReference *) 0 ;
  firebase::firestore::DocumentReference result;
  
  arg1 = (firebase::firestore::CollectionReference *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__CollectionReference) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::CollectionReference const *)arg1)->Parent();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::DocumentReference(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_CollectionReferenceProxy_Document__SWIG_0(void * jarg1) {
  void * jresult ;
  firebase::firestore::CollectionReference *arg1 = (firebase::firestore::CollectionReference *) 0 ;
  firebase::firestore::DocumentReference result;
  
  arg1 = (firebase::firestore::CollectionReference *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__CollectionReference) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::CollectionReference const *)arg1)->Document();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::DocumentReference(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_CollectionReferenceProxy_Document__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  firebase::firestore::CollectionReference *arg1 = (firebase::firestore::CollectionReference *) 0 ;
  char *arg2 = (char *) 0 ;
  firebase::firestore::DocumentReference result;
  
  arg1 = (firebase::firestore::CollectionReference *)jarg1; 
  arg2 = (char *)jarg2; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__CollectionReference) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::CollectionReference const *)arg1)->Document((char const *)arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::DocumentReference(result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_CollectionReferenceProxy(void * jarg1) {
  firebase::firestore::CollectionReference *arg1 = (firebase::firestore::CollectionReference *) 0 ;
  
  arg1 = (firebase::firestore::CollectionReference *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__CollectionReference) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_QuerySnapshotProxy(void * jarg1) {
  firebase::firestore::QuerySnapshot *arg1 = (firebase::firestore::QuerySnapshot *) 0 ;
  
  arg1 = (firebase::firestore::QuerySnapshot *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__QuerySnapshot) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QuerySnapshotProxy_query(void * jarg1) {
  void * jresult ;
  firebase::firestore::QuerySnapshot *arg1 = (firebase::firestore::QuerySnapshot *) 0 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::QuerySnapshot *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__QuerySnapshot) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::QuerySnapshot const *)arg1)->query();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QuerySnapshotProxy_metadata(void * jarg1) {
  void * jresult ;
  firebase::firestore::QuerySnapshot *arg1 = (firebase::firestore::QuerySnapshot *) 0 ;
  firebase::firestore::SnapshotMetadata result;
  
  arg1 = (firebase::firestore::QuerySnapshot *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__QuerySnapshot) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::QuerySnapshot const *)arg1)->metadata();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::SnapshotMetadata(result);
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL Firebase_Firestore_CSharp_QuerySnapshotProxy_size(void * jarg1) {
  unsigned long jresult ;
  firebase::firestore::QuerySnapshot *arg1 = (firebase::firestore::QuerySnapshot *) 0 ;
  std::size_t result;
  
  arg1 = (firebase::firestore::QuerySnapshot *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__QuerySnapshot) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::QuerySnapshot const *)arg1)->size();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL Firebase_Firestore_CSharp_SettingsProxy_kCacheSizeUnlimited_get() {
  long long jresult ;
  long long result;
  
  result = (long long)firebase::firestore::Settings::kCacheSizeUnlimited;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_new_SettingsProxy__SWIG_0() {
  void * jresult ;
  firebase::firestore::Settings *result = 0 ;
  
  {
    try {
      result = (firebase::firestore::Settings *)new firebase::firestore::Settings();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_new_SettingsProxy__SWIG_1(void * jarg1) {
  void * jresult ;
  firebase::firestore::Settings *arg1 = 0 ;
  firebase::firestore::Settings *result = 0 ;
  
  arg1 = (firebase::firestore::Settings *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::Settings const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (firebase::firestore::Settings *)new firebase::firestore::Settings((firebase::firestore::Settings const &)*arg1);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL Firebase_Firestore_CSharp_SettingsProxy_host(void * jarg1) {
  char * jresult ;
  firebase::firestore::Settings *arg1 = (firebase::firestore::Settings *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (firebase::firestore::Settings *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Settings) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (std::string *) &((firebase::firestore::Settings const *)arg1)->host();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL Firebase_Firestore_CSharp_SettingsProxy_is_ssl_enabled(void * jarg1) {
  unsigned int jresult ;
  firebase::firestore::Settings *arg1 = (firebase::firestore::Settings *) 0 ;
  bool result;
  
  arg1 = (firebase::firestore::Settings *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Settings) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (bool)((firebase::firestore::Settings const *)arg1)->is_ssl_enabled();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL Firebase_Firestore_CSharp_SettingsProxy_is_persistence_enabled(void * jarg1) {
  unsigned int jresult ;
  firebase::firestore::Settings *arg1 = (firebase::firestore::Settings *) 0 ;
  bool result;
  
  arg1 = (firebase::firestore::Settings *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Settings) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (bool)((firebase::firestore::Settings const *)arg1)->is_persistence_enabled();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL Firebase_Firestore_CSharp_SettingsProxy_cache_size_bytes(void * jarg1) {
  long long jresult ;
  firebase::firestore::Settings *arg1 = (firebase::firestore::Settings *) 0 ;
  int64_t result;
  
  arg1 = (firebase::firestore::Settings *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Settings) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (int64_t)((firebase::firestore::Settings const *)arg1)->cache_size_bytes();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_SettingsProxy_set_host(void * jarg1, char * jarg2) {
  firebase::firestore::Settings *arg1 = (firebase::firestore::Settings *) 0 ;
  std::string arg2 ;
  
  arg1 = (firebase::firestore::Settings *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Settings) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      (arg1)->set_host(arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_SettingsProxy_set_ssl_enabled(void * jarg1, unsigned int jarg2) {
  firebase::firestore::Settings *arg1 = (firebase::firestore::Settings *) 0 ;
  bool arg2 ;
  
  arg1 = (firebase::firestore::Settings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Settings) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      (arg1)->set_ssl_enabled(arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_SettingsProxy_set_persistence_enabled(void * jarg1, unsigned int jarg2) {
  firebase::firestore::Settings *arg1 = (firebase::firestore::Settings *) 0 ;
  bool arg2 ;
  
  arg1 = (firebase::firestore::Settings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Settings) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      (arg1)->set_persistence_enabled(arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_SettingsProxy_set_cache_size_bytes(void * jarg1, long long jarg2) {
  firebase::firestore::Settings *arg1 = (firebase::firestore::Settings *) 0 ;
  int64_t arg2 ;
  
  arg1 = (firebase::firestore::Settings *)jarg1; 
  arg2 = (int64_t)jarg2; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Settings) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      (arg1)->set_cache_size_bytes(arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_SettingsProxy(void * jarg1) {
  firebase::firestore::Settings *arg1 = (firebase::firestore::Settings *) 0 ;
  
  arg1 = (firebase::firestore::Settings *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Settings) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT int SWIGSTDCALL Firebase_Firestore_CSharp_LoadBundleTaskProgressProxy_documents_loaded(void * jarg1) {
  int jresult ;
  firebase::firestore::LoadBundleTaskProgress *arg1 = (firebase::firestore::LoadBundleTaskProgress *) 0 ;
  int32_t result;
  
  arg1 = (firebase::firestore::LoadBundleTaskProgress *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__LoadBundleTaskProgress) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (int32_t)((firebase::firestore::LoadBundleTaskProgress const *)arg1)->documents_loaded();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL Firebase_Firestore_CSharp_LoadBundleTaskProgressProxy_total_documents(void * jarg1) {
  int jresult ;
  firebase::firestore::LoadBundleTaskProgress *arg1 = (firebase::firestore::LoadBundleTaskProgress *) 0 ;
  int32_t result;
  
  arg1 = (firebase::firestore::LoadBundleTaskProgress *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__LoadBundleTaskProgress) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (int32_t)((firebase::firestore::LoadBundleTaskProgress const *)arg1)->total_documents();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL Firebase_Firestore_CSharp_LoadBundleTaskProgressProxy_bytes_loaded(void * jarg1) {
  long long jresult ;
  firebase::firestore::LoadBundleTaskProgress *arg1 = (firebase::firestore::LoadBundleTaskProgress *) 0 ;
  int64_t result;
  
  arg1 = (firebase::firestore::LoadBundleTaskProgress *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__LoadBundleTaskProgress) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (int64_t)((firebase::firestore::LoadBundleTaskProgress const *)arg1)->bytes_loaded();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL Firebase_Firestore_CSharp_LoadBundleTaskProgressProxy_total_bytes(void * jarg1) {
  long long jresult ;
  firebase::firestore::LoadBundleTaskProgress *arg1 = (firebase::firestore::LoadBundleTaskProgress *) 0 ;
  int64_t result;
  
  arg1 = (firebase::firestore::LoadBundleTaskProgress *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__LoadBundleTaskProgress) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (int64_t)((firebase::firestore::LoadBundleTaskProgress const *)arg1)->total_bytes();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL Firebase_Firestore_CSharp_LoadBundleTaskProgressProxy_state(void * jarg1) {
  int jresult ;
  firebase::firestore::LoadBundleTaskProgress *arg1 = (firebase::firestore::LoadBundleTaskProgress *) 0 ;
  firebase::firestore::LoadBundleTaskProgress::State result;
  
  arg1 = (firebase::firestore::LoadBundleTaskProgress *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__LoadBundleTaskProgress) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (firebase::firestore::LoadBundleTaskProgress::State)((firebase::firestore::LoadBundleTaskProgress const *)arg1)->state();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_LoadBundleTaskProgressProxy(void * jarg1) {
  firebase::firestore::LoadBundleTaskProgress *arg1 = (firebase::firestore::LoadBundleTaskProgress *) 0 ;
  
  arg1 = (firebase::firestore::LoadBundleTaskProgress *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__LoadBundleTaskProgress) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_FirestoreProxy(void * jarg1) {
  firebase::firestore::Firestore *arg1 = (firebase::firestore::Firestore *) 0 ;
  
  arg1 = (firebase::firestore::Firestore *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Firestore) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FirestoreProxy_app__SWIG_0(void * jarg1) {
  void * jresult ;
  firebase::firestore::Firestore *arg1 = (firebase::firestore::Firestore *) 0 ;
  firebase::App *result = 0 ;
  
  arg1 = (firebase::firestore::Firestore *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Firestore) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (firebase::App *)((firebase::firestore::Firestore const *)arg1)->app();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FirestoreProxy_Collection__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  firebase::firestore::Firestore *arg1 = (firebase::firestore::Firestore *) 0 ;
  char *arg2 = (char *) 0 ;
  firebase::firestore::CollectionReference result;
  
  arg1 = (firebase::firestore::Firestore *)jarg1; 
  arg2 = (char *)jarg2; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Firestore) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::Firestore const *)arg1)->Collection((char const *)arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::CollectionReference(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FirestoreProxy_Document__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  firebase::firestore::Firestore *arg1 = (firebase::firestore::Firestore *) 0 ;
  char *arg2 = (char *) 0 ;
  firebase::firestore::DocumentReference result;
  
  arg1 = (firebase::firestore::Firestore *)jarg1; 
  arg2 = (char *)jarg2; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Firestore) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::Firestore const *)arg1)->Document((char const *)arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::DocumentReference(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FirestoreProxy_CollectionGroup__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  firebase::firestore::Firestore *arg1 = (firebase::firestore::Firestore *) 0 ;
  char *arg2 = (char *) 0 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Firestore *)jarg1; 
  arg2 = (char *)jarg2; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Firestore) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::Firestore const *)arg1)->CollectionGroup((char const *)arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FirestoreProxy_settings(void * jarg1) {
  void * jresult ;
  firebase::firestore::Firestore *arg1 = (firebase::firestore::Firestore *) 0 ;
  firebase::firestore::Settings result;
  
  arg1 = (firebase::firestore::Firestore *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Firestore) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::Firestore const *)arg1)->settings();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Settings(result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_FirestoreProxy_set_settings(void * jarg1, void * jarg2) {
  firebase::firestore::Firestore *arg1 = (firebase::firestore::Firestore *) 0 ;
  firebase::firestore::Settings arg2 ;
  firebase::firestore::Settings *argp2 ;
  
  arg1 = (firebase::firestore::Firestore *)jarg1; 
  argp2 = (firebase::firestore::Settings *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null firebase::firestore::Settings", 0);
    return ;
  }
  arg2 = *argp2; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Firestore) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      (arg1)->set_settings(arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FirestoreProxy_batch(void * jarg1) {
  void * jresult ;
  firebase::firestore::Firestore *arg1 = (firebase::firestore::Firestore *) 0 ;
  firebase::firestore::WriteBatch result;
  
  arg1 = (firebase::firestore::Firestore *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Firestore) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::Firestore const *)arg1)->batch();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::WriteBatch(result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_FirestoreProxy_set_log_level(int jarg1) {
  firebase::LogLevel arg1 ;
  
  arg1 = (firebase::LogLevel)jarg1; 
  {
    try {
      firebase::firestore::Firestore::set_log_level(arg1);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FirestoreProxy_DisableNetwork(void * jarg1) {
  void * jresult ;
  firebase::firestore::Firestore *arg1 = (firebase::firestore::Firestore *) 0 ;
  firebase::Future< void > result;
  
  arg1 = (firebase::firestore::Firestore *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Firestore) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (arg1)->DisableNetwork();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::Future< void >(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FirestoreProxy_EnableNetwork(void * jarg1) {
  void * jresult ;
  firebase::firestore::Firestore *arg1 = (firebase::firestore::Firestore *) 0 ;
  firebase::Future< void > result;
  
  arg1 = (firebase::firestore::Firestore *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Firestore) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (arg1)->EnableNetwork();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::Future< void >(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FirestoreProxy_Terminate(void * jarg1) {
  void * jresult ;
  firebase::firestore::Firestore *arg1 = (firebase::firestore::Firestore *) 0 ;
  firebase::Future< void > result;
  
  arg1 = (firebase::firestore::Firestore *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Firestore) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (arg1)->Terminate();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::Future< void >(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FirestoreProxy_WaitForPendingWrites(void * jarg1) {
  void * jresult ;
  firebase::firestore::Firestore *arg1 = (firebase::firestore::Firestore *) 0 ;
  firebase::Future< void > result;
  
  arg1 = (firebase::firestore::Firestore *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Firestore) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (arg1)->WaitForPendingWrites();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::Future< void >(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FirestoreProxy_ClearPersistence(void * jarg1) {
  void * jresult ;
  firebase::firestore::Firestore *arg1 = (firebase::firestore::Firestore *) 0 ;
  firebase::Future< void > result;
  
  arg1 = (firebase::firestore::Firestore *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Firestore) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (arg1)->ClearPersistence();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::Future< void >(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FirestoreProxy_NamedQuery(void * jarg1, char * jarg2) {
  void * jresult ;
  firebase::firestore::Firestore *arg1 = (firebase::firestore::Firestore *) 0 ;
  std::string *arg2 = 0 ;
  firebase::Future< firebase::firestore::Query > result;
  
  arg1 = (firebase::firestore::Firestore *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__Firestore) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (arg1)->NamedQuery((std::string const &)*arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::Future< firebase::firestore::Query >(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_AddDocumentSnapshotListener(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  void * jresult ;
  firebase::firestore::DocumentReference *arg1 = (firebase::firestore::DocumentReference *) 0 ;
  firebase::firestore::MetadataChanges arg2 ;
  int32_t arg3 ;
  firebase::firestore::csharp::DocumentEventListenerCallback arg4 = (firebase::firestore::csharp::DocumentEventListenerCallback) 0 ;
  firebase::firestore::ListenerRegistration result;
  
  arg1 = (firebase::firestore::DocumentReference *)jarg1; 
  arg2 = (firebase::firestore::MetadataChanges)jarg2; 
  arg3 = (int32_t)jarg3; 
  
  arg4 = (firebase::firestore::csharp::DocumentEventListenerCallback)jarg4;
  
  {
    try {
      result = firebase::firestore::csharp::AddDocumentSnapshotListener(arg1,arg2,arg3,arg4);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::ListenerRegistration(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_AddQuerySnapshotListener(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  void * jresult ;
  firebase::firestore::Query *arg1 = (firebase::firestore::Query *) 0 ;
  firebase::firestore::MetadataChanges arg2 ;
  int32_t arg3 ;
  firebase::firestore::csharp::QueryEventListenerCallback arg4 = (firebase::firestore::csharp::QueryEventListenerCallback) 0 ;
  firebase::firestore::ListenerRegistration result;
  
  arg1 = (firebase::firestore::Query *)jarg1; 
  arg2 = (firebase::firestore::MetadataChanges)jarg2; 
  arg3 = (int32_t)jarg3; 
  
  arg4 = (firebase::firestore::csharp::QueryEventListenerCallback)jarg4;
  
  {
    try {
      result = firebase::firestore::csharp::AddQuerySnapshotListener(arg1,arg2,arg3,arg4);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::ListenerRegistration(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_AddSnapshotsInSyncListener(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  firebase::firestore::Firestore *arg1 = (firebase::firestore::Firestore *) 0 ;
  int32_t arg2 ;
  firebase::firestore::csharp::SnapshotsInSyncCallback arg3 = (firebase::firestore::csharp::SnapshotsInSyncCallback) 0 ;
  firebase::firestore::ListenerRegistration result;
  
  arg1 = (firebase::firestore::Firestore *)jarg1; 
  arg2 = (int32_t)jarg2; 
  
  arg3 = (firebase::firestore::csharp::SnapshotsInSyncCallback)jarg3;
  
  {
    try {
      result = firebase::firestore::csharp::AddSnapshotsInSyncListener(arg1,arg2,arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::ListenerRegistration(result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_LoadBundleWithCallback(void * jarg1, char * jarg2, int jarg3, void * jarg4) {
  firebase::firestore::Firestore *arg1 = (firebase::firestore::Firestore *) 0 ;
  std::string *arg2 = 0 ;
  int32_t arg3 ;
  firebase::firestore::csharp::LoadBundleTaskProgressCallback arg4 = (firebase::firestore::csharp::LoadBundleTaskProgressCallback) 0 ;
  
  arg1 = (firebase::firestore::Firestore *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int32_t)jarg3; 
  
  arg4 = (firebase::firestore::csharp::LoadBundleTaskProgressCallback)jarg4;
  
  {
    try {
      firebase::firestore::csharp::LoadBundleWithCallback(arg1,(std::string const &)*arg2,arg3,arg4);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_GetFirestoreInstance(void * jarg1) {
  void * jresult ;
  firebase::App *arg1 = (firebase::App *) 0 ;
  firebase::firestore::Firestore *result = 0 ;
  
  arg1 = (firebase::App *)jarg1; 
  {
    try {
      result = (firebase::firestore::Firestore *)firebase::firestore::csharp::GetFirestoreInstance(arg1);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_ReleaseFirestoreInstance(void * jarg1) {
  firebase::firestore::Firestore *arg1 = (firebase::firestore::Firestore *) 0 ;
  
  arg1 = (firebase::firestore::Firestore *)jarg1; 
  {
    try {
      firebase::firestore::csharp::ReleaseFirestoreInstance(arg1);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_ApiHeaders_SetClientLanguage(char * jarg1) {
  std::string *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      firebase::firestore::csharp::ApiHeaders::SetClientLanguage((std::string const &)*arg1);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_new_ApiHeaders() {
  void * jresult ;
  firebase::firestore::csharp::ApiHeaders *result = 0 ;
  
  {
    try {
      result = (firebase::firestore::csharp::ApiHeaders *)new firebase::firestore::csharp::ApiHeaders();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_ApiHeaders(void * jarg1) {
  firebase::firestore::csharp::ApiHeaders *arg1 = (firebase::firestore::csharp::ApiHeaders *) 0 ;
  
  arg1 = (firebase::firestore::csharp::ApiHeaders *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__ApiHeaders) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_ConvertFieldValueToMap(void * jarg1) {
  void * jresult ;
  firebase::firestore::FieldValue *arg1 = 0 ;
  firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > result;
  
  arg1 = (firebase::firestore::FieldValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = firebase::firestore::csharp::ConvertFieldValueToMap((firebase::firestore::FieldValue const &)*arg1);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue >(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_ConvertMapToFieldValue(void * jarg1) {
  void * jresult ;
  firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > *arg1 = 0 ;
  firebase::firestore::FieldValue result;
  
  arg1 = (firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = firebase::firestore::csharp::ConvertMapToFieldValue((firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > const &)*arg1);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::FieldValue(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_ConvertSnapshotToFieldValue(void * jarg1, int jarg2) {
  void * jresult ;
  firebase::firestore::DocumentSnapshot *arg1 = 0 ;
  firebase::firestore::DocumentSnapshot::ServerTimestampBehavior arg2 ;
  firebase::firestore::FieldValue result;
  
  arg1 = (firebase::firestore::DocumentSnapshot *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::DocumentSnapshot const & type is null", 0);
    return 0;
  } 
  arg2 = (firebase::firestore::DocumentSnapshot::ServerTimestampBehavior)jarg2; 
  {
    try {
      result = firebase::firestore::csharp::ConvertSnapshotToFieldValue((firebase::firestore::DocumentSnapshot const &)*arg1,arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::FieldValue(result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_WriteBatchUpdate__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  firebase::firestore::WriteBatch *arg1 = (firebase::firestore::WriteBatch *) 0 ;
  firebase::firestore::DocumentReference *arg2 = 0 ;
  firebase::firestore::FieldValue *arg3 = 0 ;
  
  arg1 = (firebase::firestore::WriteBatch *)jarg1; 
  arg2 = (firebase::firestore::DocumentReference *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::DocumentReference const & type is null", 0);
    return ;
  } 
  arg3 = (firebase::firestore::FieldValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return ;
  } 
  {
    try {
      firebase::firestore::csharp::WriteBatchUpdate(arg1,(firebase::firestore::DocumentReference const &)*arg2,(firebase::firestore::FieldValue const &)*arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_WriteBatchUpdate__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  firebase::firestore::WriteBatch *arg1 = (firebase::firestore::WriteBatch *) 0 ;
  firebase::firestore::DocumentReference *arg2 = 0 ;
  firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > *arg3 = 0 ;
  
  arg1 = (firebase::firestore::WriteBatch *)jarg1; 
  arg2 = (firebase::firestore::DocumentReference *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::DocumentReference const & type is null", 0);
    return ;
  } 
  arg3 = (firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > const & type is null", 0);
    return ;
  } 
  {
    try {
      firebase::firestore::csharp::WriteBatchUpdate(arg1,(firebase::firestore::DocumentReference const &)*arg2,(firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > const &)*arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_WriteBatchUpdate__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  firebase::firestore::WriteBatch *arg1 = (firebase::firestore::WriteBatch *) 0 ;
  firebase::firestore::DocumentReference *arg2 = 0 ;
  firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > *arg3 = 0 ;
  
  arg1 = (firebase::firestore::WriteBatch *)jarg1; 
  arg2 = (firebase::firestore::DocumentReference *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::DocumentReference const & type is null", 0);
    return ;
  } 
  arg3 = (firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > const & type is null", 0);
    return ;
  } 
  {
    try {
      firebase::firestore::csharp::WriteBatchUpdate(arg1,(firebase::firestore::DocumentReference const &)*arg2,(firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > const &)*arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_DocumentReferenceSet(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  firebase::firestore::DocumentReference *arg1 = 0 ;
  firebase::firestore::FieldValue *arg2 = 0 ;
  firebase::firestore::SetOptions *arg3 = 0 ;
  firebase::Future< void > result;
  
  arg1 = (firebase::firestore::DocumentReference *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::DocumentReference & type is null", 0);
    return 0;
  } 
  arg2 = (firebase::firestore::FieldValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return 0;
  } 
  arg3 = (firebase::firestore::SetOptions *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::SetOptions const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = firebase::firestore::csharp::DocumentReferenceSet(*arg1,(firebase::firestore::FieldValue const &)*arg2,(firebase::firestore::SetOptions const &)*arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::Future< void >(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_DocumentReferenceUpdate__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  firebase::firestore::DocumentReference *arg1 = 0 ;
  firebase::firestore::FieldValue *arg2 = 0 ;
  firebase::Future< void > result;
  
  arg1 = (firebase::firestore::DocumentReference *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::DocumentReference & type is null", 0);
    return 0;
  } 
  arg2 = (firebase::firestore::FieldValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = firebase::firestore::csharp::DocumentReferenceUpdate(*arg1,(firebase::firestore::FieldValue const &)*arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::Future< void >(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_DocumentReferenceUpdate__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  firebase::firestore::DocumentReference *arg1 = 0 ;
  firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > *arg2 = 0 ;
  firebase::Future< void > result;
  
  arg1 = (firebase::firestore::DocumentReference *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::DocumentReference & type is null", 0);
    return 0;
  } 
  arg2 = (firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = firebase::firestore::csharp::DocumentReferenceUpdate(*arg1,(firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > const &)*arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::Future< void >(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryWhereArrayContainsAny__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  firebase::firestore::Query *arg1 = 0 ;
  std::string *arg2 = 0 ;
  firebase::firestore::FieldValue *arg3 = 0 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::Query & type is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (firebase::firestore::FieldValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = firebase::firestore::csharp::QueryWhereArrayContainsAny(*arg1,(std::string const &)*arg2,(firebase::firestore::FieldValue const &)*arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryWhereArrayContainsAny__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  firebase::firestore::Query *arg1 = 0 ;
  firebase::firestore::FieldPath *arg2 = 0 ;
  firebase::firestore::FieldValue *arg3 = 0 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::Query & type is null", 0);
    return 0;
  } 
  arg2 = (firebase::firestore::FieldPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldPath const & type is null", 0);
    return 0;
  } 
  arg3 = (firebase::firestore::FieldValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = firebase::firestore::csharp::QueryWhereArrayContainsAny(*arg1,(firebase::firestore::FieldPath const &)*arg2,(firebase::firestore::FieldValue const &)*arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryWhereIn__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  firebase::firestore::Query *arg1 = 0 ;
  std::string *arg2 = 0 ;
  firebase::firestore::FieldValue *arg3 = 0 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::Query & type is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (firebase::firestore::FieldValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = firebase::firestore::csharp::QueryWhereIn(*arg1,(std::string const &)*arg2,(firebase::firestore::FieldValue const &)*arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryWhereIn__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  firebase::firestore::Query *arg1 = 0 ;
  firebase::firestore::FieldPath *arg2 = 0 ;
  firebase::firestore::FieldValue *arg3 = 0 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::Query & type is null", 0);
    return 0;
  } 
  arg2 = (firebase::firestore::FieldPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldPath const & type is null", 0);
    return 0;
  } 
  arg3 = (firebase::firestore::FieldValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = firebase::firestore::csharp::QueryWhereIn(*arg1,(firebase::firestore::FieldPath const &)*arg2,(firebase::firestore::FieldValue const &)*arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryWhereNotIn__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  firebase::firestore::Query *arg1 = 0 ;
  std::string *arg2 = 0 ;
  firebase::firestore::FieldValue *arg3 = 0 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::Query & type is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (firebase::firestore::FieldValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = firebase::firestore::csharp::QueryWhereNotIn(*arg1,(std::string const &)*arg2,(firebase::firestore::FieldValue const &)*arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryWhereNotIn__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  firebase::firestore::Query *arg1 = 0 ;
  firebase::firestore::FieldPath *arg2 = 0 ;
  firebase::firestore::FieldValue *arg3 = 0 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::Query & type is null", 0);
    return 0;
  } 
  arg2 = (firebase::firestore::FieldPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldPath const & type is null", 0);
    return 0;
  } 
  arg3 = (firebase::firestore::FieldValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = firebase::firestore::csharp::QueryWhereNotIn(*arg1,(firebase::firestore::FieldPath const &)*arg2,(firebase::firestore::FieldValue const &)*arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryStartAt(void * jarg1, void * jarg2) {
  void * jresult ;
  firebase::firestore::Query *arg1 = 0 ;
  firebase::firestore::FieldValue *arg2 = 0 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::Query & type is null", 0);
    return 0;
  } 
  arg2 = (firebase::firestore::FieldValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = firebase::firestore::csharp::QueryStartAt(*arg1,(firebase::firestore::FieldValue const &)*arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryStartAfter(void * jarg1, void * jarg2) {
  void * jresult ;
  firebase::firestore::Query *arg1 = 0 ;
  firebase::firestore::FieldValue *arg2 = 0 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::Query & type is null", 0);
    return 0;
  } 
  arg2 = (firebase::firestore::FieldValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = firebase::firestore::csharp::QueryStartAfter(*arg1,(firebase::firestore::FieldValue const &)*arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryEndBefore(void * jarg1, void * jarg2) {
  void * jresult ;
  firebase::firestore::Query *arg1 = 0 ;
  firebase::firestore::FieldValue *arg2 = 0 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::Query & type is null", 0);
    return 0;
  } 
  arg2 = (firebase::firestore::FieldValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = firebase::firestore::csharp::QueryEndBefore(*arg1,(firebase::firestore::FieldValue const &)*arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QueryEndAt(void * jarg1, void * jarg2) {
  void * jresult ;
  firebase::firestore::Query *arg1 = 0 ;
  firebase::firestore::FieldValue *arg2 = 0 ;
  firebase::firestore::Query result;
  
  arg1 = (firebase::firestore::Query *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::Query & type is null", 0);
    return 0;
  } 
  arg2 = (firebase::firestore::FieldValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = firebase::firestore::csharp::QueryEndAt(*arg1,(firebase::firestore::FieldValue const &)*arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::Query(result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_WriteBatchSet(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  firebase::firestore::WriteBatch *arg1 = 0 ;
  firebase::firestore::DocumentReference *arg2 = 0 ;
  firebase::firestore::FieldValue *arg3 = 0 ;
  firebase::firestore::SetOptions *arg4 = 0 ;
  
  arg1 = (firebase::firestore::WriteBatch *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::WriteBatch & type is null", 0);
    return ;
  } 
  arg2 = (firebase::firestore::DocumentReference *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::DocumentReference const & type is null", 0);
    return ;
  } 
  arg3 = (firebase::firestore::FieldValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return ;
  } 
  arg4 = (firebase::firestore::SetOptions *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::SetOptions const & type is null", 0);
    return ;
  } 
  {
    try {
      firebase::firestore::csharp::WriteBatchSet(*arg1,(firebase::firestore::DocumentReference const &)*arg2,(firebase::firestore::FieldValue const &)*arg3,(firebase::firestore::SetOptions const &)*arg4);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL Firebase_Firestore_CSharp_TransactionResultOfGetProxy_is_valid(void * jarg1) {
  unsigned int jresult ;
  firebase::firestore::csharp::TransactionResultOfGet *arg1 = (firebase::firestore::csharp::TransactionResultOfGet *) 0 ;
  bool result;
  
  arg1 = (firebase::firestore::csharp::TransactionResultOfGet *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__TransactionResultOfGet) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (bool)((firebase::firestore::csharp::TransactionResultOfGet const *)arg1)->is_valid();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_TransactionResultOfGetProxy_TakeSnapshot(void * jarg1) {
  void * jresult ;
  firebase::firestore::csharp::TransactionResultOfGet *arg1 = (firebase::firestore::csharp::TransactionResultOfGet *) 0 ;
  firebase::firestore::DocumentSnapshot result;
  
  arg1 = (firebase::firestore::csharp::TransactionResultOfGet *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__TransactionResultOfGet) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (arg1)->TakeSnapshot();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::DocumentSnapshot(result);
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL Firebase_Firestore_CSharp_TransactionResultOfGetProxy_error_code(void * jarg1) {
  int jresult ;
  firebase::firestore::csharp::TransactionResultOfGet *arg1 = (firebase::firestore::csharp::TransactionResultOfGet *) 0 ;
  firebase::firestore::Error result;
  
  arg1 = (firebase::firestore::csharp::TransactionResultOfGet *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__TransactionResultOfGet) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (firebase::firestore::Error)((firebase::firestore::csharp::TransactionResultOfGet const *)arg1)->error_code();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL Firebase_Firestore_CSharp_TransactionResultOfGetProxy_error_message(void * jarg1) {
  char * jresult ;
  firebase::firestore::csharp::TransactionResultOfGet *arg1 = (firebase::firestore::csharp::TransactionResultOfGet *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (firebase::firestore::csharp::TransactionResultOfGet *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__TransactionResultOfGet) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (std::string *) &((firebase::firestore::csharp::TransactionResultOfGet const *)arg1)->error_message();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_TransactionResultOfGetProxy(void * jarg1) {
  firebase::firestore::csharp::TransactionResultOfGet *arg1 = (firebase::firestore::csharp::TransactionResultOfGet *) 0 ;
  
  arg1 = (firebase::firestore::csharp::TransactionResultOfGet *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__TransactionResultOfGet) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT int SWIGSTDCALL Firebase_Firestore_CSharp_TransactionCallbackProxy_callback_id(void * jarg1) {
  int jresult ;
  firebase::firestore::csharp::TransactionCallback *arg1 = (firebase::firestore::csharp::TransactionCallback *) 0 ;
  int32_t result;
  
  arg1 = (firebase::firestore::csharp::TransactionCallback *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__TransactionCallback) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (int32_t)((firebase::firestore::csharp::TransactionCallback const *)arg1)->callback_id();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_TransactionCallbackProxy_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  firebase::firestore::csharp::TransactionCallback *arg1 = (firebase::firestore::csharp::TransactionCallback *) 0 ;
  firebase::firestore::DocumentReference *arg2 = 0 ;
  firebase::firestore::csharp::TransactionResultOfGet result;
  
  arg1 = (firebase::firestore::csharp::TransactionCallback *)jarg1; 
  arg2 = (firebase::firestore::DocumentReference *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::DocumentReference const & type is null", 0);
    return 0;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__TransactionCallback) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (arg1)->Get((firebase::firestore::DocumentReference const &)*arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::csharp::TransactionResultOfGet(result);
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL Firebase_Firestore_CSharp_TransactionCallbackProxy_Update__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  firebase::firestore::csharp::TransactionCallback *arg1 = (firebase::firestore::csharp::TransactionCallback *) 0 ;
  firebase::firestore::DocumentReference *arg2 = 0 ;
  firebase::firestore::FieldValue *arg3 = 0 ;
  bool result;
  
  arg1 = (firebase::firestore::csharp::TransactionCallback *)jarg1; 
  arg2 = (firebase::firestore::DocumentReference *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::DocumentReference const & type is null", 0);
    return 0;
  } 
  arg3 = (firebase::firestore::FieldValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return 0;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__TransactionCallback) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (bool)(arg1)->Update((firebase::firestore::DocumentReference const &)*arg2,(firebase::firestore::FieldValue const &)*arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL Firebase_Firestore_CSharp_TransactionCallbackProxy_Update__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  firebase::firestore::csharp::TransactionCallback *arg1 = (firebase::firestore::csharp::TransactionCallback *) 0 ;
  firebase::firestore::DocumentReference *arg2 = 0 ;
  firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > *arg3 = 0 ;
  bool result;
  
  arg1 = (firebase::firestore::csharp::TransactionCallback *)jarg1; 
  arg2 = (firebase::firestore::DocumentReference *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::DocumentReference const & type is null", 0);
    return 0;
  } 
  arg3 = (firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > const & type is null", 0);
    return 0;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__TransactionCallback) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (bool)(arg1)->Update((firebase::firestore::DocumentReference const &)*arg2,(firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > const &)*arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL Firebase_Firestore_CSharp_TransactionCallbackProxy_Update__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  firebase::firestore::csharp::TransactionCallback *arg1 = (firebase::firestore::csharp::TransactionCallback *) 0 ;
  firebase::firestore::DocumentReference *arg2 = 0 ;
  firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > *arg3 = 0 ;
  bool result;
  
  arg1 = (firebase::firestore::csharp::TransactionCallback *)jarg1; 
  arg2 = (firebase::firestore::DocumentReference *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::DocumentReference const & type is null", 0);
    return 0;
  } 
  arg3 = (firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > const & type is null", 0);
    return 0;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__TransactionCallback) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (bool)(arg1)->Update((firebase::firestore::DocumentReference const &)*arg2,(firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > const &)*arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL Firebase_Firestore_CSharp_TransactionCallbackProxy_Set(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  firebase::firestore::csharp::TransactionCallback *arg1 = (firebase::firestore::csharp::TransactionCallback *) 0 ;
  firebase::firestore::DocumentReference *arg2 = 0 ;
  firebase::firestore::FieldValue *arg3 = 0 ;
  firebase::firestore::SetOptions *arg4 = 0 ;
  bool result;
  
  arg1 = (firebase::firestore::csharp::TransactionCallback *)jarg1; 
  arg2 = (firebase::firestore::DocumentReference *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::DocumentReference const & type is null", 0);
    return 0;
  } 
  arg3 = (firebase::firestore::FieldValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return 0;
  } 
  arg4 = (firebase::firestore::SetOptions *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::SetOptions const & type is null", 0);
    return 0;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__TransactionCallback) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (bool)(arg1)->Set((firebase::firestore::DocumentReference const &)*arg2,(firebase::firestore::FieldValue const &)*arg3,(firebase::firestore::SetOptions const &)*arg4);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL Firebase_Firestore_CSharp_TransactionCallbackProxy_Delete(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  firebase::firestore::csharp::TransactionCallback *arg1 = (firebase::firestore::csharp::TransactionCallback *) 0 ;
  firebase::firestore::DocumentReference *arg2 = 0 ;
  bool result;
  
  arg1 = (firebase::firestore::csharp::TransactionCallback *)jarg1; 
  arg2 = (firebase::firestore::DocumentReference *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::DocumentReference const & type is null", 0);
    return 0;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__TransactionCallback) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (bool)(arg1)->Delete((firebase::firestore::DocumentReference const &)*arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_TransactionCallbackProxy_OnCompletion(void * jarg1, unsigned int jarg2) {
  firebase::firestore::csharp::TransactionCallback *arg1 = (firebase::firestore::csharp::TransactionCallback *) 0 ;
  bool arg2 ;
  
  arg1 = (firebase::firestore::csharp::TransactionCallback *)jarg1; 
  arg2 = jarg2 ? true : false; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__TransactionCallback) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      (arg1)->OnCompletion(arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_TransactionCallbackProxy(void * jarg1) {
  firebase::firestore::csharp::TransactionCallback *arg1 = (firebase::firestore::csharp::TransactionCallback *) 0 ;
  
  arg1 = (firebase::firestore::csharp::TransactionCallback *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__TransactionCallback) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_new_TransactionManagerProxy(void * jarg1) {
  void * jresult ;
  firebase::firestore::Firestore *arg1 = (firebase::firestore::Firestore *) 0 ;
  firebase::firestore::csharp::TransactionManager *result = 0 ;
  
  arg1 = (firebase::firestore::Firestore *)jarg1; 
  {
    try {
      result = (firebase::firestore::csharp::TransactionManager *)new firebase::firestore::csharp::TransactionManager(arg1);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_TransactionManagerProxy(void * jarg1) {
  firebase::firestore::csharp::TransactionManager *arg1 = (firebase::firestore::csharp::TransactionManager *) 0 ;
  
  arg1 = (firebase::firestore::csharp::TransactionManager *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__TransactionManager) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_TransactionManagerProxy_CppDispose(void * jarg1) {
  firebase::firestore::csharp::TransactionManager *arg1 = (firebase::firestore::csharp::TransactionManager *) 0 ;
  
  arg1 = (firebase::firestore::csharp::TransactionManager *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__TransactionManager) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      (arg1)->Dispose();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_TransactionManagerProxy_RunTransaction(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  firebase::firestore::csharp::TransactionManager *arg1 = (firebase::firestore::csharp::TransactionManager *) 0 ;
  int32_t arg2 ;
  firebase::firestore::csharp::TransactionCallbackFn arg3 = (firebase::firestore::csharp::TransactionCallbackFn) 0 ;
  firebase::Future< void > result;
  
  arg1 = (firebase::firestore::csharp::TransactionManager *)jarg1; 
  arg2 = (int32_t)jarg2; 
  
  arg3 = (firebase::firestore::csharp::TransactionCallbackFn)jarg3;
  
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__TransactionManager) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (arg1)->RunTransaction(arg2,arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::Future< void >(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_new_FieldToValueMap() {
  void * jresult ;
  firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > *result = 0 ;
  
  {
    try {
      result = (firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > *)new firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue >();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL Firebase_Firestore_CSharp_FieldToValueMap_Size(void * jarg1) {
  unsigned long jresult ;
  firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > *arg1 = (firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > *) 0 ;
  std::size_t result;
  
  arg1 = (firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__MapT_std__string_firebase__firestore__FieldValue_t) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > const *)arg1)->Size();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldToValueMap_GetUnsafeView(void * jarg1, char * jarg2) {
  void * jresult ;
  firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > *arg1 = (firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > *) 0 ;
  std::string *arg2 = 0 ;
  firebase::firestore::FieldValue *result = 0 ;
  
  arg1 = (firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__MapT_std__string_firebase__firestore__FieldValue_t) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (firebase::firestore::FieldValue *) &((firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > const *)arg1)->GetUnsafeView((std::string const &)*arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldToValueMap_GetCopy(void * jarg1, char * jarg2) {
  void * jresult ;
  firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > *arg1 = (firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > *) 0 ;
  std::string *arg2 = 0 ;
  firebase::firestore::FieldValue result;
  
  arg1 = (firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__MapT_std__string_firebase__firestore__FieldValue_t) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > const *)arg1)->GetCopy((std::string const &)*arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::FieldValue(result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_FieldToValueMap_Insert(void * jarg1, char * jarg2, void * jarg3) {
  firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > *arg1 = (firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > *) 0 ;
  std::string *arg2 = 0 ;
  firebase::firestore::FieldValue *arg3 = 0 ;
  
  arg1 = (firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (firebase::firestore::FieldValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return ;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__MapT_std__string_firebase__firestore__FieldValue_t) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      (arg1)->Insert((std::string const &)*arg2,(firebase::firestore::FieldValue const &)*arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldToValueMap_Iterator(void * jarg1) {
  void * jresult ;
  firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > *arg1 = (firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > *) 0 ;
  SwigValueWrapper< firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue >::MapIterator > result;
  
  arg1 = (firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__MapT_std__string_firebase__firestore__FieldValue_t) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > const *)arg1)->Iterator();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue >::MapIterator(result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_FieldToValueMap(void * jarg1) {
  firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > *arg1 = (firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > *) 0 ;
  
  arg1 = (firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue > *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__MapT_std__string_firebase__firestore__FieldValue_t) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL Firebase_Firestore_CSharp_FieldToValueMapIterator_HasMore(void * jarg1) {
  unsigned int jresult ;
  firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue >::MapIterator *arg1 = (firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue >::MapIterator *) 0 ;
  bool result;
  
  arg1 = (firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue >::MapIterator *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__MapT_std__string_firebase__firestore__FieldValue_t__MapIterator) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (bool)((firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue >::MapIterator const *)arg1)->HasMore();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_FieldToValueMapIterator_Advance(void * jarg1) {
  firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue >::MapIterator *arg1 = (firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue >::MapIterator *) 0 ;
  
  arg1 = (firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue >::MapIterator *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__MapT_std__string_firebase__firestore__FieldValue_t__MapIterator) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      (arg1)->Advance();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL Firebase_Firestore_CSharp_FieldToValueMapIterator_UnsafeKeyView(void * jarg1) {
  char * jresult ;
  firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue >::MapIterator *arg1 = (firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue >::MapIterator *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue >::MapIterator *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__MapT_std__string_firebase__firestore__FieldValue_t__MapIterator) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (std::string *) &((firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue >::MapIterator const *)arg1)->UnsafeKeyView();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldToValueMapIterator_UnsafeValueView(void * jarg1) {
  void * jresult ;
  firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue >::MapIterator *arg1 = (firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue >::MapIterator *) 0 ;
  firebase::firestore::FieldValue *result = 0 ;
  
  arg1 = (firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue >::MapIterator *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__MapT_std__string_firebase__firestore__FieldValue_t__MapIterator) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (firebase::firestore::FieldValue *) &((firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue >::MapIterator const *)arg1)->UnsafeValueView();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL Firebase_Firestore_CSharp_FieldToValueMapIterator_KeyCopy(void * jarg1) {
  char * jresult ;
  firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue >::MapIterator *arg1 = (firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue >::MapIterator *) 0 ;
  std::string result;
  
  arg1 = (firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue >::MapIterator *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__MapT_std__string_firebase__firestore__FieldValue_t__MapIterator) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue >::MapIterator const *)arg1)->KeyCopy();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldToValueMapIterator_ValueCopy(void * jarg1) {
  void * jresult ;
  firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue >::MapIterator *arg1 = (firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue >::MapIterator *) 0 ;
  firebase::firestore::FieldValue result;
  
  arg1 = (firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue >::MapIterator *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__MapT_std__string_firebase__firestore__FieldValue_t__MapIterator) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue >::MapIterator const *)arg1)->ValueCopy();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::FieldValue(result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_FieldToValueMapIterator(void * jarg1) {
  firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue >::MapIterator *arg1 = (firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue >::MapIterator *) 0 ;
  
  arg1 = (firebase::firestore::csharp::Map< std::string,firebase::firestore::FieldValue >::MapIterator *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__MapT_std__string_firebase__firestore__FieldValue_t__MapIterator) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_new_FieldPathToValueMap() {
  void * jresult ;
  firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > *result = 0 ;
  
  {
    try {
      result = (firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > *)new firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue >();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL Firebase_Firestore_CSharp_FieldPathToValueMap_Size(void * jarg1) {
  unsigned long jresult ;
  firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > *arg1 = (firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > *) 0 ;
  std::size_t result;
  
  arg1 = (firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__MapT_firebase__firestore__FieldPath_firebase__firestore__FieldValue_t) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > const *)arg1)->Size();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldPathToValueMap_GetUnsafeView(void * jarg1, void * jarg2) {
  void * jresult ;
  firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > *arg1 = (firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > *) 0 ;
  firebase::firestore::FieldPath *arg2 = 0 ;
  firebase::firestore::FieldValue *result = 0 ;
  
  arg1 = (firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > *)jarg1; 
  arg2 = (firebase::firestore::FieldPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldPath const & type is null", 0);
    return 0;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__MapT_firebase__firestore__FieldPath_firebase__firestore__FieldValue_t) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (firebase::firestore::FieldValue *) &((firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > const *)arg1)->GetUnsafeView((firebase::firestore::FieldPath const &)*arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldPathToValueMap_GetCopy(void * jarg1, void * jarg2) {
  void * jresult ;
  firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > *arg1 = (firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > *) 0 ;
  firebase::firestore::FieldPath *arg2 = 0 ;
  firebase::firestore::FieldValue result;
  
  arg1 = (firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > *)jarg1; 
  arg2 = (firebase::firestore::FieldPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldPath const & type is null", 0);
    return 0;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__MapT_firebase__firestore__FieldPath_firebase__firestore__FieldValue_t) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > const *)arg1)->GetCopy((firebase::firestore::FieldPath const &)*arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::FieldValue(result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_FieldPathToValueMap_Insert(void * jarg1, void * jarg2, void * jarg3) {
  firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > *arg1 = (firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > *) 0 ;
  firebase::firestore::FieldPath *arg2 = 0 ;
  firebase::firestore::FieldValue *arg3 = 0 ;
  
  arg1 = (firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > *)jarg1; 
  arg2 = (firebase::firestore::FieldPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldPath const & type is null", 0);
    return ;
  } 
  arg3 = (firebase::firestore::FieldValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return ;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__MapT_firebase__firestore__FieldPath_firebase__firestore__FieldValue_t) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      (arg1)->Insert((firebase::firestore::FieldPath const &)*arg2,(firebase::firestore::FieldValue const &)*arg3);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldPathToValueMap_Iterator(void * jarg1) {
  void * jresult ;
  firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > *arg1 = (firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > *) 0 ;
  SwigValueWrapper< firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue >::MapIterator > result;
  
  arg1 = (firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__MapT_firebase__firestore__FieldPath_firebase__firestore__FieldValue_t) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > const *)arg1)->Iterator();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue >::MapIterator(result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_FieldPathToValueMap(void * jarg1) {
  firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > *arg1 = (firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > *) 0 ;
  
  arg1 = (firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue > *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__MapT_firebase__firestore__FieldPath_firebase__firestore__FieldValue_t) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL Firebase_Firestore_CSharp_FieldPathToValueMapIterator_HasMore(void * jarg1) {
  unsigned int jresult ;
  firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue >::MapIterator *arg1 = (firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue >::MapIterator *) 0 ;
  bool result;
  
  arg1 = (firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue >::MapIterator *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__MapT_firebase__firestore__FieldPath_firebase__firestore__FieldValue_t__MapIterator) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (bool)((firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue >::MapIterator const *)arg1)->HasMore();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_FieldPathToValueMapIterator_Advance(void * jarg1) {
  firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue >::MapIterator *arg1 = (firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue >::MapIterator *) 0 ;
  
  arg1 = (firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue >::MapIterator *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__MapT_firebase__firestore__FieldPath_firebase__firestore__FieldValue_t__MapIterator) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      (arg1)->Advance();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldPathToValueMapIterator_UnsafeKeyView(void * jarg1) {
  void * jresult ;
  firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue >::MapIterator *arg1 = (firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue >::MapIterator *) 0 ;
  firebase::firestore::FieldPath *result = 0 ;
  
  arg1 = (firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue >::MapIterator *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__MapT_firebase__firestore__FieldPath_firebase__firestore__FieldValue_t__MapIterator) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (firebase::firestore::FieldPath *) &((firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue >::MapIterator const *)arg1)->UnsafeKeyView();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldPathToValueMapIterator_UnsafeValueView(void * jarg1) {
  void * jresult ;
  firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue >::MapIterator *arg1 = (firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue >::MapIterator *) 0 ;
  firebase::firestore::FieldValue *result = 0 ;
  
  arg1 = (firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue >::MapIterator *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__MapT_firebase__firestore__FieldPath_firebase__firestore__FieldValue_t__MapIterator) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (firebase::firestore::FieldValue *) &((firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue >::MapIterator const *)arg1)->UnsafeValueView();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldPathToValueMapIterator_KeyCopy(void * jarg1) {
  void * jresult ;
  firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue >::MapIterator *arg1 = (firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue >::MapIterator *) 0 ;
  firebase::firestore::FieldPath result;
  
  arg1 = (firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue >::MapIterator *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__MapT_firebase__firestore__FieldPath_firebase__firestore__FieldValue_t__MapIterator) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue >::MapIterator const *)arg1)->KeyCopy();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::FieldPath(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldPathToValueMapIterator_ValueCopy(void * jarg1) {
  void * jresult ;
  firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue >::MapIterator *arg1 = (firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue >::MapIterator *) 0 ;
  firebase::firestore::FieldValue result;
  
  arg1 = (firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue >::MapIterator *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__MapT_firebase__firestore__FieldPath_firebase__firestore__FieldValue_t__MapIterator) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue >::MapIterator const *)arg1)->ValueCopy();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::FieldValue(result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_FieldPathToValueMapIterator(void * jarg1) {
  firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue >::MapIterator *arg1 = (firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue >::MapIterator *) 0 ;
  
  arg1 = (firebase::firestore::csharp::Map< firebase::firestore::FieldPath,firebase::firestore::FieldValue >::MapIterator *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__MapT_firebase__firestore__FieldPath_firebase__firestore__FieldValue_t__MapIterator) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_ConvertFieldValueToVector(void * jarg1) {
  void * jresult ;
  firebase::firestore::FieldValue *arg1 = 0 ;
  firebase::firestore::csharp::Vector< firebase::firestore::FieldValue > result;
  
  arg1 = (firebase::firestore::FieldValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = firebase::firestore::csharp::ConvertFieldValueToVector((firebase::firestore::FieldValue const &)*arg1);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::csharp::Vector< firebase::firestore::FieldValue >(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_ConvertVectorToFieldValue(void * jarg1) {
  void * jresult ;
  firebase::firestore::csharp::Vector< firebase::firestore::FieldValue > *arg1 = 0 ;
  firebase::firestore::FieldValue result;
  
  arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::FieldValue > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::csharp::Vector< firebase::firestore::FieldValue > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = firebase::firestore::csharp::ConvertVectorToFieldValue((firebase::firestore::csharp::Vector< firebase::firestore::FieldValue > const &)*arg1);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::FieldValue(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldValueArrayUnion(void * jarg1) {
  void * jresult ;
  firebase::firestore::csharp::Vector< firebase::firestore::FieldValue > *arg1 = 0 ;
  firebase::firestore::FieldValue result;
  
  arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::FieldValue > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::csharp::Vector< firebase::firestore::FieldValue > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = firebase::firestore::csharp::FieldValueArrayUnion((firebase::firestore::csharp::Vector< firebase::firestore::FieldValue > const &)*arg1);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::FieldValue(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldValueArrayRemove(void * jarg1) {
  void * jresult ;
  firebase::firestore::csharp::Vector< firebase::firestore::FieldValue > *arg1 = 0 ;
  firebase::firestore::FieldValue result;
  
  arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::FieldValue > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::csharp::Vector< firebase::firestore::FieldValue > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = firebase::firestore::csharp::FieldValueArrayRemove((firebase::firestore::csharp::Vector< firebase::firestore::FieldValue > const &)*arg1);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::FieldValue(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QuerySnapshotDocuments(void * jarg1) {
  void * jresult ;
  firebase::firestore::QuerySnapshot *arg1 = 0 ;
  firebase::firestore::csharp::Vector< firebase::firestore::DocumentSnapshot > result;
  
  arg1 = (firebase::firestore::QuerySnapshot *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::QuerySnapshot const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = firebase::firestore::csharp::QuerySnapshotDocuments((firebase::firestore::QuerySnapshot const &)*arg1);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::csharp::Vector< firebase::firestore::DocumentSnapshot >(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_QuerySnapshotDocumentChanges(void * jarg1, int jarg2) {
  void * jresult ;
  firebase::firestore::QuerySnapshot *arg1 = 0 ;
  firebase::firestore::MetadataChanges arg2 ;
  firebase::firestore::csharp::Vector< firebase::firestore::DocumentChange > result;
  
  arg1 = (firebase::firestore::QuerySnapshot *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::QuerySnapshot const & type is null", 0);
    return 0;
  } 
  arg2 = (firebase::firestore::MetadataChanges)jarg2; 
  {
    try {
      result = firebase::firestore::csharp::QuerySnapshotDocumentChanges((firebase::firestore::QuerySnapshot const &)*arg1,arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::csharp::Vector< firebase::firestore::DocumentChange >(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_SetOptionsMergeFieldPaths(void * jarg1) {
  void * jresult ;
  firebase::firestore::csharp::Vector< firebase::firestore::FieldPath > *arg1 = 0 ;
  firebase::firestore::SetOptions result;
  
  arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::FieldPath > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::csharp::Vector< firebase::firestore::FieldPath > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = firebase::firestore::csharp::SetOptionsMergeFieldPaths((firebase::firestore::csharp::Vector< firebase::firestore::FieldPath > const &)*arg1);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::SetOptions(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_new_DocumentChangeVector() {
  void * jresult ;
  firebase::firestore::csharp::Vector< firebase::firestore::DocumentChange > *result = 0 ;
  
  {
    try {
      result = (firebase::firestore::csharp::Vector< firebase::firestore::DocumentChange > *)new firebase::firestore::csharp::Vector< firebase::firestore::DocumentChange >();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL Firebase_Firestore_CSharp_DocumentChangeVector_Size(void * jarg1) {
  unsigned long jresult ;
  firebase::firestore::csharp::Vector< firebase::firestore::DocumentChange > *arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::DocumentChange > *) 0 ;
  std::size_t result;
  
  arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::DocumentChange > *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__VectorT_firebase__firestore__DocumentChange_t) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::csharp::Vector< firebase::firestore::DocumentChange > const *)arg1)->Size();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_DocumentChangeVector_GetUnsafeView(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  firebase::firestore::csharp::Vector< firebase::firestore::DocumentChange > *arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::DocumentChange > *) 0 ;
  std::size_t arg2 ;
  firebase::firestore::DocumentChange *result = 0 ;
  
  arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::DocumentChange > *)jarg1; 
  arg2 = (std::size_t)jarg2; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__VectorT_firebase__firestore__DocumentChange_t) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (firebase::firestore::DocumentChange *) &((firebase::firestore::csharp::Vector< firebase::firestore::DocumentChange > const *)arg1)->GetUnsafeView(arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_DocumentChangeVector_GetCopy(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  firebase::firestore::csharp::Vector< firebase::firestore::DocumentChange > *arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::DocumentChange > *) 0 ;
  std::size_t arg2 ;
  firebase::firestore::DocumentChange result;
  
  arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::DocumentChange > *)jarg1; 
  arg2 = (std::size_t)jarg2; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__VectorT_firebase__firestore__DocumentChange_t) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::csharp::Vector< firebase::firestore::DocumentChange > const *)arg1)->GetCopy(arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::DocumentChange(result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_DocumentChangeVector_PushBack(void * jarg1, void * jarg2) {
  firebase::firestore::csharp::Vector< firebase::firestore::DocumentChange > *arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::DocumentChange > *) 0 ;
  firebase::firestore::DocumentChange *arg2 = 0 ;
  
  arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::DocumentChange > *)jarg1; 
  arg2 = (firebase::firestore::DocumentChange *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::DocumentChange const & type is null", 0);
    return ;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__VectorT_firebase__firestore__DocumentChange_t) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      (arg1)->PushBack((firebase::firestore::DocumentChange const &)*arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_DocumentChangeVector(void * jarg1) {
  firebase::firestore::csharp::Vector< firebase::firestore::DocumentChange > *arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::DocumentChange > *) 0 ;
  
  arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::DocumentChange > *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__VectorT_firebase__firestore__DocumentChange_t) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_new_DocumentSnapshotVector() {
  void * jresult ;
  firebase::firestore::csharp::Vector< firebase::firestore::DocumentSnapshot > *result = 0 ;
  
  {
    try {
      result = (firebase::firestore::csharp::Vector< firebase::firestore::DocumentSnapshot > *)new firebase::firestore::csharp::Vector< firebase::firestore::DocumentSnapshot >();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL Firebase_Firestore_CSharp_DocumentSnapshotVector_Size(void * jarg1) {
  unsigned long jresult ;
  firebase::firestore::csharp::Vector< firebase::firestore::DocumentSnapshot > *arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::DocumentSnapshot > *) 0 ;
  std::size_t result;
  
  arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::DocumentSnapshot > *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__VectorT_firebase__firestore__DocumentSnapshot_t) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::csharp::Vector< firebase::firestore::DocumentSnapshot > const *)arg1)->Size();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_DocumentSnapshotVector_GetUnsafeView(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  firebase::firestore::csharp::Vector< firebase::firestore::DocumentSnapshot > *arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::DocumentSnapshot > *) 0 ;
  std::size_t arg2 ;
  firebase::firestore::DocumentSnapshot *result = 0 ;
  
  arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::DocumentSnapshot > *)jarg1; 
  arg2 = (std::size_t)jarg2; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__VectorT_firebase__firestore__DocumentSnapshot_t) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (firebase::firestore::DocumentSnapshot *) &((firebase::firestore::csharp::Vector< firebase::firestore::DocumentSnapshot > const *)arg1)->GetUnsafeView(arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_DocumentSnapshotVector_GetCopy(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  firebase::firestore::csharp::Vector< firebase::firestore::DocumentSnapshot > *arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::DocumentSnapshot > *) 0 ;
  std::size_t arg2 ;
  firebase::firestore::DocumentSnapshot result;
  
  arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::DocumentSnapshot > *)jarg1; 
  arg2 = (std::size_t)jarg2; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__VectorT_firebase__firestore__DocumentSnapshot_t) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::csharp::Vector< firebase::firestore::DocumentSnapshot > const *)arg1)->GetCopy(arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::DocumentSnapshot(result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_DocumentSnapshotVector_PushBack(void * jarg1, void * jarg2) {
  firebase::firestore::csharp::Vector< firebase::firestore::DocumentSnapshot > *arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::DocumentSnapshot > *) 0 ;
  firebase::firestore::DocumentSnapshot *arg2 = 0 ;
  
  arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::DocumentSnapshot > *)jarg1; 
  arg2 = (firebase::firestore::DocumentSnapshot *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::DocumentSnapshot const & type is null", 0);
    return ;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__VectorT_firebase__firestore__DocumentSnapshot_t) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      (arg1)->PushBack((firebase::firestore::DocumentSnapshot const &)*arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_DocumentSnapshotVector(void * jarg1) {
  firebase::firestore::csharp::Vector< firebase::firestore::DocumentSnapshot > *arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::DocumentSnapshot > *) 0 ;
  
  arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::DocumentSnapshot > *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__VectorT_firebase__firestore__DocumentSnapshot_t) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_new_FieldPathVector() {
  void * jresult ;
  firebase::firestore::csharp::Vector< firebase::firestore::FieldPath > *result = 0 ;
  
  {
    try {
      result = (firebase::firestore::csharp::Vector< firebase::firestore::FieldPath > *)new firebase::firestore::csharp::Vector< firebase::firestore::FieldPath >();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL Firebase_Firestore_CSharp_FieldPathVector_Size(void * jarg1) {
  unsigned long jresult ;
  firebase::firestore::csharp::Vector< firebase::firestore::FieldPath > *arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::FieldPath > *) 0 ;
  std::size_t result;
  
  arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::FieldPath > *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__VectorT_firebase__firestore__FieldPath_t) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::csharp::Vector< firebase::firestore::FieldPath > const *)arg1)->Size();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldPathVector_GetUnsafeView(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  firebase::firestore::csharp::Vector< firebase::firestore::FieldPath > *arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::FieldPath > *) 0 ;
  std::size_t arg2 ;
  firebase::firestore::FieldPath *result = 0 ;
  
  arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::FieldPath > *)jarg1; 
  arg2 = (std::size_t)jarg2; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__VectorT_firebase__firestore__FieldPath_t) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (firebase::firestore::FieldPath *) &((firebase::firestore::csharp::Vector< firebase::firestore::FieldPath > const *)arg1)->GetUnsafeView(arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldPathVector_GetCopy(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  firebase::firestore::csharp::Vector< firebase::firestore::FieldPath > *arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::FieldPath > *) 0 ;
  std::size_t arg2 ;
  firebase::firestore::FieldPath result;
  
  arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::FieldPath > *)jarg1; 
  arg2 = (std::size_t)jarg2; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__VectorT_firebase__firestore__FieldPath_t) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::csharp::Vector< firebase::firestore::FieldPath > const *)arg1)->GetCopy(arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::FieldPath(result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_FieldPathVector_PushBack(void * jarg1, void * jarg2) {
  firebase::firestore::csharp::Vector< firebase::firestore::FieldPath > *arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::FieldPath > *) 0 ;
  firebase::firestore::FieldPath *arg2 = 0 ;
  
  arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::FieldPath > *)jarg1; 
  arg2 = (firebase::firestore::FieldPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldPath const & type is null", 0);
    return ;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__VectorT_firebase__firestore__FieldPath_t) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      (arg1)->PushBack((firebase::firestore::FieldPath const &)*arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_FieldPathVector(void * jarg1) {
  firebase::firestore::csharp::Vector< firebase::firestore::FieldPath > *arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::FieldPath > *) 0 ;
  
  arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::FieldPath > *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__VectorT_firebase__firestore__FieldPath_t) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_new_FieldValueVector() {
  void * jresult ;
  firebase::firestore::csharp::Vector< firebase::firestore::FieldValue > *result = 0 ;
  
  {
    try {
      result = (firebase::firestore::csharp::Vector< firebase::firestore::FieldValue > *)new firebase::firestore::csharp::Vector< firebase::firestore::FieldValue >();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL Firebase_Firestore_CSharp_FieldValueVector_Size(void * jarg1) {
  unsigned long jresult ;
  firebase::firestore::csharp::Vector< firebase::firestore::FieldValue > *arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::FieldValue > *) 0 ;
  std::size_t result;
  
  arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::FieldValue > *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__VectorT_firebase__firestore__FieldValue_t) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::csharp::Vector< firebase::firestore::FieldValue > const *)arg1)->Size();
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldValueVector_GetUnsafeView(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  firebase::firestore::csharp::Vector< firebase::firestore::FieldValue > *arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::FieldValue > *) 0 ;
  std::size_t arg2 ;
  firebase::firestore::FieldValue *result = 0 ;
  
  arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::FieldValue > *)jarg1; 
  arg2 = (std::size_t)jarg2; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__VectorT_firebase__firestore__FieldValue_t) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = (firebase::firestore::FieldValue *) &((firebase::firestore::csharp::Vector< firebase::firestore::FieldValue > const *)arg1)->GetUnsafeView(arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL Firebase_Firestore_CSharp_FieldValueVector_GetCopy(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  firebase::firestore::csharp::Vector< firebase::firestore::FieldValue > *arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::FieldValue > *) 0 ;
  std::size_t arg2 ;
  firebase::firestore::FieldValue result;
  
  arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::FieldValue > *)jarg1; 
  arg2 = (std::size_t)jarg2; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__VectorT_firebase__firestore__FieldValue_t) " has been disposed", 0);
    return 0;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      result = ((firebase::firestore::csharp::Vector< firebase::firestore::FieldValue > const *)arg1)->GetCopy(arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return 0;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return 0;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return 0;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return 0;
    }
  }
  jresult = new firebase::firestore::FieldValue(result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_FieldValueVector_PushBack(void * jarg1, void * jarg2) {
  firebase::firestore::csharp::Vector< firebase::firestore::FieldValue > *arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::FieldValue > *) 0 ;
  firebase::firestore::FieldValue *arg2 = 0 ;
  
  arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::FieldValue > *)jarg1; 
  arg2 = (firebase::firestore::FieldValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "firebase::firestore::FieldValue const & type is null", 0);
    return ;
  } 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__VectorT_firebase__firestore__FieldValue_t) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      (arg1)->PushBack((firebase::firestore::FieldValue const &)*arg2);
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL Firebase_Firestore_CSharp_delete_FieldValueVector(void * jarg1) {
  firebase::firestore::csharp::Vector< firebase::firestore::FieldValue > *arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::FieldValue > *) 0 ;
  
  arg1 = (firebase::firestore::csharp::Vector< firebase::firestore::FieldValue > *)jarg1; 
  
#ifndef FIREBASE_TO_STRING
#define FIREBASE_TO_STRING2(x) #x
#define FIREBASE_TO_STRING(x) FIREBASE_TO_STRING2(#x)
#endif  // FIREBASE_TO_STRING
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(
      SWIG_CSharpArgumentNullException,
      FIREBASE_TO_STRING(_p_firebase__firestore__csharp__VectorT_firebase__firestore__FieldValue_t) " has been disposed", 0);
    return ;
  }
#undef FIREBASE_TO_STRING
#undef FIREBASE_TO_STRING2
  
  {
    try {
      delete arg1;
    } catch (const ::firebase::firestore::FirestoreInternalError& e) {
      SWIG_CSharpSetPendingExceptionFirestore(e.what());
      return ;
    } catch (const std::invalid_argument& e) {
      SWIG_CSharpSetPendingExceptionArgument(
        SWIG_CSharpExceptionArgumentCodes::SWIG_CSharpArgumentException,
        e.what(), /*paramName=*/"");
      return ;
    } catch (const std::logic_error& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (const std::exception& e) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        e.what());
      return ;
    } catch (...) {
      SWIG_CSharpSetPendingException(SWIG_CSharpInvalidOperationException,
        "Unknown error has occurred.");
      return ;
    }
  }
}


SWIGEXPORT firebase::FutureBase * SWIGSTDCALL Firebase_Firestore_CSharp_Future_QuerySnapshot_SWIGUpcast(firebase::Future< firebase::firestore::QuerySnapshot > *jarg1) {
    return (firebase::FutureBase *)jarg1;
}

SWIGEXPORT firebase::FutureBase * SWIGSTDCALL Firebase_Firestore_CSharp_Future_DocumentSnapshot_SWIGUpcast(firebase::Future< firebase::firestore::DocumentSnapshot > *jarg1) {
    return (firebase::FutureBase *)jarg1;
}

SWIGEXPORT firebase::FutureBase * SWIGSTDCALL Firebase_Firestore_CSharp_Future_DocumentReference_SWIGUpcast(firebase::Future< firebase::firestore::DocumentReference > *jarg1) {
    return (firebase::FutureBase *)jarg1;
}

SWIGEXPORT firebase::FutureBase * SWIGSTDCALL Firebase_Firestore_CSharp_Future_FirestoreVoid_SWIGUpcast(firebase::Future< void > *jarg1) {
    return (firebase::FutureBase *)jarg1;
}

SWIGEXPORT firebase::FutureBase * SWIGSTDCALL Firebase_Firestore_CSharp_Future_LoadBundleTaskProgress_SWIGUpcast(firebase::Future< firebase::firestore::LoadBundleTaskProgress > *jarg1) {
    return (firebase::FutureBase *)jarg1;
}

SWIGEXPORT firebase::FutureBase * SWIGSTDCALL Firebase_Firestore_CSharp_Future_Query_SWIGUpcast(firebase::Future< firebase::firestore::Query > *jarg1) {
    return (firebase::FutureBase *)jarg1;
}

SWIGEXPORT firebase::firestore::Query * SWIGSTDCALL Firebase_Firestore_CSharp_CollectionReferenceProxy_SWIGUpcast(firebase::firestore::CollectionReference *jarg1) {
    return (firebase::firestore::Query *)jarg1;
}

#ifdef __cplusplus
}
#endif


/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Firebase.Firestore {

internal class TransactionCallbackProxy : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TransactionCallbackProxy(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TransactionCallbackProxy obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~TransactionCallbackProxy() {
    Dispose();
  }

  public virtual void Dispose() {

    lock (FirebaseApp.disposeLock) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          FirestoreCppPINVOKE.delete_TransactionCallbackProxy(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(
            null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public int callback_id() {
    int ret = FirestoreCppPINVOKE.TransactionCallbackProxy_callback_id(swigCPtr);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TransactionResultOfGetProxy Get(DocumentReferenceProxy doc) {
    TransactionResultOfGetProxy ret = new TransactionResultOfGetProxy(FirestoreCppPINVOKE.TransactionCallbackProxy_Get(swigCPtr, DocumentReferenceProxy.getCPtr(doc)), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Update(DocumentReferenceProxy doc, FieldValueProxy fieldValue) {
    bool ret = FirestoreCppPINVOKE.TransactionCallbackProxy_Update__SWIG_0(swigCPtr, DocumentReferenceProxy.getCPtr(doc), FieldValueProxy.getCPtr(fieldValue));
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Update(DocumentReferenceProxy doc, FieldToValueMap wrapper) {
    bool ret = FirestoreCppPINVOKE.TransactionCallbackProxy_Update__SWIG_1(swigCPtr, DocumentReferenceProxy.getCPtr(doc), FieldToValueMap.getCPtr(wrapper));
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Update(DocumentReferenceProxy doc, FieldPathToValueMap wrapper) {
    bool ret = FirestoreCppPINVOKE.TransactionCallbackProxy_Update__SWIG_2(swigCPtr, DocumentReferenceProxy.getCPtr(doc), FieldPathToValueMap.getCPtr(wrapper));
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Set(DocumentReferenceProxy doc, FieldValueProxy data, SetOptionsProxy options) {
    bool ret = FirestoreCppPINVOKE.TransactionCallbackProxy_Set(swigCPtr, DocumentReferenceProxy.getCPtr(doc), FieldValueProxy.getCPtr(data), SetOptionsProxy.getCPtr(options));
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Delete(DocumentReferenceProxy doc) {
    bool ret = FirestoreCppPINVOKE.TransactionCallbackProxy_Delete(swigCPtr, DocumentReferenceProxy.getCPtr(doc));
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void OnCompletion(bool callbackSuccessful) {
    FirestoreCppPINVOKE.TransactionCallbackProxy_OnCompletion(swigCPtr, callbackSuccessful);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
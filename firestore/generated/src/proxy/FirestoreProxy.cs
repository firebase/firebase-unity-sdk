/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Firebase.Firestore {

internal class FirestoreProxy : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FirestoreProxy(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FirestoreProxy obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FirestoreProxy() {
    Dispose();
  }

  public virtual void Dispose() {
  lock (FirebaseApp.disposeLock) {
    if (swigCPtr.Handle != global::System.IntPtr.Zero) {
      FirestoreCpp.ReleaseFirestoreInstance(this);
      swigCMemOwn = false;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(
          null, global::System.IntPtr.Zero);
    }
    global::System.GC.SuppressFinalize(this);
  }
}

  public virtual FirebaseApp app() {
    global::System.IntPtr cPtr = FirestoreCppPINVOKE.FirestoreProxy_app__SWIG_0(swigCPtr);
    FirebaseApp ret = (cPtr == global::System.IntPtr.Zero) ? null : new FirebaseApp(cPtr, false);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual CollectionReferenceProxy Collection(string collectionPath) {
    CollectionReferenceProxy ret = new CollectionReferenceProxy(FirestoreCppPINVOKE.FirestoreProxy_Collection__SWIG_0(swigCPtr, collectionPath), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DocumentReferenceProxy Document(string documentPath) {
    DocumentReferenceProxy ret = new DocumentReferenceProxy(FirestoreCppPINVOKE.FirestoreProxy_Document__SWIG_0(swigCPtr, documentPath), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual QueryProxy CollectionGroup(string collectionId) {
    QueryProxy ret = new QueryProxy(FirestoreCppPINVOKE.FirestoreProxy_CollectionGroup__SWIG_0(swigCPtr, collectionId), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SettingsProxy settings() {
    SettingsProxy ret = new SettingsProxy(FirestoreCppPINVOKE.FirestoreProxy_settings(swigCPtr), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void set_settings(SettingsProxy settings) {
    FirestoreCppPINVOKE.FirestoreProxy_set_settings(swigCPtr, SettingsProxy.getCPtr(settings));
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual WriteBatchProxy batch() {
    WriteBatchProxy ret = new WriteBatchProxy(FirestoreCppPINVOKE.FirestoreProxy_batch(swigCPtr), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void set_log_level(LogLevel logLevel) {
    FirestoreCppPINVOKE.FirestoreProxy_set_log_level((int)logLevel);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual System.Threading.Tasks.Task DisableNetworkAsync() {
    System.Threading.Tasks.Task ret = Future_FirestoreVoid.GetTask(
        new Future_FirestoreVoid(FirestoreCppPINVOKE.FirestoreProxy_DisableNetwork(swigCPtr), true));
    
    return ret;
  }

  public virtual System.Threading.Tasks.Task EnableNetworkAsync() {
    System.Threading.Tasks.Task ret = Future_FirestoreVoid.GetTask(
        new Future_FirestoreVoid(FirestoreCppPINVOKE.FirestoreProxy_EnableNetwork(swigCPtr), true));
    
    return ret;
  }

  public virtual System.Threading.Tasks.Task TerminateAsync() {
    System.Threading.Tasks.Task ret = Future_FirestoreVoid.GetTask(
        new Future_FirestoreVoid(FirestoreCppPINVOKE.FirestoreProxy_Terminate(swigCPtr), true));
    
    return ret;
  }

  public virtual System.Threading.Tasks.Task WaitForPendingWritesAsync() {
    System.Threading.Tasks.Task ret = Future_FirestoreVoid.GetTask(
        new Future_FirestoreVoid(FirestoreCppPINVOKE.FirestoreProxy_WaitForPendingWrites(swigCPtr), true));
    
    return ret;
  }

  public virtual System.Threading.Tasks.Task ClearPersistenceAsync() {
    System.Threading.Tasks.Task ret = Future_FirestoreVoid.GetTask(
        new Future_FirestoreVoid(FirestoreCppPINVOKE.FirestoreProxy_ClearPersistence(swigCPtr), true));
    
    return ret;
  }

  public virtual System.Threading.Tasks.Task<QueryProxy> NamedQueryAsync(string queryName) {
    var future = FirestoreCppPINVOKE.FirestoreProxy_NamedQuery(swigCPtr, queryName);
    
      if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return Future_Query.GetTask(new Future_Query(future, true));
  }

}

}
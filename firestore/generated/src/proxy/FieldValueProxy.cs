/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Firebase.Firestore {

internal class FieldValueProxy : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FieldValueProxy(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FieldValueProxy obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FieldValueProxy() {
    Dispose();
  }

  public virtual void Dispose() {

    lock (FirebaseApp.disposeLock) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          FirestoreCppPINVOKE.delete_FieldValueProxy(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(
            null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static FieldValueProxy Boolean(bool value) {
    FieldValueProxy ret = new FieldValueProxy(FirestoreCppPINVOKE.FieldValueProxy_Boolean(value), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FieldValueProxy Integer(long value) {
    FieldValueProxy ret = new FieldValueProxy(FirestoreCppPINVOKE.FieldValueProxy_Integer(value), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FieldValueProxy Double(double value) {
    FieldValueProxy ret = new FieldValueProxy(FirestoreCppPINVOKE.FieldValueProxy_Double(value), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FieldValueProxy Timestamp(TimestampProxy value) {
    FieldValueProxy ret = new FieldValueProxy(FirestoreCppPINVOKE.FieldValueProxy_Timestamp(TimestampProxy.getCPtr(value)), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FieldValueProxy String(string value) {
    FieldValueProxy ret = new FieldValueProxy(FirestoreCppPINVOKE.FieldValueProxy_String(value), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FieldValueProxy Blob(SWIGTYPE_p_unsigned_char value, uint size) {
    FieldValueProxy ret = new FieldValueProxy(FirestoreCppPINVOKE.FieldValueProxy_Blob(SWIGTYPE_p_unsigned_char.getCPtr(value), size), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FieldValueProxy Reference(DocumentReferenceProxy value) {
    FieldValueProxy ret = new FieldValueProxy(FirestoreCppPINVOKE.FieldValueProxy_Reference(DocumentReferenceProxy.getCPtr(value)), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FieldValueProxy GeoPoint(GeoPointProxy value) {
    FieldValueProxy ret = new FieldValueProxy(FirestoreCppPINVOKE.FieldValueProxy_GeoPoint(GeoPointProxy.getCPtr(value)), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FieldValueProxy.Type type() {
    FieldValueProxy.Type ret = (FieldValueProxy.Type)FirestoreCppPINVOKE.FieldValueProxy_type(swigCPtr);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool is_null() {
    bool ret = FirestoreCppPINVOKE.FieldValueProxy_is_null(swigCPtr);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool is_array() {
    bool ret = FirestoreCppPINVOKE.FieldValueProxy_is_array(swigCPtr);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool is_map() {
    bool ret = FirestoreCppPINVOKE.FieldValueProxy_is_map(swigCPtr);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool boolean_value() {
    bool ret = FirestoreCppPINVOKE.FieldValueProxy_boolean_value(swigCPtr);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long integer_value() {
    long ret = FirestoreCppPINVOKE.FieldValueProxy_integer_value(swigCPtr);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double double_value() {
    double ret = FirestoreCppPINVOKE.FieldValueProxy_double_value(swigCPtr);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TimestampProxy timestamp_value() {
    TimestampProxy ret = new TimestampProxy(FirestoreCppPINVOKE.FieldValueProxy_timestamp_value(swigCPtr), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string string_value() {
    string ret = FirestoreCppPINVOKE.FieldValueProxy_string_value(swigCPtr);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_unsigned_char blob_value() {
    global::System.IntPtr cPtr = FirestoreCppPINVOKE.FieldValueProxy_blob_value(swigCPtr);
    SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint blob_size() {
    uint ret = FirestoreCppPINVOKE.FieldValueProxy_blob_size(swigCPtr);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DocumentReferenceProxy reference_value() {
    DocumentReferenceProxy ret = new DocumentReferenceProxy(FirestoreCppPINVOKE.FieldValueProxy_reference_value(swigCPtr), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GeoPointProxy geo_point_value() {
    GeoPointProxy ret = new GeoPointProxy(FirestoreCppPINVOKE.FieldValueProxy_geo_point_value(swigCPtr), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool is_valid() {
    bool ret = FirestoreCppPINVOKE.FieldValueProxy_is_valid(swigCPtr);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FieldValueProxy Null() {
    FieldValueProxy ret = new FieldValueProxy(FirestoreCppPINVOKE.FieldValueProxy_Null(), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FieldValueProxy Delete() {
    FieldValueProxy ret = new FieldValueProxy(FirestoreCppPINVOKE.FieldValueProxy_Delete(), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FieldValueProxy ServerTimestamp() {
    FieldValueProxy ret = new FieldValueProxy(FirestoreCppPINVOKE.FieldValueProxy_ServerTimestamp(), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FieldValueProxy IntegerIncrement(long byValue) {
    FieldValueProxy ret = new FieldValueProxy(FirestoreCppPINVOKE.FieldValueProxy_IntegerIncrement(byValue), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FieldValueProxy DoubleIncrement(double byValue) {
    FieldValueProxy ret = new FieldValueProxy(FirestoreCppPINVOKE.FieldValueProxy_DoubleIncrement(byValue), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// Type of data that this variant object contains.
  public enum Type {
    Null,
    Boolean,
    Integer,
    Double,
    Timestamp,
    String,
    Blob,
    Reference,
    GeoPoint,
    Array,
    Map,
    Delete,
    ServerTimestamp,
    ArrayUnion,
    ArrayRemove,
    IncrementInteger,
    IncrementDouble
  }

}

}
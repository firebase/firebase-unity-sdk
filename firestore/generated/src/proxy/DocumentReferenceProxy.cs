/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Firebase.Firestore {

internal class DocumentReferenceProxy : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DocumentReferenceProxy(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DocumentReferenceProxy obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~DocumentReferenceProxy() {
    Dispose();
  }

  public virtual void Dispose() {

    lock (FirebaseApp.disposeLock) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          FirestoreCppPINVOKE.delete_DocumentReferenceProxy(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(
            null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual string id() {
    string ret = FirestoreCppPINVOKE.DocumentReferenceProxy_id(swigCPtr);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string path() {
    string ret = FirestoreCppPINVOKE.DocumentReferenceProxy_path(swigCPtr);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual CollectionReferenceProxy Parent() {
    CollectionReferenceProxy ret = new CollectionReferenceProxy(FirestoreCppPINVOKE.DocumentReferenceProxy_Parent(swigCPtr), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual CollectionReferenceProxy Collection(string collectionPath) {
    CollectionReferenceProxy ret = new CollectionReferenceProxy(FirestoreCppPINVOKE.DocumentReferenceProxy_Collection__SWIG_0(swigCPtr, collectionPath), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual System.Threading.Tasks.Task<DocumentSnapshotProxy> GetAsync(Source source) {
    var future = FirestoreCppPINVOKE.DocumentReferenceProxy_Get__SWIG_0(swigCPtr, (int)source);
    
      if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return Future_DocumentSnapshot.GetTask(new Future_DocumentSnapshot(future, true));
  }

  public virtual System.Threading.Tasks.Task<DocumentSnapshotProxy> GetAsync() {
    var future = FirestoreCppPINVOKE.DocumentReferenceProxy_Get__SWIG_1(swigCPtr);
    
      if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return Future_DocumentSnapshot.GetTask(new Future_DocumentSnapshot(future, true));
  }

  public virtual System.Threading.Tasks.Task DeleteAsync() {
    System.Threading.Tasks.Task ret = Future_FirestoreVoid.GetTask(
        new Future_FirestoreVoid(FirestoreCppPINVOKE.DocumentReferenceProxy_Delete(swigCPtr), true));
    
    return ret;
  }

  public bool is_valid() {
    bool ret = FirestoreCppPINVOKE.DocumentReferenceProxy_is_valid(swigCPtr);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}